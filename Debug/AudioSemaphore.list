
AudioSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e0  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080026d8  080026d8  000036d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c0  080028c0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080028c0  080028c0  000038c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028c8  080028c8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028cc  080028cc  000038cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000010  080028dc  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080028dc  0000404c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f8e  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011dd  00000000  00000000  00008fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  0000a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a0  00000000  00000000  0000a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002602d  00000000  00000000  0000aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f83  00000000  00000000  00030a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eca64  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012345c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001438  00000000  00000000  001234a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001248d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	080026c0 	.word	0x080026c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	080026c0 	.word	0x080026c0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800052c:	f000 f8e6 	bl	80006fc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 f9e5 	bl	80008fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f844 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f8c8 	bl	80006cc <MX_GPIO_Init>
  MX_DAC_Init();
 800053c:	f000 f89c 	bl	8000678 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000540:	2100      	movs	r1, #0
 8000542:	481d      	ldr	r0, [pc, #116]	@ (80005b8 <main+0x90>)
 8000544:	f000 fbdc 	bl	8000d00 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000548:	2300      	movs	r3, #0
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	481a      	ldr	r0, [pc, #104]	@ (80005b8 <main+0x90>)
 8000550:	f000 fc2d 	bl	8000dae <HAL_DAC_SetValue>
//	  if (dac_value < 200) {
//	  	dac_value++;
//	  } else {
//	  	dac_value=0;
//	  }
	  dac_value++;
 8000554:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <main+0x94>)
 8000556:	ed93 7b00 	vldr	d7, [r3]
 800055a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800055e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <main+0x94>)
 8000564:	ed83 7b00 	vstr	d7, [r3]
	  HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fa25 	bl	80009b8 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t) (sin(dac_value / 50) * 50.0f) + 50);
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <main+0x94>)
 8000570:	ed93 7b00 	vldr	d7, [r3]
 8000574:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 80005b0 <main+0x88>
 8000578:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800057c:	eeb0 0b46 	vmov.f64	d0, d6
 8000580:	f001 fad2 	bl	8001b28 <sin>
 8000584:	eeb0 7b40 	vmov.f64	d7, d0
 8000588:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80005b0 <main+0x88>
 800058c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000590:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000594:	ee17 3a90 	vmov	r3, s15
 8000598:	3332      	adds	r3, #50	@ 0x32
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <main+0x90>)
 80005a0:	f000 fc05 	bl	8000dae <HAL_DAC_SetValue>
	  HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fa07 	bl	80009b8 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80005aa:	bf00      	nop
 80005ac:	e7cc      	b.n	8000548 <main+0x20>
 80005ae:	bf00      	nop
 80005b0:	00000000 	.word	0x00000000
 80005b4:	40490000 	.word	0x40490000
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	20000040 	.word	0x20000040

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2234      	movs	r2, #52	@ 0x34
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fa7c 	bl	8001acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <SystemClock_Config+0xb0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <SystemClock_Config+0xb0>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SystemClock_Config+0xb0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <SystemClock_Config+0xb4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000604:	4a1b      	ldr	r2, [pc, #108]	@ (8000674 <SystemClock_Config+0xb4>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <SystemClock_Config+0xb4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fded 	bl	800120c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000638:	f000 f88c 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f886 	bl	8001768 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000662:	f000 f877 	bl	8000754 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_DAC_Init+0x4c>)
 8000688:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <MX_DAC_Init+0x50>)
 800068a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <MX_DAC_Init+0x4c>)
 800068e:	f000 fb15 	bl	8000cbc <HAL_DAC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000698:	f000 f85c 	bl	8000754 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <MX_DAC_Init+0x4c>)
 80006ac:	f000 fba9 	bl	8000e02 <HAL_DAC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006b6:	f000 f84d 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000002c 	.word	0x2000002c
 80006c8:	40007400 	.word	0x40007400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_GPIO_Init+0x2c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <MX_GPIO_Init+0x2c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_GPIO_Init+0x2c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800070e:	f000 fa5d 	bl	8000bcc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000712:	2301      	movs	r3, #1
 8000714:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000716:	2300      	movs	r3, #0
 8000718:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800071e:	231f      	movs	r3, #31
 8000720:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000722:	2387      	movs	r3, #135	@ 0x87
 8000724:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000726:	2300      	movs	r3, #0
 8000728:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800072e:	2301      	movs	r3, #1
 8000730:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000732:	2301      	movs	r3, #1
 8000734:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800073e:	463b      	mov	r3, r7
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fa7b 	bl	8000c3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000746:	2004      	movs	r0, #4
 8000748:	f000 fa58 	bl	8000bfc <HAL_MPU_Enable>

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x44>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_MspInit+0x44>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_MspInit+0x44>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <HAL_MspInit+0x44>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000788:	6453      	str	r3, [r2, #68]	@ 0x44
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_MspInit+0x44>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a15      	ldr	r2, [pc, #84]	@ (800081c <HAL_DAC_MspInit+0x74>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d123      	bne.n	8000812 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_DAC_MspInit+0x78>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <HAL_DAC_MspInit+0x78>)
 80007d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_DAC_MspInit+0x78>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <HAL_DAC_MspInit+0x78>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <HAL_DAC_MspInit+0x78>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_DAC_MspInit+0x78>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fa:	2310      	movs	r3, #16
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	@ (8000824 <HAL_DAC_MspInit+0x7c>)
 800080e:	f000 fb51 	bl	8000eb4 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	@ 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40007400 	.word	0x40007400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <NMI_Handler+0x4>

08000830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087e:	f000 f87b 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008b0:	f7ff ffea 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008da:	f001 f8ff 	bl	8001adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f7ff fe23 	bl	8000528 <main>
  bx  lr    
 80008e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f0:	080028d0 	.word	0x080028d0
  ldr r2, =_sbss
 80008f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008f8:	2000004c 	.word	0x2000004c

080008fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>

080008fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000902:	2003      	movs	r0, #3
 8000904:	f000 f92e 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000908:	200f      	movs	r0, #15
 800090a:	f000 f805 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090e:	f7ff ff27 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f93b 	bl	8000bb2 <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f911 	bl	8000b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000048 	.word	0x20000048

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000048 	.word	0x20000048

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff ffee 	bl	80009a0 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009de:	bf00      	nop
 80009e0:	f7ff ffde 	bl	80009a0 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x40>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x40>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	05fa0000 	.word	0x05fa0000

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	@ 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff47 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff5c 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ff8e 	bl	8000ab8 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff5d 	bl	8000a64 <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffb0 	bl	8000b20 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bd0:	f3bf 8f5f 	dmb	sy
}
 8000bd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <HAL_MPU_Disable+0x28>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <HAL_MPU_Disable+0x28>)
 8000bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000be0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_MPU_Disable+0x2c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	e000ed90 	.word	0xe000ed90

08000bfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c04:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_MPU_Enable+0x38>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_MPU_Enable+0x3c>)
 8000c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <HAL_MPU_Enable+0x3c>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c1a:	f3bf 8f4f 	dsb	sy
}
 8000c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c20:	f3bf 8f6f 	isb	sy
}
 8000c24:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed90 	.word	0xe000ed90
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	785a      	ldrb	r2, [r3, #1]
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c58:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7b1b      	ldrb	r3, [r3, #12]
 8000c64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7adb      	ldrb	r3, [r3, #11]
 8000c6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7a9b      	ldrb	r3, [r3, #10]
 8000c72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b5b      	ldrb	r3, [r3, #13]
 8000c7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7b9b      	ldrb	r3, [r3, #14]
 8000c82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7bdb      	ldrb	r3, [r3, #15]
 8000c8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7a5b      	ldrb	r3, [r3, #9]
 8000c92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7a1b      	ldrb	r3, [r3, #8]
 8000c9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ca6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca8:	6113      	str	r3, [r2, #16]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed90 	.word	0xe000ed90

08000cbc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e014      	b.n	8000cf8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d105      	bne.n	8000ce4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fd62 	bl	80007a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e046      	b.n	8000da2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	795b      	ldrb	r3, [r3, #5]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_DAC_Start+0x20>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e040      	b.n	8000da2 <HAL_DAC_Start+0xa2>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	2201      	movs	r2, #1
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10f      	bne.n	8000d6a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8000d54:	2b3c      	cmp	r3, #60	@ 0x3c
 8000d56:	d11d      	bne.n	8000d94 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	e014      	b.n	8000d94 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	213c      	movs	r1, #60	@ 0x3c
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d107      	bne.n	8000d94 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0202 	orr.w	r2, r2, #2
 8000d92:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b087      	sub	sp, #28
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e015      	b.n	8000df6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d105      	bne.n	8000de2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	3308      	adds	r3, #8
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e004      	b.n	8000dec <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	3314      	adds	r3, #20
 8000dea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	461a      	mov	r2, r3
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	371c      	adds	r7, #28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b089      	sub	sp, #36	@ 0x24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <HAL_DAC_ConfigChannel+0x1c>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e042      	b.n	8000ea8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	795b      	ldrb	r3, [r3, #5]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <HAL_DAC_ConfigChannel+0x2c>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e03c      	b.n	8000ea8 <HAL_DAC_ConfigChannel+0xa6>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2201      	movs	r2, #1
 8000e32:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2202      	movs	r2, #2
 8000e38:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f003 0310 	and.w	r3, r3, #16
 8000e48:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6819      	ldr	r1, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	22c0      	movs	r2, #192	@ 0xc0
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43da      	mvns	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	400a      	ands	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3724      	adds	r7, #36	@ 0x24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e175      	b.n	80011c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 8164 	bne.w	80011ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d005      	beq.n	8000f0a <HAL_GPIO_Init+0x56>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d130      	bne.n	8000f6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d017      	beq.n	8000fa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d123      	bne.n	8000ffc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	69b9      	ldr	r1, [r7, #24]
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0203 	and.w	r2, r3, #3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80be 	beq.w	80011ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b66      	ldr	r3, [pc, #408]	@ (80011d8 <HAL_GPIO_Init+0x324>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a65      	ldr	r2, [pc, #404]	@ (80011d8 <HAL_GPIO_Init+0x324>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b63      	ldr	r3, [pc, #396]	@ (80011d8 <HAL_GPIO_Init+0x324>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001056:	4a61      	ldr	r2, [pc, #388]	@ (80011dc <HAL_GPIO_Init+0x328>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a58      	ldr	r2, [pc, #352]	@ (80011e0 <HAL_GPIO_Init+0x32c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d037      	beq.n	80010f2 <HAL_GPIO_Init+0x23e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a57      	ldr	r2, [pc, #348]	@ (80011e4 <HAL_GPIO_Init+0x330>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d031      	beq.n	80010ee <HAL_GPIO_Init+0x23a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a56      	ldr	r2, [pc, #344]	@ (80011e8 <HAL_GPIO_Init+0x334>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d02b      	beq.n	80010ea <HAL_GPIO_Init+0x236>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a55      	ldr	r2, [pc, #340]	@ (80011ec <HAL_GPIO_Init+0x338>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x232>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a54      	ldr	r2, [pc, #336]	@ (80011f0 <HAL_GPIO_Init+0x33c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x22e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a53      	ldr	r2, [pc, #332]	@ (80011f4 <HAL_GPIO_Init+0x340>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x22a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	@ (80011f8 <HAL_GPIO_Init+0x344>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x226>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a51      	ldr	r2, [pc, #324]	@ (80011fc <HAL_GPIO_Init+0x348>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x222>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a50      	ldr	r2, [pc, #320]	@ (8001200 <HAL_GPIO_Init+0x34c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x21e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001204 <HAL_GPIO_Init+0x350>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x21a>
 80010ca:	2309      	movs	r3, #9
 80010cc:	e012      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010ce:	230a      	movs	r3, #10
 80010d0:	e010      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010d2:	2308      	movs	r3, #8
 80010d4:	e00e      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x240>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x328>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b3d      	ldr	r3, [pc, #244]	@ (8001208 <HAL_GPIO_Init+0x354>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a34      	ldr	r2, [pc, #208]	@ (8001208 <HAL_GPIO_Init+0x354>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <HAL_GPIO_Init+0x354>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <HAL_GPIO_Init+0x354>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001166:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <HAL_GPIO_Init+0x354>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118a:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <HAL_GPIO_Init+0x354>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <HAL_GPIO_Init+0x354>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b4:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <HAL_GPIO_Init+0x354>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae86 	bls.w	8000ed4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	40022000 	.word	0x40022000
 8001204:	40022400 	.word	0x40022400
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e29b      	b.n	800175a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8087 	beq.w	800133e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001230:	4b96      	ldr	r3, [pc, #600]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b04      	cmp	r3, #4
 800123a:	d00c      	beq.n	8001256 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123c:	4b93      	ldr	r3, [pc, #588]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b08      	cmp	r3, #8
 8001246:	d112      	bne.n	800126e <HAL_RCC_OscConfig+0x62>
 8001248:	4b90      	ldr	r3, [pc, #576]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001250:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001254:	d10b      	bne.n	800126e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001256:	4b8d      	ldr	r3, [pc, #564]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d06c      	beq.n	800133c <HAL_RCC_OscConfig+0x130>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d168      	bne.n	800133c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e275      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x7a>
 8001278:	4b84      	ldr	r3, [pc, #528]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a83      	ldr	r2, [pc, #524]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800127e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e02e      	b.n	80012e4 <HAL_RCC_OscConfig+0xd8>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x9c>
 800128e:	4b7f      	ldr	r3, [pc, #508]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7e      	ldr	r2, [pc, #504]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b7c      	ldr	r3, [pc, #496]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a7b      	ldr	r2, [pc, #492]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xd8>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0xc0>
 80012b2:	4b76      	ldr	r3, [pc, #472]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b73      	ldr	r3, [pc, #460]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a72      	ldr	r2, [pc, #456]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xd8>
 80012cc:	4b6f      	ldr	r3, [pc, #444]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a6e      	ldr	r2, [pc, #440]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b6c      	ldr	r3, [pc, #432]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6b      	ldr	r2, [pc, #428]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb58 	bl	80009a0 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fb54 	bl	80009a0 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e229      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b61      	ldr	r3, [pc, #388]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe8>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fb44 	bl	80009a0 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fb40 	bl	80009a0 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	@ 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e215      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b57      	ldr	r3, [pc, #348]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x110>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d069      	beq.n	800141e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134a:	4b50      	ldr	r3, [pc, #320]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b4d      	ldr	r3, [pc, #308]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x190>
 8001362:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b47      	ldr	r3, [pc, #284]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x17a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1e9      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b41      	ldr	r3, [pc, #260]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	493d      	ldr	r1, [pc, #244]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e040      	b.n	800141e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d023      	beq.n	80013ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b39      	ldr	r3, [pc, #228]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a38      	ldr	r2, [pc, #224]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff faf6 	bl	80009a0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff faf2 	bl	80009a0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1c7      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	4b30      	ldr	r3, [pc, #192]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4929      	ldr	r1, [pc, #164]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
 80013ea:	e018      	b.n	800141e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a26      	ldr	r2, [pc, #152]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fad2 	bl	80009a0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff face 	bl	80009a0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1a3      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d038      	beq.n	800149c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d019      	beq.n	8001466 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001436:	4a15      	ldr	r2, [pc, #84]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff faaf 	bl	80009a0 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff faab 	bl	80009a0 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e180      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800145a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x23a>
 8001464:	e01a      	b.n	800149c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146a:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_RCC_OscConfig+0x280>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fa95 	bl	80009a0 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fa91 	bl	80009a0 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d903      	bls.n	8001490 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e166      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
 800148c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ee      	bne.n	800147a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a4 	beq.w	80015f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b8c      	ldr	r3, [pc, #560]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b89      	ldr	r3, [pc, #548]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	4a88      	ldr	r2, [pc, #544]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c2:	4b86      	ldr	r3, [pc, #536]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d2:	4b83      	ldr	r3, [pc, #524]	@ (80016e0 <HAL_RCC_OscConfig+0x4d4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014de:	4b80      	ldr	r3, [pc, #512]	@ (80016e0 <HAL_RCC_OscConfig+0x4d4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7f      	ldr	r2, [pc, #508]	@ (80016e0 <HAL_RCC_OscConfig+0x4d4>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fa59 	bl	80009a0 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fa55 	bl	80009a0 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	@ 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e12a      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001504:	4b76      	ldr	r3, [pc, #472]	@ (80016e0 <HAL_RCC_OscConfig+0x4d4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x31a>
 8001518:	4b70      	ldr	r3, [pc, #448]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151c:	4a6f      	ldr	r2, [pc, #444]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	@ 0x70
 8001524:	e02d      	b.n	8001582 <HAL_RCC_OscConfig+0x376>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x33c>
 800152e:	4b6b      	ldr	r3, [pc, #428]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	4a6a      	ldr	r2, [pc, #424]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	@ 0x70
 800153a:	4b68      	ldr	r3, [pc, #416]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	4a67      	ldr	r2, [pc, #412]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6713      	str	r3, [r2, #112]	@ 0x70
 8001546:	e01c      	b.n	8001582 <HAL_RCC_OscConfig+0x376>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x35e>
 8001550:	4b62      	ldr	r3, [pc, #392]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001554:	4a61      	ldr	r2, [pc, #388]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	@ 0x70
 800155c:	4b5f      	ldr	r3, [pc, #380]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001560:	4a5e      	ldr	r2, [pc, #376]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	@ 0x70
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x376>
 800156a:	4b5c      	ldr	r3, [pc, #368]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156e:	4a5b      	ldr	r2, [pc, #364]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6713      	str	r3, [r2, #112]	@ 0x70
 8001576:	4b59      	ldr	r3, [pc, #356]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157a:	4a58      	ldr	r2, [pc, #352]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d015      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fa09 	bl	80009a0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fa05 	bl	80009a0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0d8      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a8:	4b4c      	ldr	r3, [pc, #304]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ee      	beq.n	8001592 <HAL_RCC_OscConfig+0x386>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff f9f3 	bl	80009a0 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff f9ef 	bl	80009a0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0c2      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4b41      	ldr	r3, [pc, #260]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b3d      	ldr	r3, [pc, #244]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a3c      	ldr	r2, [pc, #240]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80ae 	beq.w	8001758 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d06d      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d14b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a31      	ldr	r2, [pc, #196]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800161a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff f9c0 	bl	80009a0 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f9bc 	bl	80009a0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e091      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	019b      	lsls	r3, r3, #6
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	3b01      	subs	r3, #1
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	071b      	lsls	r3, r3, #28
 800166e:	491b      	ldr	r1, [pc, #108]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800167a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff f98e 	bl	80009a0 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff f98a 	bl	80009a0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e05f      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x47c>
 80016a6:	e057      	b.n	8001758 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f974 	bl	80009a0 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff f970 	bl	80009a0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e045      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <HAL_RCC_OscConfig+0x4d0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x4b0>
 80016da:	e03d      	b.n	8001758 <HAL_RCC_OscConfig+0x54c>
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <HAL_RCC_OscConfig+0x558>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d030      	beq.n	8001754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d129      	bne.n	8001754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d122      	bne.n	8001754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800171a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800171c:	4293      	cmp	r3, r2
 800171e:	d119      	bne.n	8001754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	3b01      	subs	r3, #1
 800172e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d10f      	bne.n	8001754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d0      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d910      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b67      	ldr	r3, [pc, #412]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 020f 	bic.w	r2, r3, #15
 8001796:	4965      	ldr	r1, [pc, #404]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d040      	beq.n	800188c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e073      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3d      	ldr	r3, [pc, #244]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06b      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4936      	ldr	r1, [pc, #216]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800185c:	f7ff f8a0 	bl	80009a0 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff f89c 	bl	80009a0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e053      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d210      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 020f 	bic.w	r2, r3, #15
 80018a2:	4922      	ldr	r1, [pc, #136]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	@ (8001934 <HAL_RCC_ClockConfig+0x1cc>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_RCC_ClockConfig+0x1d0>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x1d4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fffc 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	080026d8 	.word	0x080026d8
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	b090      	sub	sp, #64	@ 0x40
 8001946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
 800194c:	2300      	movs	r3, #0
 800194e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001958:	4b59      	ldr	r3, [pc, #356]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d00d      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 8001964:	2b08      	cmp	r3, #8
 8001966:	f200 80a1 	bhi.w	8001aac <HAL_RCC_GetSysClockFreq+0x16c>
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x34>
 800196e:	2b04      	cmp	r3, #4
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x3a>
 8001972:	e09b      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001976:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001978:	e09b      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197a:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800197c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800197e:	e098      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800198a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d028      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	2200      	movs	r2, #0
 800199e:	623b      	str	r3, [r7, #32]
 80019a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019a8:	2100      	movs	r1, #0
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ac:	fb03 f201 	mul.w	r2, r3, r1
 80019b0:	2300      	movs	r3, #0
 80019b2:	fb00 f303 	mul.w	r3, r0, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	4a43      	ldr	r2, [pc, #268]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ba:	fba0 1202 	umull	r1, r2, r0, r2
 80019be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019c0:	460a      	mov	r2, r1
 80019c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c6:	4413      	add	r3, r2
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019cc:	2200      	movs	r2, #0
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	61fa      	str	r2, [r7, #28]
 80019d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019da:	f7fe fc2d 	bl	8000238 <__aeabi_uldivmod>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4613      	mov	r3, r2
 80019e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019e6:	e053      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b35      	ldr	r3, [pc, #212]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	2200      	movs	r2, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	617a      	str	r2, [r7, #20]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019fa:	f04f 0b00 	mov.w	fp, #0
 80019fe:	4652      	mov	r2, sl
 8001a00:	465b      	mov	r3, fp
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	ebb2 080a 	subs.w	r8, r2, sl
 8001a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a32:	ebb2 0408 	subs.w	r4, r2, r8
 8001a36:	eb63 0509 	sbc.w	r5, r3, r9
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	00eb      	lsls	r3, r5, #3
 8001a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a48:	00e2      	lsls	r2, r4, #3
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	eb14 030a 	adds.w	r3, r4, sl
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	eb45 030b 	adc.w	r3, r5, fp
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a66:	4629      	mov	r1, r5
 8001a68:	028b      	lsls	r3, r1, #10
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a70:	4621      	mov	r1, r4
 8001a72:	028a      	lsls	r2, r1, #10
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	60fa      	str	r2, [r7, #12]
 8001a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a84:	f7fe fbd8 	bl	8000238 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c1b      	lsrs	r3, r3, #16
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001aa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3740      	adds	r7, #64	@ 0x40
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	017d7840 	.word	0x017d7840

08001acc <memset>:
 8001acc:	4402      	add	r2, r0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <memset+0xa>
 8001ad4:	4770      	bx	lr
 8001ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8001ada:	e7f9      	b.n	8001ad0 <memset+0x4>

08001adc <__libc_init_array>:
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	4d0d      	ldr	r5, [pc, #52]	@ (8001b14 <__libc_init_array+0x38>)
 8001ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8001b18 <__libc_init_array+0x3c>)
 8001ae2:	1b64      	subs	r4, r4, r5
 8001ae4:	10a4      	asrs	r4, r4, #2
 8001ae6:	2600      	movs	r6, #0
 8001ae8:	42a6      	cmp	r6, r4
 8001aea:	d109      	bne.n	8001b00 <__libc_init_array+0x24>
 8001aec:	4d0b      	ldr	r5, [pc, #44]	@ (8001b1c <__libc_init_array+0x40>)
 8001aee:	4c0c      	ldr	r4, [pc, #48]	@ (8001b20 <__libc_init_array+0x44>)
 8001af0:	f000 fde6 	bl	80026c0 <_init>
 8001af4:	1b64      	subs	r4, r4, r5
 8001af6:	10a4      	asrs	r4, r4, #2
 8001af8:	2600      	movs	r6, #0
 8001afa:	42a6      	cmp	r6, r4
 8001afc:	d105      	bne.n	8001b0a <__libc_init_array+0x2e>
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b04:	4798      	blx	r3
 8001b06:	3601      	adds	r6, #1
 8001b08:	e7ee      	b.n	8001ae8 <__libc_init_array+0xc>
 8001b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b0e:	4798      	blx	r3
 8001b10:	3601      	adds	r6, #1
 8001b12:	e7f2      	b.n	8001afa <__libc_init_array+0x1e>
 8001b14:	080028c8 	.word	0x080028c8
 8001b18:	080028c8 	.word	0x080028c8
 8001b1c:	080028c8 	.word	0x080028c8
 8001b20:	080028cc 	.word	0x080028cc
 8001b24:	00000000 	.word	0x00000000

08001b28 <sin>:
 8001b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b2e:	ee17 3a90 	vmov	r3, s15
 8001b32:	4a21      	ldr	r2, [pc, #132]	@ (8001bb8 <sin+0x90>)
 8001b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d807      	bhi.n	8001b4c <sin+0x24>
 8001b3c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001bb0 <sin+0x88>
 8001b40:	2000      	movs	r0, #0
 8001b42:	b005      	add	sp, #20
 8001b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b48:	f000 b8a2 	b.w	8001c90 <__kernel_sin>
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <sin+0x94>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d904      	bls.n	8001b5c <sin+0x34>
 8001b52:	ee30 0b40 	vsub.f64	d0, d0, d0
 8001b56:	b005      	add	sp, #20
 8001b58:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b5c:	4668      	mov	r0, sp
 8001b5e:	f000 f8ef 	bl	8001d40 <__ieee754_rem_pio2>
 8001b62:	f000 0003 	and.w	r0, r0, #3
 8001b66:	2801      	cmp	r0, #1
 8001b68:	d00a      	beq.n	8001b80 <sin+0x58>
 8001b6a:	2802      	cmp	r0, #2
 8001b6c:	d00f      	beq.n	8001b8e <sin+0x66>
 8001b6e:	b9c0      	cbnz	r0, 8001ba2 <sin+0x7a>
 8001b70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001b74:	ed9d 0b00 	vldr	d0, [sp]
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f000 f889 	bl	8001c90 <__kernel_sin>
 8001b7e:	e7ea      	b.n	8001b56 <sin+0x2e>
 8001b80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001b84:	ed9d 0b00 	vldr	d0, [sp]
 8001b88:	f000 f81a 	bl	8001bc0 <__kernel_cos>
 8001b8c:	e7e3      	b.n	8001b56 <sin+0x2e>
 8001b8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001b92:	ed9d 0b00 	vldr	d0, [sp]
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 f87a 	bl	8001c90 <__kernel_sin>
 8001b9c:	eeb1 0b40 	vneg.f64	d0, d0
 8001ba0:	e7d9      	b.n	8001b56 <sin+0x2e>
 8001ba2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001ba6:	ed9d 0b00 	vldr	d0, [sp]
 8001baa:	f000 f809 	bl	8001bc0 <__kernel_cos>
 8001bae:	e7f5      	b.n	8001b9c <sin+0x74>
	...
 8001bb8:	3fe921fb 	.word	0x3fe921fb
 8001bbc:	7fefffff 	.word	0x7fefffff

08001bc0 <__kernel_cos>:
 8001bc0:	eeb0 5b40 	vmov.f64	d5, d0
 8001bc4:	ee15 1a90 	vmov	r1, s11
 8001bc8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8001bcc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8001bd0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8001bd4:	d204      	bcs.n	8001be0 <__kernel_cos+0x20>
 8001bd6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8001bda:	ee17 3a90 	vmov	r3, s15
 8001bde:	b343      	cbz	r3, 8001c32 <__kernel_cos+0x72>
 8001be0:	ee25 6b05 	vmul.f64	d6, d5, d5
 8001be4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8001be8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8001c58 <__kernel_cos+0x98>
 8001bec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8001c60 <__kernel_cos+0xa0>
 8001bf0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8001bf4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8001c68 <__kernel_cos+0xa8>
 8001bf8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8001bfc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8001c70 <__kernel_cos+0xb0>
 8001c00:	eea7 4b06 	vfma.f64	d4, d7, d6
 8001c04:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8001c78 <__kernel_cos+0xb8>
 8001c08:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <__kernel_cos+0xc8>)
 8001c0a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8001c0e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8001c80 <__kernel_cos+0xc0>
 8001c12:	4299      	cmp	r1, r3
 8001c14:	eea7 4b06 	vfma.f64	d4, d7, d6
 8001c18:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8001c1c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8001c20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c24:	eea6 1b04 	vfma.f64	d1, d6, d4
 8001c28:	d804      	bhi.n	8001c34 <__kernel_cos+0x74>
 8001c2a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8001c2e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8001c32:	4770      	bx	lr
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <__kernel_cos+0xcc>)
 8001c36:	4299      	cmp	r1, r3
 8001c38:	d809      	bhi.n	8001c4e <__kernel_cos+0x8e>
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8001c40:	ec43 2b16 	vmov	d6, r2, r3
 8001c44:	ee30 0b46 	vsub.f64	d0, d0, d6
 8001c48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c4c:	e7ed      	b.n	8001c2a <__kernel_cos+0x6a>
 8001c4e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8001c52:	e7f7      	b.n	8001c44 <__kernel_cos+0x84>
 8001c54:	f3af 8000 	nop.w
 8001c58:	be8838d4 	.word	0xbe8838d4
 8001c5c:	bda8fae9 	.word	0xbda8fae9
 8001c60:	bdb4b1c4 	.word	0xbdb4b1c4
 8001c64:	3e21ee9e 	.word	0x3e21ee9e
 8001c68:	809c52ad 	.word	0x809c52ad
 8001c6c:	be927e4f 	.word	0xbe927e4f
 8001c70:	19cb1590 	.word	0x19cb1590
 8001c74:	3efa01a0 	.word	0x3efa01a0
 8001c78:	16c15177 	.word	0x16c15177
 8001c7c:	bf56c16c 	.word	0xbf56c16c
 8001c80:	5555554c 	.word	0x5555554c
 8001c84:	3fa55555 	.word	0x3fa55555
 8001c88:	3fd33332 	.word	0x3fd33332
 8001c8c:	3fe90000 	.word	0x3fe90000

08001c90 <__kernel_sin>:
 8001c90:	ee10 3a90 	vmov	r3, s1
 8001c94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c98:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8001c9c:	d204      	bcs.n	8001ca8 <__kernel_sin+0x18>
 8001c9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8001ca2:	ee17 3a90 	vmov	r3, s15
 8001ca6:	b35b      	cbz	r3, 8001d00 <__kernel_sin+0x70>
 8001ca8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8001cac:	ee20 5b06 	vmul.f64	d5, d0, d6
 8001cb0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8001d08 <__kernel_sin+0x78>
 8001cb4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8001d10 <__kernel_sin+0x80>
 8001cb8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8001cbc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001d18 <__kernel_sin+0x88>
 8001cc0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8001cc4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8001d20 <__kernel_sin+0x90>
 8001cc8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8001ccc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001d28 <__kernel_sin+0x98>
 8001cd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8001cd4:	b930      	cbnz	r0, 8001ce4 <__kernel_sin+0x54>
 8001cd6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8001d30 <__kernel_sin+0xa0>
 8001cda:	eea6 4b07 	vfma.f64	d4, d6, d7
 8001cde:	eea4 0b05 	vfma.f64	d0, d4, d5
 8001ce2:	4770      	bx	lr
 8001ce4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8001ce8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8001cec:	eea1 7b04 	vfma.f64	d7, d1, d4
 8001cf0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8001cf4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8001d38 <__kernel_sin+0xa8>
 8001cf8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8001cfc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	f3af 8000 	nop.w
 8001d08:	5acfd57c 	.word	0x5acfd57c
 8001d0c:	3de5d93a 	.word	0x3de5d93a
 8001d10:	8a2b9ceb 	.word	0x8a2b9ceb
 8001d14:	be5ae5e6 	.word	0xbe5ae5e6
 8001d18:	57b1fe7d 	.word	0x57b1fe7d
 8001d1c:	3ec71de3 	.word	0x3ec71de3
 8001d20:	19c161d5 	.word	0x19c161d5
 8001d24:	bf2a01a0 	.word	0xbf2a01a0
 8001d28:	1110f8a6 	.word	0x1110f8a6
 8001d2c:	3f811111 	.word	0x3f811111
 8001d30:	55555549 	.word	0x55555549
 8001d34:	bfc55555 	.word	0xbfc55555
 8001d38:	55555549 	.word	0x55555549
 8001d3c:	3fc55555 	.word	0x3fc55555

08001d40 <__ieee754_rem_pio2>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	eeb0 7b40 	vmov.f64	d7, d0
 8001d46:	ee17 5a90 	vmov	r5, s15
 8001d4a:	4b99      	ldr	r3, [pc, #612]	@ (8001fb0 <__ieee754_rem_pio2+0x270>)
 8001d4c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8001d50:	429e      	cmp	r6, r3
 8001d52:	b088      	sub	sp, #32
 8001d54:	4604      	mov	r4, r0
 8001d56:	d807      	bhi.n	8001d68 <__ieee754_rem_pio2+0x28>
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	ed84 0b00 	vstr	d0, [r4]
 8001d60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8001d64:	2000      	movs	r0, #0
 8001d66:	e01b      	b.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001d68:	4b92      	ldr	r3, [pc, #584]	@ (8001fb4 <__ieee754_rem_pio2+0x274>)
 8001d6a:	429e      	cmp	r6, r3
 8001d6c:	d83b      	bhi.n	8001de6 <__ieee754_rem_pio2+0xa6>
 8001d6e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8001d72:	2d00      	cmp	r5, #0
 8001d74:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8001f70 <__ieee754_rem_pio2+0x230>
 8001d78:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8001d7c:	dd19      	ble.n	8001db2 <__ieee754_rem_pio2+0x72>
 8001d7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8001d82:	429e      	cmp	r6, r3
 8001d84:	d00e      	beq.n	8001da4 <__ieee754_rem_pio2+0x64>
 8001d86:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8001f78 <__ieee754_rem_pio2+0x238>
 8001d8a:	ee37 6b45 	vsub.f64	d6, d7, d5
 8001d8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d92:	ed84 6b00 	vstr	d6, [r4]
 8001d96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001d9a:	ed84 7b02 	vstr	d7, [r4, #8]
 8001d9e:	2001      	movs	r0, #1
 8001da0:	b008      	add	sp, #32
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
 8001da4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8001f80 <__ieee754_rem_pio2+0x240>
 8001da8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8001f88 <__ieee754_rem_pio2+0x248>
 8001dac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001db0:	e7eb      	b.n	8001d8a <__ieee754_rem_pio2+0x4a>
 8001db2:	429e      	cmp	r6, r3
 8001db4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8001db8:	d00e      	beq.n	8001dd8 <__ieee754_rem_pio2+0x98>
 8001dba:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8001f78 <__ieee754_rem_pio2+0x238>
 8001dbe:	ee37 6b05 	vadd.f64	d6, d7, d5
 8001dc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc6:	ed84 6b00 	vstr	d6, [r4]
 8001dca:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd2:	ed84 7b02 	vstr	d7, [r4, #8]
 8001dd6:	e7e3      	b.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001dd8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8001f80 <__ieee754_rem_pio2+0x240>
 8001ddc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8001f88 <__ieee754_rem_pio2+0x248>
 8001de0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001de4:	e7eb      	b.n	8001dbe <__ieee754_rem_pio2+0x7e>
 8001de6:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <__ieee754_rem_pio2+0x278>)
 8001de8:	429e      	cmp	r6, r3
 8001dea:	d870      	bhi.n	8001ece <__ieee754_rem_pio2+0x18e>
 8001dec:	f000 f8ec 	bl	8001fc8 <fabs>
 8001df0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8001df4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8001f90 <__ieee754_rem_pio2+0x250>
 8001df8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8001dfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001e00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001e04:	ee17 0a90 	vmov	r0, s15
 8001e08:	eeb1 4b45 	vneg.f64	d4, d5
 8001e0c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8001f70 <__ieee754_rem_pio2+0x230>
 8001e10:	eea5 0b47 	vfms.f64	d0, d5, d7
 8001e14:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8001f78 <__ieee754_rem_pio2+0x238>
 8001e18:	281f      	cmp	r0, #31
 8001e1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e1e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8001e22:	dc05      	bgt.n	8001e30 <__ieee754_rem_pio2+0xf0>
 8001e24:	4b65      	ldr	r3, [pc, #404]	@ (8001fbc <__ieee754_rem_pio2+0x27c>)
 8001e26:	1e42      	subs	r2, r0, #1
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	42b3      	cmp	r3, r6
 8001e2e:	d109      	bne.n	8001e44 <__ieee754_rem_pio2+0x104>
 8001e30:	ee16 3a90 	vmov	r3, s13
 8001e34:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8001e38:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8001e42:	dc02      	bgt.n	8001e4a <__ieee754_rem_pio2+0x10a>
 8001e44:	ed84 6b00 	vstr	d6, [r4]
 8001e48:	e01a      	b.n	8001e80 <__ieee754_rem_pio2+0x140>
 8001e4a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8001f80 <__ieee754_rem_pio2+0x240>
 8001e4e:	eeb0 6b40 	vmov.f64	d6, d0
 8001e52:	eea4 6b03 	vfma.f64	d6, d4, d3
 8001e56:	ee30 7b46 	vsub.f64	d7, d0, d6
 8001e5a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8001e5e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8001f88 <__ieee754_rem_pio2+0x248>
 8001e62:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8001e66:	ee36 3b47 	vsub.f64	d3, d6, d7
 8001e6a:	ee13 3a90 	vmov	r3, s7
 8001e6e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b31      	cmp	r3, #49	@ 0x31
 8001e76:	dc17      	bgt.n	8001ea8 <__ieee754_rem_pio2+0x168>
 8001e78:	eeb0 0b46 	vmov.f64	d0, d6
 8001e7c:	ed84 3b00 	vstr	d3, [r4]
 8001e80:	ed94 6b00 	vldr	d6, [r4]
 8001e84:	2d00      	cmp	r5, #0
 8001e86:	ee30 0b46 	vsub.f64	d0, d0, d6
 8001e8a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8001e8e:	ed84 0b02 	vstr	d0, [r4, #8]
 8001e92:	da85      	bge.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001e94:	eeb1 6b46 	vneg.f64	d6, d6
 8001e98:	eeb1 0b40 	vneg.f64	d0, d0
 8001e9c:	ed84 6b00 	vstr	d6, [r4]
 8001ea0:	ed84 0b02 	vstr	d0, [r4, #8]
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	e77b      	b.n	8001da0 <__ieee754_rem_pio2+0x60>
 8001ea8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001f98 <__ieee754_rem_pio2+0x258>
 8001eac:	eeb0 0b46 	vmov.f64	d0, d6
 8001eb0:	eea4 0b07 	vfma.f64	d0, d4, d7
 8001eb4:	ee36 6b40 	vsub.f64	d6, d6, d0
 8001eb8:	eea4 6b07 	vfma.f64	d6, d4, d7
 8001ebc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8001fa0 <__ieee754_rem_pio2+0x260>
 8001ec0:	eeb0 7b46 	vmov.f64	d7, d6
 8001ec4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8001ec8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8001ecc:	e7ba      	b.n	8001e44 <__ieee754_rem_pio2+0x104>
 8001ece:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <__ieee754_rem_pio2+0x280>)
 8001ed0:	429e      	cmp	r6, r3
 8001ed2:	d906      	bls.n	8001ee2 <__ieee754_rem_pio2+0x1a2>
 8001ed4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8001ed8:	ed80 7b02 	vstr	d7, [r0, #8]
 8001edc:	ed80 7b00 	vstr	d7, [r0]
 8001ee0:	e740      	b.n	8001d64 <__ieee754_rem_pio2+0x24>
 8001ee2:	ee10 3a10 	vmov	r3, s0
 8001ee6:	1532      	asrs	r2, r6, #20
 8001ee8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8001eec:	4618      	mov	r0, r3
 8001eee:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8001ef2:	ec41 0b17 	vmov	d7, r0, r1
 8001ef6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8001efa:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8001fa8 <__ieee754_rem_pio2+0x268>
 8001efe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8001f02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f06:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001f0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001f0e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8001f12:	a808      	add	r0, sp, #32
 8001f14:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8001f18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f1c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8001f20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001f24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f28:	2103      	movs	r1, #3
 8001f2a:	ed30 7b02 	vldmdb	r0!, {d7}
 8001f2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	460b      	mov	r3, r1
 8001f38:	f101 31ff 	add.w	r1, r1, #4294967295
 8001f3c:	d0f5      	beq.n	8001f2a <__ieee754_rem_pio2+0x1ea>
 8001f3e:	4921      	ldr	r1, [pc, #132]	@ (8001fc4 <__ieee754_rem_pio2+0x284>)
 8001f40:	9101      	str	r1, [sp, #4]
 8001f42:	2102      	movs	r1, #2
 8001f44:	9100      	str	r1, [sp, #0]
 8001f46:	a802      	add	r0, sp, #8
 8001f48:	4621      	mov	r1, r4
 8001f4a:	f000 f845 	bl	8001fd8 <__kernel_rem_pio2>
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	f6bf af26 	bge.w	8001da0 <__ieee754_rem_pio2+0x60>
 8001f54:	ed94 7b00 	vldr	d7, [r4]
 8001f58:	eeb1 7b47 	vneg.f64	d7, d7
 8001f5c:	ed84 7b00 	vstr	d7, [r4]
 8001f60:	ed94 7b02 	vldr	d7, [r4, #8]
 8001f64:	eeb1 7b47 	vneg.f64	d7, d7
 8001f68:	ed84 7b02 	vstr	d7, [r4, #8]
 8001f6c:	e79a      	b.n	8001ea4 <__ieee754_rem_pio2+0x164>
 8001f6e:	bf00      	nop
 8001f70:	54400000 	.word	0x54400000
 8001f74:	3ff921fb 	.word	0x3ff921fb
 8001f78:	1a626331 	.word	0x1a626331
 8001f7c:	3dd0b461 	.word	0x3dd0b461
 8001f80:	1a600000 	.word	0x1a600000
 8001f84:	3dd0b461 	.word	0x3dd0b461
 8001f88:	2e037073 	.word	0x2e037073
 8001f8c:	3ba3198a 	.word	0x3ba3198a
 8001f90:	6dc9c883 	.word	0x6dc9c883
 8001f94:	3fe45f30 	.word	0x3fe45f30
 8001f98:	2e000000 	.word	0x2e000000
 8001f9c:	3ba3198a 	.word	0x3ba3198a
 8001fa0:	252049c1 	.word	0x252049c1
 8001fa4:	397b839a 	.word	0x397b839a
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	41700000 	.word	0x41700000
 8001fb0:	3fe921fb 	.word	0x3fe921fb
 8001fb4:	4002d97b 	.word	0x4002d97b
 8001fb8:	413921fb 	.word	0x413921fb
 8001fbc:	080026e8 	.word	0x080026e8
 8001fc0:	7fefffff 	.word	0x7fefffff
 8001fc4:	08002768 	.word	0x08002768

08001fc8 <fabs>:
 8001fc8:	ec51 0b10 	vmov	r0, r1, d0
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8001fd2:	ec43 2b10 	vmov	d0, r2, r3
 8001fd6:	4770      	bx	lr

08001fd8 <__kernel_rem_pio2>:
 8001fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fdc:	ed2d 8b06 	vpush	{d8-d10}
 8001fe0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8001fe4:	469b      	mov	fp, r3
 8001fe6:	9001      	str	r0, [sp, #4]
 8001fe8:	4bbb      	ldr	r3, [pc, #748]	@ (80022d8 <__kernel_rem_pio2+0x300>)
 8001fea:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8001fec:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8001ff0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8001ff4:	f112 0f14 	cmn.w	r2, #20
 8001ff8:	bfa8      	it	ge
 8001ffa:	1ed3      	subge	r3, r2, #3
 8001ffc:	f10b 3aff 	add.w	sl, fp, #4294967295
 8002000:	bfb8      	it	lt
 8002002:	2300      	movlt	r3, #0
 8002004:	f06f 0517 	mvn.w	r5, #23
 8002008:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80022c0 <__kernel_rem_pio2+0x2e8>
 800200c:	bfa4      	itt	ge
 800200e:	2018      	movge	r0, #24
 8002010:	fb93 f3f0 	sdivge	r3, r3, r0
 8002014:	fb03 5505 	mla	r5, r3, r5, r5
 8002018:	eba3 040a 	sub.w	r4, r3, sl
 800201c:	4415      	add	r5, r2
 800201e:	460f      	mov	r7, r1
 8002020:	eb09 060a 	add.w	r6, r9, sl
 8002024:	a81a      	add	r0, sp, #104	@ 0x68
 8002026:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800202a:	2200      	movs	r2, #0
 800202c:	42b2      	cmp	r2, r6
 800202e:	dd0e      	ble.n	800204e <__kernel_rem_pio2+0x76>
 8002030:	aa1a      	add	r2, sp, #104	@ 0x68
 8002032:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8002036:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800203a:	2600      	movs	r6, #0
 800203c:	454e      	cmp	r6, r9
 800203e:	dc25      	bgt.n	800208c <__kernel_rem_pio2+0xb4>
 8002040:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80022c0 <__kernel_rem_pio2+0x2e8>
 8002044:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002048:	4614      	mov	r4, r2
 800204a:	2000      	movs	r0, #0
 800204c:	e015      	b.n	800207a <__kernel_rem_pio2+0xa2>
 800204e:	42d4      	cmn	r4, r2
 8002050:	d409      	bmi.n	8002066 <__kernel_rem_pio2+0x8e>
 8002052:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8002056:	ee07 1a90 	vmov	s15, r1
 800205a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800205e:	eca0 7b02 	vstmia	r0!, {d7}
 8002062:	3201      	adds	r2, #1
 8002064:	e7e2      	b.n	800202c <__kernel_rem_pio2+0x54>
 8002066:	eeb0 7b46 	vmov.f64	d7, d6
 800206a:	e7f8      	b.n	800205e <__kernel_rem_pio2+0x86>
 800206c:	ecbc 5b02 	vldmia	ip!, {d5}
 8002070:	ed94 6b00 	vldr	d6, [r4]
 8002074:	3001      	adds	r0, #1
 8002076:	eea5 7b06 	vfma.f64	d7, d5, d6
 800207a:	4550      	cmp	r0, sl
 800207c:	f1a4 0408 	sub.w	r4, r4, #8
 8002080:	ddf4      	ble.n	800206c <__kernel_rem_pio2+0x94>
 8002082:	ecae 7b02 	vstmia	lr!, {d7}
 8002086:	3601      	adds	r6, #1
 8002088:	3208      	adds	r2, #8
 800208a:	e7d7      	b.n	800203c <__kernel_rem_pio2+0x64>
 800208c:	aa06      	add	r2, sp, #24
 800208e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80022c8 <__kernel_rem_pio2+0x2f0>
 8002092:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80022d0 <__kernel_rem_pio2+0x2f8>
 8002096:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800209a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800209e:	9203      	str	r2, [sp, #12]
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	464c      	mov	r4, r9
 80020a4:	00e3      	lsls	r3, r4, #3
 80020a6:	9304      	str	r3, [sp, #16]
 80020a8:	ab92      	add	r3, sp, #584	@ 0x248
 80020aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80020ae:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80020b2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80020b4:	ab06      	add	r3, sp, #24
 80020b6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80020ba:	461e      	mov	r6, r3
 80020bc:	4620      	mov	r0, r4
 80020be:	2800      	cmp	r0, #0
 80020c0:	f1a2 0208 	sub.w	r2, r2, #8
 80020c4:	dc4a      	bgt.n	800215c <__kernel_rem_pio2+0x184>
 80020c6:	4628      	mov	r0, r5
 80020c8:	9305      	str	r3, [sp, #20]
 80020ca:	f000 fa01 	bl	80024d0 <scalbn>
 80020ce:	eeb0 8b40 	vmov.f64	d8, d0
 80020d2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80020d6:	ee28 0b00 	vmul.f64	d0, d8, d0
 80020da:	f000 fa79 	bl	80025d0 <floor>
 80020de:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80020e2:	eea0 8b47 	vfms.f64	d8, d0, d7
 80020e6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80020ea:	2d00      	cmp	r5, #0
 80020ec:	ee17 8a90 	vmov	r8, s15
 80020f0:	9b05      	ldr	r3, [sp, #20]
 80020f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80020fa:	dd41      	ble.n	8002180 <__kernel_rem_pio2+0x1a8>
 80020fc:	1e60      	subs	r0, r4, #1
 80020fe:	aa06      	add	r2, sp, #24
 8002100:	f1c5 0c18 	rsb	ip, r5, #24
 8002104:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8002108:	fa46 f20c 	asr.w	r2, r6, ip
 800210c:	4490      	add	r8, r2
 800210e:	fa02 f20c 	lsl.w	r2, r2, ip
 8002112:	1ab6      	subs	r6, r6, r2
 8002114:	aa06      	add	r2, sp, #24
 8002116:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800211a:	f1c5 0217 	rsb	r2, r5, #23
 800211e:	4116      	asrs	r6, r2
 8002120:	2e00      	cmp	r6, #0
 8002122:	dd3c      	ble.n	800219e <__kernel_rem_pio2+0x1c6>
 8002124:	f04f 0c00 	mov.w	ip, #0
 8002128:	f108 0801 	add.w	r8, r8, #1
 800212c:	4660      	mov	r0, ip
 800212e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8002132:	4564      	cmp	r4, ip
 8002134:	dc66      	bgt.n	8002204 <__kernel_rem_pio2+0x22c>
 8002136:	2d00      	cmp	r5, #0
 8002138:	dd03      	ble.n	8002142 <__kernel_rem_pio2+0x16a>
 800213a:	2d01      	cmp	r5, #1
 800213c:	d072      	beq.n	8002224 <__kernel_rem_pio2+0x24c>
 800213e:	2d02      	cmp	r5, #2
 8002140:	d07a      	beq.n	8002238 <__kernel_rem_pio2+0x260>
 8002142:	2e02      	cmp	r6, #2
 8002144:	d12b      	bne.n	800219e <__kernel_rem_pio2+0x1c6>
 8002146:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800214a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800214e:	b330      	cbz	r0, 800219e <__kernel_rem_pio2+0x1c6>
 8002150:	4628      	mov	r0, r5
 8002152:	f000 f9bd 	bl	80024d0 <scalbn>
 8002156:	ee38 8b40 	vsub.f64	d8, d8, d0
 800215a:	e020      	b.n	800219e <__kernel_rem_pio2+0x1c6>
 800215c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8002160:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002164:	3801      	subs	r0, #1
 8002166:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800216a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800216e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8002172:	eca6 0a01 	vstmia	r6!, {s0}
 8002176:	ed92 0b00 	vldr	d0, [r2]
 800217a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800217e:	e79e      	b.n	80020be <__kernel_rem_pio2+0xe6>
 8002180:	d105      	bne.n	800218e <__kernel_rem_pio2+0x1b6>
 8002182:	1e62      	subs	r2, r4, #1
 8002184:	a906      	add	r1, sp, #24
 8002186:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800218a:	15f6      	asrs	r6, r6, #23
 800218c:	e7c8      	b.n	8002120 <__kernel_rem_pio2+0x148>
 800218e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8002192:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	da31      	bge.n	8002200 <__kernel_rem_pio2+0x228>
 800219c:	2600      	movs	r6, #0
 800219e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	f040 809b 	bne.w	80022e0 <__kernel_rem_pio2+0x308>
 80021aa:	1e62      	subs	r2, r4, #1
 80021ac:	2000      	movs	r0, #0
 80021ae:	454a      	cmp	r2, r9
 80021b0:	da49      	bge.n	8002246 <__kernel_rem_pio2+0x26e>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d062      	beq.n	800227c <__kernel_rem_pio2+0x2a4>
 80021b6:	3c01      	subs	r4, #1
 80021b8:	ab06      	add	r3, sp, #24
 80021ba:	3d18      	subs	r5, #24
 80021bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f8      	beq.n	80021b6 <__kernel_rem_pio2+0x1de>
 80021c4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80021c8:	4628      	mov	r0, r5
 80021ca:	f000 f981 	bl	80024d0 <scalbn>
 80021ce:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80022c8 <__kernel_rem_pio2+0x2f0>
 80021d2:	1c62      	adds	r2, r4, #1
 80021d4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80021d6:	00d3      	lsls	r3, r2, #3
 80021d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80021dc:	4622      	mov	r2, r4
 80021de:	2a00      	cmp	r2, #0
 80021e0:	f280 80a8 	bge.w	8002334 <__kernel_rem_pio2+0x35c>
 80021e4:	4622      	mov	r2, r4
 80021e6:	2a00      	cmp	r2, #0
 80021e8:	f2c0 80c6 	blt.w	8002378 <__kernel_rem_pio2+0x3a0>
 80021ec:	a96a      	add	r1, sp, #424	@ 0x1a8
 80021ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80021f2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80022c0 <__kernel_rem_pio2+0x2e8>
 80021f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80022dc <__kernel_rem_pio2+0x304>
 80021fa:	2000      	movs	r0, #0
 80021fc:	1aa1      	subs	r1, r4, r2
 80021fe:	e0b0      	b.n	8002362 <__kernel_rem_pio2+0x38a>
 8002200:	2602      	movs	r6, #2
 8002202:	e78f      	b.n	8002124 <__kernel_rem_pio2+0x14c>
 8002204:	f853 2b04 	ldr.w	r2, [r3], #4
 8002208:	b948      	cbnz	r0, 800221e <__kernel_rem_pio2+0x246>
 800220a:	b122      	cbz	r2, 8002216 <__kernel_rem_pio2+0x23e>
 800220c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8002210:	f843 2c04 	str.w	r2, [r3, #-4]
 8002214:	2201      	movs	r2, #1
 8002216:	f10c 0c01 	add.w	ip, ip, #1
 800221a:	4610      	mov	r0, r2
 800221c:	e789      	b.n	8002132 <__kernel_rem_pio2+0x15a>
 800221e:	ebae 0202 	sub.w	r2, lr, r2
 8002222:	e7f5      	b.n	8002210 <__kernel_rem_pio2+0x238>
 8002224:	1e62      	subs	r2, r4, #1
 8002226:	ab06      	add	r3, sp, #24
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002230:	a906      	add	r1, sp, #24
 8002232:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002236:	e784      	b.n	8002142 <__kernel_rem_pio2+0x16a>
 8002238:	1e62      	subs	r2, r4, #1
 800223a:	ab06      	add	r3, sp, #24
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002244:	e7f4      	b.n	8002230 <__kernel_rem_pio2+0x258>
 8002246:	ab06      	add	r3, sp, #24
 8002248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224c:	3a01      	subs	r2, #1
 800224e:	4318      	orrs	r0, r3
 8002250:	e7ad      	b.n	80021ae <__kernel_rem_pio2+0x1d6>
 8002252:	3301      	adds	r3, #1
 8002254:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8002258:	2800      	cmp	r0, #0
 800225a:	d0fa      	beq.n	8002252 <__kernel_rem_pio2+0x27a>
 800225c:	9a04      	ldr	r2, [sp, #16]
 800225e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8002262:	446a      	add	r2, sp
 8002264:	eb04 000b 	add.w	r0, r4, fp
 8002268:	a91a      	add	r1, sp, #104	@ 0x68
 800226a:	1c66      	adds	r6, r4, #1
 800226c:	3a98      	subs	r2, #152	@ 0x98
 800226e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8002272:	4423      	add	r3, r4
 8002274:	42b3      	cmp	r3, r6
 8002276:	da04      	bge.n	8002282 <__kernel_rem_pio2+0x2aa>
 8002278:	461c      	mov	r4, r3
 800227a:	e713      	b.n	80020a4 <__kernel_rem_pio2+0xcc>
 800227c:	9a03      	ldr	r2, [sp, #12]
 800227e:	2301      	movs	r3, #1
 8002280:	e7e8      	b.n	8002254 <__kernel_rem_pio2+0x27c>
 8002282:	9902      	ldr	r1, [sp, #8]
 8002284:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002288:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800228c:	9104      	str	r1, [sp, #16]
 800228e:	ee07 1a90 	vmov	s15, r1
 8002292:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002296:	2400      	movs	r4, #0
 8002298:	eca0 7b02 	vstmia	r0!, {d7}
 800229c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80022c0 <__kernel_rem_pio2+0x2e8>
 80022a0:	4686      	mov	lr, r0
 80022a2:	4554      	cmp	r4, sl
 80022a4:	dd03      	ble.n	80022ae <__kernel_rem_pio2+0x2d6>
 80022a6:	eca2 7b02 	vstmia	r2!, {d7}
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7e2      	b.n	8002274 <__kernel_rem_pio2+0x29c>
 80022ae:	ecbc 5b02 	vldmia	ip!, {d5}
 80022b2:	ed3e 6b02 	vldmdb	lr!, {d6}
 80022b6:	3401      	adds	r4, #1
 80022b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80022bc:	e7f1      	b.n	80022a2 <__kernel_rem_pio2+0x2ca>
 80022be:	bf00      	nop
	...
 80022cc:	3e700000 	.word	0x3e700000
 80022d0:	00000000 	.word	0x00000000
 80022d4:	41700000 	.word	0x41700000
 80022d8:	080028b0 	.word	0x080028b0
 80022dc:	08002870 	.word	0x08002870
 80022e0:	4268      	negs	r0, r5
 80022e2:	eeb0 0b48 	vmov.f64	d0, d8
 80022e6:	f000 f8f3 	bl	80024d0 <scalbn>
 80022ea:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80024b8 <__kernel_rem_pio2+0x4e0>
 80022ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	db17      	blt.n	8002328 <__kernel_rem_pio2+0x350>
 80022f8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80024c0 <__kernel_rem_pio2+0x4e8>
 80022fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8002300:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002304:	aa06      	add	r2, sp, #24
 8002306:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800230a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800230e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8002312:	3518      	adds	r5, #24
 8002314:	ee10 3a10 	vmov	r3, s0
 8002318:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800231c:	ee17 3a10 	vmov	r3, s14
 8002320:	3401      	adds	r4, #1
 8002322:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002326:	e74d      	b.n	80021c4 <__kernel_rem_pio2+0x1ec>
 8002328:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800232c:	aa06      	add	r2, sp, #24
 800232e:	ee10 3a10 	vmov	r3, s0
 8002332:	e7f6      	b.n	8002322 <__kernel_rem_pio2+0x34a>
 8002334:	a806      	add	r0, sp, #24
 8002336:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800233a:	9001      	str	r0, [sp, #4]
 800233c:	ee07 0a90 	vmov	s15, r0
 8002340:	3a01      	subs	r2, #1
 8002342:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002346:	ee27 7b00 	vmul.f64	d7, d7, d0
 800234a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800234e:	ed21 7b02 	vstmdb	r1!, {d7}
 8002352:	e744      	b.n	80021de <__kernel_rem_pio2+0x206>
 8002354:	ecbc 5b02 	vldmia	ip!, {d5}
 8002358:	ecb5 6b02 	vldmia	r5!, {d6}
 800235c:	3001      	adds	r0, #1
 800235e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002362:	4548      	cmp	r0, r9
 8002364:	dc01      	bgt.n	800236a <__kernel_rem_pio2+0x392>
 8002366:	4281      	cmp	r1, r0
 8002368:	daf4      	bge.n	8002354 <__kernel_rem_pio2+0x37c>
 800236a:	a842      	add	r0, sp, #264	@ 0x108
 800236c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002370:	ed81 7b00 	vstr	d7, [r1]
 8002374:	3a01      	subs	r2, #1
 8002376:	e736      	b.n	80021e6 <__kernel_rem_pio2+0x20e>
 8002378:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800237a:	2a02      	cmp	r2, #2
 800237c:	dc0a      	bgt.n	8002394 <__kernel_rem_pio2+0x3bc>
 800237e:	2a00      	cmp	r2, #0
 8002380:	dc2d      	bgt.n	80023de <__kernel_rem_pio2+0x406>
 8002382:	d046      	beq.n	8002412 <__kernel_rem_pio2+0x43a>
 8002384:	f008 0007 	and.w	r0, r8, #7
 8002388:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800238c:	ecbd 8b06 	vpop	{d8-d10}
 8002390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002394:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8002396:	2a03      	cmp	r2, #3
 8002398:	d1f4      	bne.n	8002384 <__kernel_rem_pio2+0x3ac>
 800239a:	a942      	add	r1, sp, #264	@ 0x108
 800239c:	f1a3 0208 	sub.w	r2, r3, #8
 80023a0:	440a      	add	r2, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	4620      	mov	r0, r4
 80023a6:	2800      	cmp	r0, #0
 80023a8:	f1a1 0108 	sub.w	r1, r1, #8
 80023ac:	dc52      	bgt.n	8002454 <__kernel_rem_pio2+0x47c>
 80023ae:	4621      	mov	r1, r4
 80023b0:	2901      	cmp	r1, #1
 80023b2:	f1a2 0208 	sub.w	r2, r2, #8
 80023b6:	dc5d      	bgt.n	8002474 <__kernel_rem_pio2+0x49c>
 80023b8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80024c8 <__kernel_rem_pio2+0x4f0>
 80023bc:	aa42      	add	r2, sp, #264	@ 0x108
 80023be:	4413      	add	r3, r2
 80023c0:	2c01      	cmp	r4, #1
 80023c2:	dc67      	bgt.n	8002494 <__kernel_rem_pio2+0x4bc>
 80023c4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80023c8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80023cc:	2e00      	cmp	r6, #0
 80023ce:	d167      	bne.n	80024a0 <__kernel_rem_pio2+0x4c8>
 80023d0:	ed87 5b00 	vstr	d5, [r7]
 80023d4:	ed87 6b02 	vstr	d6, [r7, #8]
 80023d8:	ed87 7b04 	vstr	d7, [r7, #16]
 80023dc:	e7d2      	b.n	8002384 <__kernel_rem_pio2+0x3ac>
 80023de:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80024c8 <__kernel_rem_pio2+0x4f0>
 80023e2:	aa42      	add	r2, sp, #264	@ 0x108
 80023e4:	4413      	add	r3, r2
 80023e6:	4622      	mov	r2, r4
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	da24      	bge.n	8002436 <__kernel_rem_pio2+0x45e>
 80023ec:	b34e      	cbz	r6, 8002442 <__kernel_rem_pio2+0x46a>
 80023ee:	eeb1 7b46 	vneg.f64	d7, d6
 80023f2:	ed87 7b00 	vstr	d7, [r7]
 80023f6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80023fa:	aa44      	add	r2, sp, #272	@ 0x110
 80023fc:	2301      	movs	r3, #1
 80023fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002402:	429c      	cmp	r4, r3
 8002404:	da20      	bge.n	8002448 <__kernel_rem_pio2+0x470>
 8002406:	b10e      	cbz	r6, 800240c <__kernel_rem_pio2+0x434>
 8002408:	eeb1 7b47 	vneg.f64	d7, d7
 800240c:	ed87 7b02 	vstr	d7, [r7, #8]
 8002410:	e7b8      	b.n	8002384 <__kernel_rem_pio2+0x3ac>
 8002412:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80024c8 <__kernel_rem_pio2+0x4f0>
 8002416:	aa42      	add	r2, sp, #264	@ 0x108
 8002418:	4413      	add	r3, r2
 800241a:	2c00      	cmp	r4, #0
 800241c:	da05      	bge.n	800242a <__kernel_rem_pio2+0x452>
 800241e:	b10e      	cbz	r6, 8002424 <__kernel_rem_pio2+0x44c>
 8002420:	eeb1 7b47 	vneg.f64	d7, d7
 8002424:	ed87 7b00 	vstr	d7, [r7]
 8002428:	e7ac      	b.n	8002384 <__kernel_rem_pio2+0x3ac>
 800242a:	ed33 6b02 	vldmdb	r3!, {d6}
 800242e:	3c01      	subs	r4, #1
 8002430:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002434:	e7f1      	b.n	800241a <__kernel_rem_pio2+0x442>
 8002436:	ed33 7b02 	vldmdb	r3!, {d7}
 800243a:	3a01      	subs	r2, #1
 800243c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002440:	e7d2      	b.n	80023e8 <__kernel_rem_pio2+0x410>
 8002442:	eeb0 7b46 	vmov.f64	d7, d6
 8002446:	e7d4      	b.n	80023f2 <__kernel_rem_pio2+0x41a>
 8002448:	ecb2 6b02 	vldmia	r2!, {d6}
 800244c:	3301      	adds	r3, #1
 800244e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002452:	e7d6      	b.n	8002402 <__kernel_rem_pio2+0x42a>
 8002454:	ed91 7b00 	vldr	d7, [r1]
 8002458:	ed91 5b02 	vldr	d5, [r1, #8]
 800245c:	3801      	subs	r0, #1
 800245e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8002462:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002466:	ed81 6b00 	vstr	d6, [r1]
 800246a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800246e:	ed81 7b02 	vstr	d7, [r1, #8]
 8002472:	e798      	b.n	80023a6 <__kernel_rem_pio2+0x3ce>
 8002474:	ed92 7b00 	vldr	d7, [r2]
 8002478:	ed92 5b02 	vldr	d5, [r2, #8]
 800247c:	3901      	subs	r1, #1
 800247e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8002482:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002486:	ed82 6b00 	vstr	d6, [r2]
 800248a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800248e:	ed82 7b02 	vstr	d7, [r2, #8]
 8002492:	e78d      	b.n	80023b0 <__kernel_rem_pio2+0x3d8>
 8002494:	ed33 6b02 	vldmdb	r3!, {d6}
 8002498:	3c01      	subs	r4, #1
 800249a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800249e:	e78f      	b.n	80023c0 <__kernel_rem_pio2+0x3e8>
 80024a0:	eeb1 5b45 	vneg.f64	d5, d5
 80024a4:	eeb1 6b46 	vneg.f64	d6, d6
 80024a8:	ed87 5b00 	vstr	d5, [r7]
 80024ac:	eeb1 7b47 	vneg.f64	d7, d7
 80024b0:	ed87 6b02 	vstr	d6, [r7, #8]
 80024b4:	e790      	b.n	80023d8 <__kernel_rem_pio2+0x400>
 80024b6:	bf00      	nop
 80024b8:	00000000 	.word	0x00000000
 80024bc:	41700000 	.word	0x41700000
 80024c0:	00000000 	.word	0x00000000
 80024c4:	3e700000 	.word	0x3e700000
	...

080024d0 <scalbn>:
 80024d0:	ee10 1a90 	vmov	r1, s1
 80024d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80024d8:	b98b      	cbnz	r3, 80024fe <scalbn+0x2e>
 80024da:	ee10 3a10 	vmov	r3, s0
 80024de:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80024e2:	4319      	orrs	r1, r3
 80024e4:	d00a      	beq.n	80024fc <scalbn+0x2c>
 80024e6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8002598 <scalbn+0xc8>
 80024ea:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <scalbn+0xf8>)
 80024ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 80024f0:	4298      	cmp	r0, r3
 80024f2:	da0b      	bge.n	800250c <scalbn+0x3c>
 80024f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80025a0 <scalbn+0xd0>
 80024f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80024fc:	4770      	bx	lr
 80024fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002502:	4293      	cmp	r3, r2
 8002504:	d107      	bne.n	8002516 <scalbn+0x46>
 8002506:	ee30 0b00 	vadd.f64	d0, d0, d0
 800250a:	4770      	bx	lr
 800250c:	ee10 1a90 	vmov	r1, s1
 8002510:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002514:	3b36      	subs	r3, #54	@ 0x36
 8002516:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800251a:	4290      	cmp	r0, r2
 800251c:	dd0d      	ble.n	800253a <scalbn+0x6a>
 800251e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80025a8 <scalbn+0xd8>
 8002522:	ee10 3a90 	vmov	r3, s1
 8002526:	eeb0 6b47 	vmov.f64	d6, d7
 800252a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80025b0 <scalbn+0xe0>
 800252e:	2b00      	cmp	r3, #0
 8002530:	fe27 7b05 	vselge.f64	d7, d7, d5
 8002534:	ee27 0b06 	vmul.f64	d0, d7, d6
 8002538:	4770      	bx	lr
 800253a:	4418      	add	r0, r3
 800253c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8002540:	4298      	cmp	r0, r3
 8002542:	dcec      	bgt.n	800251e <scalbn+0x4e>
 8002544:	2800      	cmp	r0, #0
 8002546:	dd0a      	ble.n	800255e <scalbn+0x8e>
 8002548:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800254c:	ec53 2b10 	vmov	r2, r3, d0
 8002550:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8002554:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8002558:	ec43 2b10 	vmov	d0, r2, r3
 800255c:	4770      	bx	lr
 800255e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8002562:	da09      	bge.n	8002578 <scalbn+0xa8>
 8002564:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80025a0 <scalbn+0xd0>
 8002568:	ee10 3a90 	vmov	r3, s1
 800256c:	eeb0 6b47 	vmov.f64	d6, d7
 8002570:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80025b8 <scalbn+0xe8>
 8002574:	2b00      	cmp	r3, #0
 8002576:	e7db      	b.n	8002530 <scalbn+0x60>
 8002578:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800257c:	ec53 2b10 	vmov	r2, r3, d0
 8002580:	3036      	adds	r0, #54	@ 0x36
 8002582:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8002586:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800258a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80025c0 <scalbn+0xf0>
 800258e:	ec43 2b10 	vmov	d0, r2, r3
 8002592:	e7b1      	b.n	80024f8 <scalbn+0x28>
 8002594:	f3af 8000 	nop.w
 8002598:	00000000 	.word	0x00000000
 800259c:	43500000 	.word	0x43500000
 80025a0:	c2f8f359 	.word	0xc2f8f359
 80025a4:	01a56e1f 	.word	0x01a56e1f
 80025a8:	8800759c 	.word	0x8800759c
 80025ac:	7e37e43c 	.word	0x7e37e43c
 80025b0:	8800759c 	.word	0x8800759c
 80025b4:	fe37e43c 	.word	0xfe37e43c
 80025b8:	c2f8f359 	.word	0xc2f8f359
 80025bc:	81a56e1f 	.word	0x81a56e1f
 80025c0:	00000000 	.word	0x00000000
 80025c4:	3c900000 	.word	0x3c900000
 80025c8:	ffff3cb0 	.word	0xffff3cb0
 80025cc:	00000000 	.word	0x00000000

080025d0 <floor>:
 80025d0:	ee10 3a90 	vmov	r3, s1
 80025d4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80025d8:	ee10 2a10 	vmov	r2, s0
 80025dc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80025e0:	2913      	cmp	r1, #19
 80025e2:	b530      	push	{r4, r5, lr}
 80025e4:	4615      	mov	r5, r2
 80025e6:	dc33      	bgt.n	8002650 <floor+0x80>
 80025e8:	2900      	cmp	r1, #0
 80025ea:	da18      	bge.n	800261e <floor+0x4e>
 80025ec:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80026b0 <floor+0xe0>
 80025f0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80025f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dd0a      	ble.n	8002614 <floor+0x44>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da50      	bge.n	80026a4 <floor+0xd4>
 8002602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002606:	4313      	orrs	r3, r2
 8002608:	2200      	movs	r2, #0
 800260a:	4293      	cmp	r3, r2
 800260c:	4b2a      	ldr	r3, [pc, #168]	@ (80026b8 <floor+0xe8>)
 800260e:	bf08      	it	eq
 8002610:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	ec41 0b10 	vmov	d0, r0, r1
 800261c:	e01f      	b.n	800265e <floor+0x8e>
 800261e:	4827      	ldr	r0, [pc, #156]	@ (80026bc <floor+0xec>)
 8002620:	4108      	asrs	r0, r1
 8002622:	ea03 0400 	and.w	r4, r3, r0
 8002626:	4314      	orrs	r4, r2
 8002628:	d019      	beq.n	800265e <floor+0x8e>
 800262a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80026b0 <floor+0xe0>
 800262e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8002632:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263a:	ddeb      	ble.n	8002614 <floor+0x44>
 800263c:	2b00      	cmp	r3, #0
 800263e:	bfbe      	ittt	lt
 8002640:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8002644:	410a      	asrlt	r2, r1
 8002646:	189b      	addlt	r3, r3, r2
 8002648:	ea23 0300 	bic.w	r3, r3, r0
 800264c:	2200      	movs	r2, #0
 800264e:	e7e1      	b.n	8002614 <floor+0x44>
 8002650:	2933      	cmp	r1, #51	@ 0x33
 8002652:	dd05      	ble.n	8002660 <floor+0x90>
 8002654:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8002658:	d101      	bne.n	800265e <floor+0x8e>
 800265a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800265e:	bd30      	pop	{r4, r5, pc}
 8002660:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	40e0      	lsrs	r0, r4
 800266a:	4210      	tst	r0, r2
 800266c:	d0f7      	beq.n	800265e <floor+0x8e>
 800266e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80026b0 <floor+0xe0>
 8002672:	ee30 0b07 	vadd.f64	d0, d0, d7
 8002676:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	ddc9      	ble.n	8002614 <floor+0x44>
 8002680:	2b00      	cmp	r3, #0
 8002682:	da02      	bge.n	800268a <floor+0xba>
 8002684:	2914      	cmp	r1, #20
 8002686:	d103      	bne.n	8002690 <floor+0xc0>
 8002688:	3301      	adds	r3, #1
 800268a:	ea22 0200 	bic.w	r2, r2, r0
 800268e:	e7c1      	b.n	8002614 <floor+0x44>
 8002690:	2401      	movs	r4, #1
 8002692:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8002696:	fa04 f101 	lsl.w	r1, r4, r1
 800269a:	440a      	add	r2, r1
 800269c:	42aa      	cmp	r2, r5
 800269e:	bf38      	it	cc
 80026a0:	191b      	addcc	r3, r3, r4
 80026a2:	e7f2      	b.n	800268a <floor+0xba>
 80026a4:	2200      	movs	r2, #0
 80026a6:	4613      	mov	r3, r2
 80026a8:	e7b4      	b.n	8002614 <floor+0x44>
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	8800759c 	.word	0x8800759c
 80026b4:	7e37e43c 	.word	0x7e37e43c
 80026b8:	bff00000 	.word	0xbff00000
 80026bc:	000fffff 	.word	0x000fffff

080026c0 <_init>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr

080026cc <_fini>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	bf00      	nop
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr
