
AudioSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007918  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007b18  08007b18  00008b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c48  08007c48  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007c48  08007c48  00008c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c50  08007c50  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c50  08007c50  00008c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c54  08007c54  00008c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007c58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004268  20000060  08007cb8  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042c8  08007cb8  000092c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133a0  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de1  00000000  00000000  0001c42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c70  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fb5  00000000  00000000  00020e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e26  00000000  00000000  00049e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc47e  00000000  00000000  0005ec73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b0f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004710  00000000  00000000  0015b134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015f844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08007b00 	.word	0x08007b00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08007b00 	.word	0x08007b00

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <vApplicationGetIdleTaskMemory+0x2c>)
 80005f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <vApplicationGetIdleTaskMemory+0x30>)
 80005f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2280      	movs	r2, #128	@ 0x80
 80005fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	2000007c 	.word	0x2000007c
 8000610:	200000d0 	.word	0x200000d0

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b09c      	sub	sp, #112	@ 0x70
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800061a:	f000 fab1 	bl	8000b80 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fd14 	bl	800104a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f893 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f9b3 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 800062a:	f000 f993 	bl	8000954 <MX_DMA_Init>
  MX_DAC_Init();
 800062e:	f000 f8f7 	bl	8000820 <MX_DAC_Init>
  MX_I2C2_Init();
 8000632:	f000 f91f 	bl	8000874 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000636:	f000 f95d 	bl	80008f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  get_sineval();
//  HAL_TIM_Base_Start(&htim6);
//  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, &sine_val, MAX_SAMPLES, DAC_ALIGN_12B_R);
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 800063a:	2100      	movs	r1, #0
 800063c:	483a      	ldr	r0, [pc, #232]	@ (8000728 <main+0x114>)
 800063e:	f000 ff0d 	bl	800145c <HAL_DAC_Start>
  for (uint8_t addr = 0; addr < 128; addr++) {
 8000642:	2300      	movs	r3, #0
 8000644:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000648:	e026      	b.n	8000698 <main+0x84>
      if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 800064a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800064e:	b29b      	uxth	r3, r3
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	b299      	uxth	r1, r3
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2201      	movs	r2, #1
 800065a:	4834      	ldr	r0, [pc, #208]	@ (800072c <main+0x118>)
 800065c:	f001 ffc8 	bl	80025f0 <HAL_I2C_IsDeviceReady>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d113      	bne.n	800068e <main+0x7a>
          char msg[30];
          sprintf(msg, "Device found at 0x%02X\r\n", addr);
 8000666:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800066a:	463b      	mov	r3, r7
 800066c:	4930      	ldr	r1, [pc, #192]	@ (8000730 <main+0x11c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fda6 	bl	80071c0 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000674:	463b      	mov	r3, r7
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fde2 	bl	8000240 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	4639      	mov	r1, r7
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	482b      	ldr	r0, [pc, #172]	@ (8000734 <main+0x120>)
 8000688:	f004 fada 	bl	8004c40 <HAL_UART_Transmit>
          break;
 800068c:	e008      	b.n	80006a0 <main+0x8c>
  for (uint8_t addr = 0; addr < 128; addr++) {
 800068e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000692:	3301      	adds	r3, #1
 8000694:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000698:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800069c:	2b00      	cmp	r3, #0
 800069e:	dad4      	bge.n	800064a <main+0x36>
      }
  }

  char start_msg[] = "Listening for audio\r\n";
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <main+0x124>)
 80006a2:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006b0:	6020      	str	r0, [r4, #0]
 80006b2:	3404      	adds	r4, #4
 80006b4:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)start_msg, strlen(start_msg), HAL_MAX_DELAY);
 80006b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdc0 	bl	8000240 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	4819      	ldr	r0, [pc, #100]	@ (8000734 <main+0x120>)
 80006ce:	f004 fab7 	bl	8004c40 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of decibelMeterTas */
  osThreadDef(decibelMeterTas, decibelMeterHook, osPriorityHigh, 0, 128);
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <main+0x128>)
 80006d4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80006d8:	461d      	mov	r5, r3
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  decibelMeterTasHandle = osThreadCreate(osThread(decibelMeterTas), NULL);
 80006e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 fb21 	bl	8005d34 <osThreadCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <main+0x12c>)
 80006f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of semaphoreTask */
  osThreadDef(semaphoreTask, semaphoreHook, osPriorityHigh, 0, 128);
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <main+0x130>)
 80006fa:	f107 0420 	add.w	r4, r7, #32
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  semaphoreTaskHandle = osThreadCreate(osThread(semaphoreTask), NULL);
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 fb0e 	bl	8005d34 <osThreadCreate>
 8000718:	4603      	mov	r3, r0
 800071a:	4a0b      	ldr	r2, [pc, #44]	@ (8000748 <main+0x134>)
 800071c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800071e:	f005 fb02 	bl	8005d26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000722:	bf00      	nop
 8000724:	e7fd      	b.n	8000722 <main+0x10e>
 8000726:	bf00      	nop
 8000728:	200002d0 	.word	0x200002d0
 800072c:	20000344 	.word	0x20000344
 8000730:	08007b18 	.word	0x08007b18
 8000734:	20000398 	.word	0x20000398
 8000738:	08007b34 	.word	0x08007b34
 800073c:	08007b5c 	.word	0x08007b5c
 8000740:	20000420 	.word	0x20000420
 8000744:	08007b88 	.word	0x08007b88
 8000748:	20000424 	.word	0x20000424

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2234      	movs	r2, #52	@ 0x34
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fd50 	bl	8007200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000774:	4a28      	ldr	r2, [pc, #160]	@ (8000818 <SystemClock_Config+0xcc>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	@ 0x40
 800077c:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000790:	4a22      	ldr	r2, [pc, #136]	@ (800081c <SystemClock_Config+0xd0>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2310      	movs	r3, #16
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007bc:	2360      	movs	r3, #96	@ 0x60
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80007c0:	2306      	movs	r3, #6
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 f92b 	bl	8003a2c <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f9fc 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2101      	movs	r1, #1
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fbc2 	bl	8003f88 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080a:	f000 f9e5 	bl	8000bd8 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	@ 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_DAC_Init+0x4c>)
 8000830:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <MX_DAC_Init+0x50>)
 8000832:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000834:	480d      	ldr	r0, [pc, #52]	@ (800086c <MX_DAC_Init+0x4c>)
 8000836:	f000 fdef 	bl	8001418 <HAL_DAC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000840:	f000 f9ca 	bl	8000bd8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <MX_DAC_Init+0x4c>)
 8000854:	f000 fe59 	bl	800150a <HAL_DAC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800085e:	f000 f9bb 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200002d0 	.word	0x200002d0
 8000870:	40007400 	.word	0x40007400

08000874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_I2C2_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <MX_I2C2_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_I2C2_Init+0x74>)
 8000880:	4a1b      	ldr	r2, [pc, #108]	@ (80008f0 <MX_I2C2_Init+0x7c>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088a:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_I2C2_Init+0x74>)
 800088c:	2201      	movs	r2, #1
 800088e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_I2C2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <MX_I2C2_Init+0x74>)
 80008b0:	f001 fbd4 	bl	800205c <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ba:	f000 f98d 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <MX_I2C2_Init+0x74>)
 80008c2:	f003 f81b 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 f984 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_I2C2_Init+0x74>)
 80008d4:	f003 f85d 	bl	8003992 <HAL_I2CEx_ConfigDigitalFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 f97b 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000344 	.word	0x20000344
 80008ec:	40005800 	.word	0x40005800
 80008f0:	2000090e 	.word	0x2000090e

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART3_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART3_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART3_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000938:	f004 f934 	bl	8004ba4 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f949 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000398 	.word	0x20000398
 8000950:	40004800 	.word	0x40004800

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_DMA_Init+0x38>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <MX_DMA_Init+0x38>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_DMA_Init+0x38>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2010      	movs	r0, #16
 8000978:	f000 fc9f 	bl	80012ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800097c:	2010      	movs	r0, #16
 800097e:	f000 fcb8 	bl	80012f2 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0320 	and.w	r3, r3, #32
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_GPIO_Init+0x8c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_Pin|Yellow_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	21e0      	movs	r1, #224	@ 0xe0
 80009f2:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009f4:	f001 fb18 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Yellow_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Yellow_LED_Pin|Red_LED_Pin;
 80009f8:	23e0      	movs	r3, #224	@ 0xe0
 80009fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_GPIO_Init+0x90>)
 8000a10:	f001 f95e 	bl	8001cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <decibelMeterHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_decibelMeterHook */
void decibelMeterHook(void const * argument)
{
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b098      	sub	sp, #96	@ 0x60
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  TickType_t ticks = pdMS_TO_TICKS(400);
 8000a2c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a30:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(ticks);
 8000a32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a34:	f005 fc1e 	bl	8006274 <vTaskDelay>
	if (HAL_I2C_Mem_Write(&hi2c2, 0x91, 0x0A, I2C_MEMADD_SIZE_8BIT, 0x0A, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	230a      	movs	r3, #10
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	220a      	movs	r2, #10
 8000a4a:	2191      	movs	r1, #145	@ 0x91
 8000a4c:	4830      	ldr	r0, [pc, #192]	@ (8000b10 <decibelMeterHook+0xec>)
 8000a4e:	f001 fba1 	bl	8002194 <HAL_I2C_Mem_Write>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d019      	beq.n	8000a8c <decibelMeterHook+0x68>
	  char error_msg[] = "I2C Mem Write Error\r\n";
 8000a58:	4b2e      	ldr	r3, [pc, #184]	@ (8000b14 <decibelMeterHook+0xf0>)
 8000a5a:	f107 0420 	add.w	r4, r7, #32
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a68:	6020      	str	r0, [r4, #0]
 8000a6a:	3404      	adds	r4, #4
 8000a6c:	8021      	strh	r1, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fbe4 	bl	8000240 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	f107 0120 	add.w	r1, r7, #32
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	4824      	ldr	r0, [pc, #144]	@ (8000b18 <decibelMeterHook+0xf4>)
 8000a86:	f004 f8db 	bl	8004c40 <HAL_UART_Transmit>
	  continue;
 8000a8a:	e040      	b.n	8000b0e <decibelMeterHook+0xea>
	}

	if (HAL_I2C_Mem_Read(&hi2c2, 0x91, 0x0A, I2C_MEMADD_SIZE_8BIT, &decibels, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	2301      	movs	r3, #1
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <decibelMeterHook+0xf8>)
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	2191      	movs	r1, #145	@ 0x91
 8000aa0:	481b      	ldr	r0, [pc, #108]	@ (8000b10 <decibelMeterHook+0xec>)
 8000aa2:	f001 fc8b 	bl	80023bc <HAL_I2C_Mem_Read>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d019      	beq.n	8000ae0 <decibelMeterHook+0xbc>
	  char error_msg[] = "I2C Mem Read Error\r\n";
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <decibelMeterHook+0xfc>)
 8000aae:	f107 0408 	add.w	r4, r7, #8
 8000ab2:	461d      	mov	r5, r3
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000abc:	6020      	str	r0, [r4, #0]
 8000abe:	3404      	adds	r4, #4
 8000ac0:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fbba 	bl	8000240 <strlen>
 8000acc:	4603      	mov	r3, r0
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	f107 0108 	add.w	r1, r7, #8
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <decibelMeterHook+0xf4>)
 8000ada:	f004 f8b1 	bl	8004c40 <HAL_UART_Transmit>
	  continue;
 8000ade:	e016      	b.n	8000b0e <decibelMeterHook+0xea>
	}

	char msg[20];
	sprintf(msg, "Sound level: %d dB\r\n", decibels);
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <decibelMeterHook+0xf8>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aea:	490e      	ldr	r1, [pc, #56]	@ (8000b24 <decibelMeterHook+0x100>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f006 fb67 	bl	80071c0 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000af2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fba2 	bl	8000240 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <decibelMeterHook+0xf4>)
 8000b0a:	f004 f899 	bl	8004c40 <HAL_UART_Transmit>
  {
 8000b0e:	e790      	b.n	8000a32 <decibelMeterHook+0xe>
 8000b10:	20000344 	.word	0x20000344
 8000b14:	08007bbc 	.word	0x08007bbc
 8000b18:	20000398 	.word	0x20000398
 8000b1c:	20000428 	.word	0x20000428
 8000b20:	08007bd4 	.word	0x08007bd4
 8000b24:	08007ba4 	.word	0x08007ba4

08000b28 <semaphoreHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_semaphoreHook */
void semaphoreHook(void const * argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN semaphoreHook */
  TickType_t ticks = pdMS_TO_TICKS(1);
 8000b30:	2301      	movs	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin | Red_LED_Pin | Yellow_LED_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	21e0      	movs	r1, #224	@ 0xe0
 8000b38:	480f      	ldr	r0, [pc, #60]	@ (8000b78 <semaphoreHook+0x50>)
 8000b3a:	f001 fa75 	bl	8002028 <HAL_GPIO_WritePin>
	  if (decibels >= threshold_worst) {
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <semaphoreHook+0x54>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b59      	cmp	r3, #89	@ 0x59
 8000b44:	d905      	bls.n	8000b52 <semaphoreHook+0x2a>
		  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2180      	movs	r1, #128	@ 0x80
 8000b4a:	480b      	ldr	r0, [pc, #44]	@ (8000b78 <semaphoreHook+0x50>)
 8000b4c:	f001 fa6c 	bl	8002028 <HAL_GPIO_WritePin>
 8000b50:	e00e      	b.n	8000b70 <semaphoreHook+0x48>
	  } else if (decibels >= threshold_bad) {
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <semaphoreHook+0x54>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b4f      	cmp	r3, #79	@ 0x4f
 8000b58:	d905      	bls.n	8000b66 <semaphoreHook+0x3e>
		  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2140      	movs	r1, #64	@ 0x40
 8000b5e:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <semaphoreHook+0x50>)
 8000b60:	f001 fa62 	bl	8002028 <HAL_GPIO_WritePin>
 8000b64:	e004      	b.n	8000b70 <semaphoreHook+0x48>
	  } else {
		  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2120      	movs	r1, #32
 8000b6a:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <semaphoreHook+0x50>)
 8000b6c:	f001 fa5c 	bl	8002028 <HAL_GPIO_WritePin>
	  }


	  vTaskDelay(ticks);
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f005 fb7f 	bl	8006274 <vTaskDelay>
	  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin | Red_LED_Pin | Yellow_LED_Pin, GPIO_PIN_RESET);
 8000b76:	e7dd      	b.n	8000b34 <semaphoreHook+0xc>
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	20000428 	.word	0x20000428

08000b80 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b92:	f000 fbc9 	bl	8001328 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ba6:	2387      	movs	r3, #135	@ 0x87
 8000ba8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fbe7 	bl	8001398 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bca:	2004      	movs	r0, #4
 8000bcc:	f000 fbc4 	bl	8001358 <HAL_MPU_Enable>

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	f06f 0001 	mvn.w	r0, #1
 8000c22:	f000 fb4a 	bl	80012ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a2d      	ldr	r2, [pc, #180]	@ (8000d08 <HAL_DAC_MspInit+0xd4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d154      	bne.n	8000d00 <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c56:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <HAL_DAC_MspInit+0xd8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d0c <HAL_DAC_MspInit+0xd8>)
 8000c5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c62:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <HAL_DAC_MspInit+0xd8>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <HAL_DAC_MspInit+0xd8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a26      	ldr	r2, [pc, #152]	@ (8000d0c <HAL_DAC_MspInit+0xd8>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <HAL_DAC_MspInit+0xd8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c86:	2310      	movs	r3, #16
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	481d      	ldr	r0, [pc, #116]	@ (8000d10 <HAL_DAC_MspInit+0xdc>)
 8000c9a:	f001 f819 	bl	8001cd0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d18 <HAL_DAC_MspInit+0xe4>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000ca6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cae:	2240      	movs	r2, #64	@ 0x40
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cc6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000cd0:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cd6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000ce4:	480b      	ldr	r0, [pc, #44]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000ce6:	f000 fc69 	bl	80015bc <HAL_DMA_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000cf0:	f7ff ff72 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_DAC_MspInit+0xe0>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	@ 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40007400 	.word	0x40007400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	200002e4 	.word	0x200002e4
 8000d18:	40026088 	.word	0x40026088

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2290      	movs	r2, #144	@ 0x90
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 fa5f 	bl	8007200 <memset>
  if(hi2c->Instance==I2C2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <HAL_I2C_MspInit+0xd0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d14b      	bne.n	8000de4 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fafa 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d66:	f7ff ff37 	bl	8000bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <HAL_I2C_MspInit+0xd4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a20      	ldr	r2, [pc, #128]	@ (8000df0 <HAL_I2C_MspInit+0xd4>)
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <HAL_I2C_MspInit+0xd4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <HAL_I2C_MspInit+0xd8>)
 8000da8:	f000 ff92 	bl	8001cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <HAL_I2C_MspInit+0xd4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db0:	4a0f      	ldr	r2, [pc, #60]	@ (8000df0 <HAL_I2C_MspInit+0xd4>)
 8000db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db8:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <HAL_I2C_MspInit+0xd4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2105      	movs	r1, #5
 8000dc8:	2021      	movs	r0, #33	@ 0x21
 8000dca:	f000 fa76 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000dce:	2021      	movs	r0, #33	@ 0x21
 8000dd0:	f000 fa8f 	bl	80012f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2105      	movs	r1, #5
 8000dd8:	2022      	movs	r0, #34	@ 0x22
 8000dda:	f000 fa6e 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000dde:	2022      	movs	r0, #34	@ 0x22
 8000de0:	f000 fa87 	bl	80012f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000de4:	bf00      	nop
 8000de6:	37b8      	adds	r7, #184	@ 0xb8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005800 	.word	0x40005800
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40021400 	.word	0x40021400

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0ae      	sub	sp, #184	@ 0xb8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2290      	movs	r2, #144	@ 0x90
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 f9f1 	bl	8007200 <memset>
  if(huart->Instance==USART3)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a26      	ldr	r2, [pc, #152]	@ (8000ebc <HAL_UART_MspInit+0xc4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d144      	bne.n	8000eb2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 fa8c 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e42:	f7ff fec9 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_UART_MspInit+0xc8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e90:	2307      	movs	r3, #7
 8000e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <HAL_UART_MspInit+0xcc>)
 8000e9e:	f000 ff17 	bl	8001cd0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	2027      	movs	r0, #39	@ 0x27
 8000ea8:	f000 fa07 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eac:	2027      	movs	r0, #39	@ 0x27
 8000eae:	f000 fa20 	bl	80012f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000eb2:	bf00      	nop
 8000eb4:	37b8      	adds	r7, #184	@ 0xb8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020c00 	.word	0x40020c00

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 f8df 	bl	80010c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f06:	f005 fcf3 	bl	80068f0 <xTaskGetSchedulerState>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d001      	beq.n	8000f14 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f10:	f005 ff1a 	bl	8006d48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <DMA1_Stream5_IRQHandler+0x10>)
 8000f1e:	f000 fc8d 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200002e4 	.word	0x200002e4

08000f2c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <I2C2_EV_IRQHandler+0x10>)
 8000f32:	f001 fc49 	bl	80027c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000344 	.word	0x20000344

08000f40 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <I2C2_ER_IRQHandler+0x10>)
 8000f46:	f001 fc59 	bl	80027fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000344 	.word	0x20000344

08000f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <USART3_IRQHandler+0x10>)
 8000f5a:	f003 fefb 	bl	8004d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000398 	.word	0x20000398

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f006 f93a 	bl	8007210 <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <_sbrk+0x64>)
 8000fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20080000 	.word	0x20080000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	2000042c 	.word	0x2000042c
 8000fd0:	200042c8 	.word	0x200042c8

08000fd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001030 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffc:	f7ff ffea 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001026:	f006 f8f9 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102a:	f7ff faf3 	bl	8000614 <main>
  bx  lr    
 800102e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800103c:	08007c58 	.word	0x08007c58
  ldr r2, =_sbss
 8001040:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001044:	200042c8 	.word	0x200042c8

08001048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC_IRQHandler>

0800104a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f928 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001054:	200f      	movs	r0, #15
 8001056:	f000 f805 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105a:	f7ff fdc3 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f943 	bl	800130e <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f90b 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000430 	.word	0x20000430

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000430 	.word	0x20000430

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <__NVIC_SetPriorityGrouping+0x40>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	4313      	orrs	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <__NVIC_SetPriorityGrouping+0x40>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	05fa0000 	.word	0x05fa0000

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4907      	ldr	r1, [pc, #28]	@ (80011a0 <__NVIC_EnableIRQ+0x38>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	@ (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff29 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff3e 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff8e 	bl	80011f8 <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5d 	bl	80011a4 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff31 	bl	8001168 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800132c:	f3bf 8f5f 	dmb	sy
}
 8001330:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <HAL_MPU_Disable+0x28>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_MPU_Disable+0x28>)
 8001338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_MPU_Disable+0x2c>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00
 8001354:	e000ed90 	.word	0xe000ed90

08001358 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_MPU_Enable+0x38>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_MPU_Enable+0x3c>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_MPU_Enable+0x3c>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001374:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001376:	f3bf 8f4f 	dsb	sy
}
 800137a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800137c:	f3bf 8f6f 	isb	sy
}
 8001380:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed90 	.word	0xe000ed90
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	785a      	ldrb	r2, [r3, #1]
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_MPU_ConfigRegion+0x7c>)
 80013a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_MPU_ConfigRegion+0x7c>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4a19      	ldr	r2, [pc, #100]	@ (8001414 <HAL_MPU_ConfigRegion+0x7c>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013b4:	4a17      	ldr	r2, [pc, #92]	@ (8001414 <HAL_MPU_ConfigRegion+0x7c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7b1b      	ldrb	r3, [r3, #12]
 80013c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7adb      	ldrb	r3, [r3, #11]
 80013c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7a9b      	ldrb	r3, [r3, #10]
 80013ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7b5b      	ldrb	r3, [r3, #13]
 80013d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7b9b      	ldrb	r3, [r3, #14]
 80013de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7bdb      	ldrb	r3, [r3, #15]
 80013e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7a5b      	ldrb	r3, [r3, #9]
 80013ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7a1b      	ldrb	r3, [r3, #8]
 80013f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001400:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001402:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001404:	6113      	str	r3, [r2, #16]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed90 	.word	0xe000ed90

08001418 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e014      	b.n	8001454 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fbfa 	bl	8000c34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e046      	b.n	80014fe <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	795b      	ldrb	r3, [r3, #5]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_DAC_Start+0x20>
 8001478:	2302      	movs	r3, #2
 800147a:	e040      	b.n	80014fe <HAL_DAC_Start+0xa2>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2202      	movs	r2, #2
 8001486:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2201      	movs	r2, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80014b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80014b2:	d11d      	bne.n	80014f0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	e014      	b.n	80014f0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	213c      	movs	r1, #60	@ 0x3c
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	429a      	cmp	r2, r3
 80014de:	d107      	bne.n	80014f0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0202 	orr.w	r2, r2, #2
 80014ee:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800150a:	b480      	push	{r7}
 800150c:	b089      	sub	sp, #36	@ 0x24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_DAC_ConfigChannel+0x1c>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e042      	b.n	80015b0 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	795b      	ldrb	r3, [r3, #5]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_DAC_ConfigChannel+0x2c>
 8001532:	2302      	movs	r3, #2
 8001534:	e03c      	b.n	80015b0 <HAL_DAC_ConfigChannel+0xa6>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2202      	movs	r2, #2
 8001540:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6819      	ldr	r1, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	22c0      	movs	r2, #192	@ 0xc0
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43da      	mvns	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	400a      	ands	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3724      	adds	r7, #36	@ 0x24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff fd90 	bl	80010ec <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e099      	b.n	800170c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f8:	e00f      	b.n	800161a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015fa:	f7ff fd77 	bl	80010ec <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b05      	cmp	r3, #5
 8001606:	d908      	bls.n	800161a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2220      	movs	r2, #32
 800160c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e078      	b.n	800170c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e8      	bne.n	80015fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4b38      	ldr	r3, [pc, #224]	@ (8001714 <HAL_DMA_Init+0x158>)
 8001634:	4013      	ands	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4313      	orrs	r3, r2
 800166a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	2b04      	cmp	r3, #4
 8001672:	d107      	bne.n	8001684 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167c:	4313      	orrs	r3, r2
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f023 0307 	bic.w	r3, r3, #7
 800169a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d117      	bne.n	80016de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00e      	beq.n	80016de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fa89 	bl	8001bd8 <DMA_CheckFifoParam>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2240      	movs	r2, #64	@ 0x40
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016da:	2301      	movs	r3, #1
 80016dc:	e016      	b.n	800170c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fa40 	bl	8001b6c <DMA_CalcBaseAndBitshift>
 80016ec:	4603      	mov	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f4:	223f      	movs	r2, #63	@ 0x3f
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	e010803f 	.word	0xe010803f

08001718 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001726:	f7ff fce1 	bl	80010ec <HAL_GetTick>
 800172a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d008      	beq.n	800174a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e052      	b.n	80017f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0216 	bic.w	r2, r2, #22
 8001758:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001768:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <HAL_DMA_Abort+0x62>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0208 	bic.w	r2, r2, #8
 8001788:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179a:	e013      	b.n	80017c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800179c:	f7ff fca6 	bl	80010ec <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d90c      	bls.n	80017c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e015      	b.n	80017f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e4      	bne.n	800179c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	223f      	movs	r2, #63	@ 0x3f
 80017d8:	409a      	lsls	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2280      	movs	r2, #128	@ 0x80
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00c      	b.n	8001830 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2205      	movs	r2, #5
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001848:	4b8e      	ldr	r3, [pc, #568]	@ (8001a84 <HAL_DMA_IRQHandler+0x248>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a88 <HAL_DMA_IRQHandler+0x24c>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0a9b      	lsrs	r3, r3, #10
 8001854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001866:	2208      	movs	r2, #8
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01a      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0204 	bic.w	r2, r2, #4
 800188e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001894:	2208      	movs	r2, #8
 8001896:	409a      	lsls	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ac:	2201      	movs	r2, #1
 80018ae:	409a      	lsls	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d012      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ca:	2201      	movs	r2, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	2204      	movs	r2, #4
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001900:	2204      	movs	r2, #4
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	f043 0204 	orr.w	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	2210      	movs	r2, #16
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d043      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03c      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	2210      	movs	r2, #16
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d018      	beq.n	800197e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d108      	bne.n	800196c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d024      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
 800196a:	e01f      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01b      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
 800197c:	e016      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0208 	bic.w	r2, r2, #8
 800199a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b0:	2220      	movs	r2, #32
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 808f 	beq.w	8001adc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8087 	beq.w	8001adc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	2220      	movs	r2, #32
 80019d4:	409a      	lsls	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d136      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0216 	bic.w	r2, r2, #22
 80019f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <HAL_DMA_IRQHandler+0x1da>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	223f      	movs	r2, #63	@ 0x3f
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d07e      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
        }
        return;
 8001a52:	e079      	b.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01d      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d031      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4798      	blx	r3
 8001a80:	e02c      	b.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000
 8001a88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e01e      	b.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0210 	bic.w	r2, r2, #16
 8001aba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d032      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2205      	movs	r2, #5
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d307      	bcc.n	8001b24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f2      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x2cc>
 8001b22:	e000      	b.n	8001b26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
 8001b46:	e000      	b.n	8001b4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b48:	bf00      	nop
    }
  }
}
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b5e:	b2db      	uxtb	r3, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3b10      	subs	r3, #16
 8001b7c:	4a13      	ldr	r2, [pc, #76]	@ (8001bcc <DMA_CalcBaseAndBitshift+0x60>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b86:	4a12      	ldr	r2, [pc, #72]	@ (8001bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d908      	bls.n	8001bac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	1d1a      	adds	r2, r3, #4
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001baa:	e006      	b.n	8001bba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	aaaaaaab 	.word	0xaaaaaaab
 8001bd0:	08007c0c 	.word	0x08007c0c
 8001bd4:	fffffc00 	.word	0xfffffc00

08001bd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d11f      	bne.n	8001c32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d856      	bhi.n	8001ca6 <DMA_CheckFifoParam+0xce>
 8001bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001c00 <DMA_CheckFifoParam+0x28>)
 8001bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfe:	bf00      	nop
 8001c00:	08001c11 	.word	0x08001c11
 8001c04:	08001c23 	.word	0x08001c23
 8001c08:	08001c11 	.word	0x08001c11
 8001c0c:	08001ca7 	.word	0x08001ca7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d046      	beq.n	8001caa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c20:	e043      	b.n	8001caa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c2a:	d140      	bne.n	8001cae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c30:	e03d      	b.n	8001cae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c3a:	d121      	bne.n	8001c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d837      	bhi.n	8001cb2 <DMA_CheckFifoParam+0xda>
 8001c42:	a201      	add	r2, pc, #4	@ (adr r2, 8001c48 <DMA_CheckFifoParam+0x70>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001c59 	.word	0x08001c59
 8001c4c:	08001c5f 	.word	0x08001c5f
 8001c50:	08001c59 	.word	0x08001c59
 8001c54:	08001c71 	.word	0x08001c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c5c:	e030      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d025      	beq.n	8001cb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c6e:	e022      	b.n	8001cb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c78:	d11f      	bne.n	8001cba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c7e:	e01c      	b.n	8001cba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d903      	bls.n	8001c8e <DMA_CheckFifoParam+0xb6>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d003      	beq.n	8001c94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c8c:	e018      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
      break;
 8001c92:	e015      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca4:	e00b      	b.n	8001cbe <DMA_CheckFifoParam+0xe6>
      break;
 8001ca6:	bf00      	nop
 8001ca8:	e00a      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001caa:	bf00      	nop
 8001cac:	e008      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e006      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e004      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e002      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cba:	bf00      	nop
 8001cbc:	e000      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
    }
  } 
  
  return status; 
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e175      	b.n	8001fdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8164 	bne.w	8001fd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d005      	beq.n	8001d26 <HAL_GPIO_Init+0x56>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d130      	bne.n	8001d88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 0201 	and.w	r2, r3, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d017      	beq.n	8001dc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d123      	bne.n	8001e18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0203 	and.w	r2, r3, #3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80be 	beq.w	8001fd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	4b66      	ldr	r3, [pc, #408]	@ (8001ff4 <HAL_GPIO_Init+0x324>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	4a65      	ldr	r2, [pc, #404]	@ (8001ff4 <HAL_GPIO_Init+0x324>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e66:	4b63      	ldr	r3, [pc, #396]	@ (8001ff4 <HAL_GPIO_Init+0x324>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e72:	4a61      	ldr	r2, [pc, #388]	@ (8001ff8 <HAL_GPIO_Init+0x328>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a58      	ldr	r2, [pc, #352]	@ (8001ffc <HAL_GPIO_Init+0x32c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d037      	beq.n	8001f0e <HAL_GPIO_Init+0x23e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a57      	ldr	r2, [pc, #348]	@ (8002000 <HAL_GPIO_Init+0x330>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d031      	beq.n	8001f0a <HAL_GPIO_Init+0x23a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a56      	ldr	r2, [pc, #344]	@ (8002004 <HAL_GPIO_Init+0x334>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d02b      	beq.n	8001f06 <HAL_GPIO_Init+0x236>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a55      	ldr	r2, [pc, #340]	@ (8002008 <HAL_GPIO_Init+0x338>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d025      	beq.n	8001f02 <HAL_GPIO_Init+0x232>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a54      	ldr	r2, [pc, #336]	@ (800200c <HAL_GPIO_Init+0x33c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01f      	beq.n	8001efe <HAL_GPIO_Init+0x22e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a53      	ldr	r2, [pc, #332]	@ (8002010 <HAL_GPIO_Init+0x340>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d019      	beq.n	8001efa <HAL_GPIO_Init+0x22a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	@ (8002014 <HAL_GPIO_Init+0x344>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_GPIO_Init+0x226>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a51      	ldr	r2, [pc, #324]	@ (8002018 <HAL_GPIO_Init+0x348>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_GPIO_Init+0x222>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a50      	ldr	r2, [pc, #320]	@ (800201c <HAL_GPIO_Init+0x34c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <HAL_GPIO_Init+0x21e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8002020 <HAL_GPIO_Init+0x350>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_GPIO_Init+0x21a>
 8001ee6:	2309      	movs	r3, #9
 8001ee8:	e012      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001eea:	230a      	movs	r3, #10
 8001eec:	e010      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001eee:	2308      	movs	r3, #8
 8001ef0:	e00e      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e00c      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	e00a      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <HAL_GPIO_Init+0x328>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f52:	4a34      	ldr	r2, [pc, #208]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f58:	4b32      	ldr	r3, [pc, #200]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7c:	4a29      	ldr	r2, [pc, #164]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f82:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f ae86 	bls.w	8001cf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40021c00 	.word	0x40021c00
 800201c:	40022000 	.word	0x40022000
 8002020:	40022400 	.word	0x40022400
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e08b      	b.n	8002186 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fe4a 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	@ 0x24
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e006      	b.n	80020e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d108      	bne.n	80020fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	e007      	b.n	800210e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800210c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_I2C_Init+0x134>)
 800211a:	430b      	orrs	r3, r1
 800211c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800212c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69d9      	ldr	r1, [r3, #28]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	02008000 	.word	0x02008000

08002194 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	817b      	strh	r3, [r7, #10]
 80021a6:	460b      	mov	r3, r1
 80021a8:	813b      	strh	r3, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f040 80f9 	bne.w	80023ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x34>
 80021c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0ed      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_I2C_Mem_Write+0x4e>
 80021de:	2302      	movs	r3, #2
 80021e0:	e0e6      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021ea:	f7fe ff7f 	bl	80010ec <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2319      	movs	r3, #25
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f001 f92a 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0d1      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2221      	movs	r2, #33	@ 0x21
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2240      	movs	r2, #64	@ 0x40
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800222c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002234:	88f8      	ldrh	r0, [r7, #6]
 8002236:	893a      	ldrh	r2, [r7, #8]
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4603      	mov	r3, r0
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fc6d 	bl	8002b24 <I2C_RequestMemoryWrite>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0a9      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2bff      	cmp	r3, #255	@ 0xff
 8002264:	d90e      	bls.n	8002284 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	22ff      	movs	r2, #255	@ 0xff
 800226a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	b2da      	uxtb	r2, r3
 8002272:	8979      	ldrh	r1, [r7, #10]
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f001 faad 	bl	80037dc <I2C_TransferConfig>
 8002282:	e00f      	b.n	80022a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002292:	b2da      	uxtb	r2, r3
 8002294:	8979      	ldrh	r1, [r7, #10]
 8002296:	2300      	movs	r3, #0
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f001 fa9c 	bl	80037dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f001 f92d 	bl	8003508 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e07b      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d034      	beq.n	800235c <HAL_I2C_Mem_Write+0x1c8>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d130      	bne.n	800235c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002300:	2200      	movs	r2, #0
 8002302:	2180      	movs	r1, #128	@ 0x80
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f001 f8a6 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e04d      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	2bff      	cmp	r3, #255	@ 0xff
 800231c:	d90e      	bls.n	800233c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	22ff      	movs	r2, #255	@ 0xff
 8002322:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002328:	b2da      	uxtb	r2, r3
 800232a:	8979      	ldrh	r1, [r7, #10]
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f001 fa51 	bl	80037dc <I2C_TransferConfig>
 800233a:	e00f      	b.n	800235c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234a:	b2da      	uxtb	r2, r3
 800234c:	8979      	ldrh	r1, [r7, #10]
 800234e:	2300      	movs	r3, #0
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f001 fa40 	bl	80037dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d19e      	bne.n	80022a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f001 f913 	bl	8003596 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e01a      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2220      	movs	r2, #32
 8002380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_I2C_Mem_Write+0x224>)
 800238e:	400b      	ands	r3, r1
 8002390:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	fe00e800 	.word	0xfe00e800

080023bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	817b      	strh	r3, [r7, #10]
 80023ce:	460b      	mov	r3, r1
 80023d0:	813b      	strh	r3, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	f040 80fd 	bne.w	80025de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_I2C_Mem_Read+0x34>
 80023ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0f1      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_I2C_Mem_Read+0x4e>
 8002406:	2302      	movs	r3, #2
 8002408:	e0ea      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002412:	f7fe fe6b 	bl	80010ec <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2319      	movs	r3, #25
 800241e:	2201      	movs	r2, #1
 8002420:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f001 f816 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0d5      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2222      	movs	r2, #34	@ 0x22
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800245c:	88f8      	ldrh	r0, [r7, #6]
 800245e:	893a      	ldrh	r2, [r7, #8]
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4603      	mov	r3, r0
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fbad 	bl	8002bcc <I2C_RequestMemoryRead>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0ad      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2bff      	cmp	r3, #255	@ 0xff
 800248c:	d90e      	bls.n	80024ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	b2da      	uxtb	r2, r3
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	4b52      	ldr	r3, [pc, #328]	@ (80025e8 <HAL_I2C_Mem_Read+0x22c>)
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f001 f999 	bl	80037dc <I2C_TransferConfig>
 80024aa:	e00f      	b.n	80024cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	8979      	ldrh	r1, [r7, #10]
 80024be:	4b4a      	ldr	r3, [pc, #296]	@ (80025e8 <HAL_I2C_Mem_Read+0x22c>)
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f001 f988 	bl	80037dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d2:	2200      	movs	r2, #0
 80024d4:	2104      	movs	r1, #4
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 ffbd 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07c      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d034      	beq.n	800258c <HAL_I2C_Mem_Read+0x1d0>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	d130      	bne.n	800258c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 ff8e 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e04d      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2bff      	cmp	r3, #255	@ 0xff
 800254c:	d90e      	bls.n	800256c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	b2da      	uxtb	r2, r3
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f001 f939 	bl	80037dc <I2C_TransferConfig>
 800256a:	e00f      	b.n	800258c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	b2da      	uxtb	r2, r3
 800257c:	8979      	ldrh	r1, [r7, #10]
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f001 f928 	bl	80037dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d19a      	bne.n	80024cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fffb 	bl	8003596 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e01a      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2220      	movs	r2, #32
 80025b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_I2C_Mem_Read+0x230>)
 80025be:	400b      	ands	r3, r1
 80025c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025de:	2302      	movs	r3, #2
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	80002400 	.word	0x80002400
 80025ec:	fe00e800 	.word	0xfe00e800

080025f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	@ 0x28
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	460b      	mov	r3, r1
 80025fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	f040 80d2 	bne.w	80027b6 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002620:	d101      	bne.n	8002626 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	e0c8      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_I2C_IsDeviceReady+0x44>
 8002630:	2302      	movs	r3, #2
 8002632:	e0c1      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x1c8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2224      	movs	r2, #36	@ 0x24
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_I2C_IsDeviceReady+0x6e>
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_I2C_IsDeviceReady+0x1d0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	e004      	b.n	8002668 <HAL_I2C_IsDeviceReady+0x78>
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002664:	4b57      	ldr	r3, [pc, #348]	@ (80027c4 <HAL_I2C_IsDeviceReady+0x1d4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800266e:	f7fe fd3d 	bl	80010ec <HAL_GetTick>
 8002672:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b20      	cmp	r3, #32
 8002680:	bf0c      	ite	eq
 8002682:	2301      	moveq	r3, #1
 8002684:	2300      	movne	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b10      	cmp	r3, #16
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026a0:	e034      	b.n	800270c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d01a      	beq.n	80026e0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7fe fd1f 	bl	80010ec <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <HAL_I2C_IsDeviceReady+0xd0>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10f      	bne.n	80026e0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e06b      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b10      	cmp	r3, #16
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800270c:	7ffb      	ldrb	r3, [r7, #31]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_I2C_IsDeviceReady+0x128>
 8002712:	7fbb      	ldrb	r3, [r7, #30]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0c4      	beq.n	80026a2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b10      	cmp	r3, #16
 8002724:	d01a      	beq.n	800275c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	2120      	movs	r1, #32
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fe90 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e03b      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2220      	movs	r2, #32
 8002746:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e02d      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	2120      	movs	r1, #32
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fe75 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e020      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2210      	movs	r2, #16
 800277c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2220      	movs	r2, #32
 8002784:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	f63f af5a 	bhi.w	800264a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	02002000 	.word	0x02002000
 80027c4:	02002800 	.word	0x02002800

080027c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	68f9      	ldr	r1, [r7, #12]
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
  }
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00f      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800283c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00f      	beq.n	8002868 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002866:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00f      	beq.n	8002892 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	f043 0202 	orr.w	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002890:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 030b 	and.w	r3, r3, #11
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80028a2:	68f9      	ldr	r1, [r7, #12]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fc7d 	bl	80031a4 <I2C_ITError>
  }
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	70fb      	strb	r3, [r7, #3]
 80028e6:	4613      	mov	r3, r2
 80028e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <I2C_Slave_ISR_IT+0x24>
 8002952:	2302      	movs	r3, #2
 8002954:	e0e2      	b.n	8002b1c <I2C_Slave_ISR_IT+0x1ea>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002972:	6939      	ldr	r1, [r7, #16]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fa5d 	bl	8002e34 <I2C_ITSlaveCplt>
 800297a:	e0ca      	b.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	d04b      	beq.n	8002a1e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800298c:	2b00      	cmp	r3, #0
 800298e:	d046      	beq.n	8002a1e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d128      	bne.n	80029ec <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b28      	cmp	r3, #40	@ 0x28
 80029a4:	d108      	bne.n	80029b8 <I2C_Slave_ISR_IT+0x86>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029ac:	d104      	bne.n	80029b8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fba3 	bl	80030fc <I2C_ITListenCplt>
 80029b6:	e031      	b.n	8002a1c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b29      	cmp	r3, #41	@ 0x29
 80029c2:	d10e      	bne.n	80029e2 <I2C_Slave_ISR_IT+0xb0>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029ca:	d00a      	beq.n	80029e2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2210      	movs	r2, #16
 80029d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fcfc 	bl	80033d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9ce 	bl	8002d7c <I2C_ITSlaveSeqCplt>
 80029e0:	e01c      	b.n	8002a1c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2210      	movs	r2, #16
 80029e8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80029ea:	e08f      	b.n	8002b0c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2210      	movs	r2, #16
 80029f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <I2C_Slave_ISR_IT+0xdc>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a0c:	d17e      	bne.n	8002b0c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	4619      	mov	r1, r3
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fbc5 	bl	80031a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a1a:	e077      	b.n	8002b0c <I2C_Slave_ISR_IT+0x1da>
 8002a1c:	e076      	b.n	8002b0c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02f      	beq.n	8002a88 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02a      	beq.n	8002a88 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d14b      	bne.n	8002b10 <I2C_Slave_ISR_IT+0x1de>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a7e:	d047      	beq.n	8002b10 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f97b 	bl	8002d7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a86:	e043      	b.n	8002b10 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d004      	beq.n	8002aa6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a9c:	6939      	ldr	r1, [r7, #16]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8e8 	bl	8002c74 <I2C_ITAddrCplt>
 8002aa4:	e035      	b.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d030      	beq.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02b      	beq.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d018      	beq.n	8002af6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002af4:	e00d      	b.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002afc:	d002      	beq.n	8002b04 <I2C_Slave_ISR_IT+0x1d2>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f939 	bl	8002d7c <I2C_ITSlaveSeqCplt>
 8002b0a:	e002      	b.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002b0c:	bf00      	nop
 8002b0e:	e000      	b.n	8002b12 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002b10:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	8979      	ldrh	r1, [r7, #10]
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <I2C_RequestMemoryWrite+0xa4>)
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fe45 	bl	80037dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	69b9      	ldr	r1, [r7, #24]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fcd6 	bl	8003508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e02c      	b.n	8002bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6c:	893b      	ldrh	r3, [r7, #8]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b76:	e015      	b.n	8002ba4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	69b9      	ldr	r1, [r7, #24]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fcbc 	bl	8003508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e012      	b.n	8002bc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b9a:	893b      	ldrh	r3, [r7, #8]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2200      	movs	r2, #0
 8002bac:	2180      	movs	r1, #128	@ 0x80
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fc51 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	80002000 	.word	0x80002000

08002bcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	817b      	strh	r3, [r7, #10]
 8002bde:	460b      	mov	r3, r1
 8002be0:	813b      	strh	r3, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <I2C_RequestMemoryRead+0xa4>)
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fdf2 	bl	80037dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	69b9      	ldr	r1, [r7, #24]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fc83 	bl	8003508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e02c      	b.n	8002c66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d105      	bne.n	8002c1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c12:	893b      	ldrh	r3, [r7, #8]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c1c:	e015      	b.n	8002c4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c1e:	893b      	ldrh	r3, [r7, #8]
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	69b9      	ldr	r1, [r7, #24]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fc69 	bl	8003508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e012      	b.n	8002c66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c40:	893b      	ldrh	r3, [r7, #8]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2200      	movs	r2, #0
 8002c52:	2140      	movs	r1, #64	@ 0x40
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fbfe 	bl	8003456 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	80002000 	.word	0x80002000

08002c74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c8a:	2b28      	cmp	r3, #40	@ 0x28
 8002c8c:	d16a      	bne.n	8002d64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002cac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002cc8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d138      	bne.n	8002d44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	09db      	lsrs	r3, r3, #7
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	89bb      	ldrh	r3, [r7, #12]
 8002cda:	4053      	eors	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f003 0306 	and.w	r3, r3, #6
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11c      	bne.n	8002d20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d13b      	bne.n	8002d74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2208      	movs	r2, #8
 8002d08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d12:	89ba      	ldrh	r2, [r7, #12]
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fdde 	bl	80028da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d1e:	e029      	b.n	8002d74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d20:	893b      	ldrh	r3, [r7, #8]
 8002d22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fd89 	bl	8003840 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d36:	89ba      	ldrh	r2, [r7, #12]
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff fdcc 	bl	80028da <HAL_I2C_AddrCallback>
}
 8002d42:	e017      	b.n	8002d74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fd79 	bl	8003840 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d56:	89ba      	ldrh	r2, [r7, #12]
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fdbc 	bl	80028da <HAL_I2C_AddrCallback>
}
 8002d62:	e007      	b.n	8002d74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e00c      	b.n	8002dca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dc8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b29      	cmp	r3, #41	@ 0x29
 8002dd4:	d112      	bne.n	8002dfc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2228      	movs	r2, #40	@ 0x28
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2221      	movs	r2, #33	@ 0x21
 8002de2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002de4:	2101      	movs	r1, #1
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fd2a 	bl	8003840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fd5c 	bl	80028b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dfa:	e017      	b.n	8002e2c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e06:	d111      	bne.n	8002e2c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2228      	movs	r2, #40	@ 0x28
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2222      	movs	r2, #34	@ 0x22
 8002e14:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e16:	2102      	movs	r1, #2
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fd11 	bl	8003840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fd4d 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e56:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	2b21      	cmp	r3, #33	@ 0x21
 8002e64:	d002      	beq.n	8002e6c <I2C_ITSlaveCplt+0x38>
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	2b29      	cmp	r3, #41	@ 0x29
 8002e6a:	d108      	bne.n	8002e7e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002e6c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fce5 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2221      	movs	r2, #33	@ 0x21
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e7c:	e019      	b.n	8002eb2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	2b22      	cmp	r3, #34	@ 0x22
 8002e82:	d002      	beq.n	8002e8a <I2C_ITSlaveCplt+0x56>
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e88:	d108      	bne.n	8002e9c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002e8a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fcd6 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2222      	movs	r2, #34	@ 0x22
 8002e98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e9a:	e00a      	b.n	8002eb2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	2b28      	cmp	r3, #40	@ 0x28
 8002ea0:	d107      	bne.n	8002eb2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ea2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fcca 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b89      	ldr	r3, [pc, #548]	@ (80030f4 <I2C_ITSlaveCplt+0x2c0>)
 8002ece:	400b      	ands	r3, r1
 8002ed0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa7d 	bl	80033d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d013      	beq.n	8002f0a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ef0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01f      	beq.n	8002f3a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f08:	e017      	b.n	8002f3a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f22:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d049      	beq.n	800303a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d044      	beq.n	800303a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d128      	bne.n	800300c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b28      	cmp	r3, #40	@ 0x28
 8002fc4:	d108      	bne.n	8002fd8 <I2C_ITSlaveCplt+0x1a4>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fcc:	d104      	bne.n	8002fd8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002fce:	6979      	ldr	r1, [r7, #20]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f893 	bl	80030fc <I2C_ITListenCplt>
 8002fd6:	e030      	b.n	800303a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b29      	cmp	r3, #41	@ 0x29
 8002fe2:	d10e      	bne.n	8003002 <I2C_ITSlaveCplt+0x1ce>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fea:	d00a      	beq.n	8003002 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f9ec 	bl	80033d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff febe 	bl	8002d7c <I2C_ITSlaveSeqCplt>
 8003000:	e01b      	b.n	800303a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2210      	movs	r2, #16
 8003008:	61da      	str	r2, [r3, #28]
 800300a:	e016      	b.n	800303a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2210      	movs	r2, #16
 8003012:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <I2C_ITSlaveCplt+0x1fa>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800302c:	d105      	bne.n	800303a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f8b5 	bl	80031a4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8a4 	bl	80031a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b28      	cmp	r3, #40	@ 0x28
 8003066:	d141      	bne.n	80030ec <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f846 	bl	80030fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003070:	e03c      	b.n	80030ec <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800307a:	d014      	beq.n	80030a6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fe7d 	bl	8002d7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <I2C_ITSlaveCplt+0x2c4>)
 8003086:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fc29 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
}
 80030a4:	e022      	b.n	80030ec <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b22      	cmp	r3, #34	@ 0x22
 80030b0:	d10e      	bne.n	80030d0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fbfc 	bl	80028c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80030ce:	e00d      	b.n	80030ec <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fbe3 	bl	80028b2 <HAL_I2C_SlaveTxCpltCallback>
}
 80030ec:	bf00      	nop
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	fe00e800 	.word	0xfe00e800
 80030f8:	ffff0000 	.word	0xffff0000

080030fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a25      	ldr	r2, [pc, #148]	@ (80031a0 <I2C_ITListenCplt+0xa4>)
 800310a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d022      	beq.n	8003178 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003170:	f043 0204 	orr.w	r2, r3, #4
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003178:	f248 0103 	movw	r1, #32771	@ 0x8003
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fb5f 	bl	8003840 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2210      	movs	r2, #16
 8003188:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fbaf 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a6d      	ldr	r2, [pc, #436]	@ (8003378 <I2C_ITError+0x1d4>)
 80031c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	2b28      	cmp	r3, #40	@ 0x28
 80031da:	d005      	beq.n	80031e8 <I2C_ITError+0x44>
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b29      	cmp	r3, #41	@ 0x29
 80031e0:	d002      	beq.n	80031e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80031e6:	d10b      	bne.n	8003200 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031e8:	2103      	movs	r1, #3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fb28 	bl	8003840 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2228      	movs	r2, #40	@ 0x28
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a60      	ldr	r2, [pc, #384]	@ (800337c <I2C_ITError+0x1d8>)
 80031fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80031fe:	e030      	b.n	8003262 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003200:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fb1b 	bl	8003840 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f8e1 	bl	80033d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b60      	cmp	r3, #96	@ 0x60
 800321a:	d01f      	beq.n	800325c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b20      	cmp	r3, #32
 8003230:	d114      	bne.n	800325c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d109      	bne.n	8003254 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2210      	movs	r2, #16
 8003246:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	f043 0204 	orr.w	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2220      	movs	r2, #32
 800325a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326c:	2b00      	cmp	r3, #0
 800326e:	d039      	beq.n	80032e4 <I2C_ITError+0x140>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b11      	cmp	r3, #17
 8003274:	d002      	beq.n	800327c <I2C_ITError+0xd8>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b21      	cmp	r3, #33	@ 0x21
 800327a:	d133      	bne.n	80032e4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800328a:	d107      	bne.n	800329c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800329a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fc55 	bl	8001b50 <HAL_DMA_GetState>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d017      	beq.n	80032dc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	4a33      	ldr	r2, [pc, #204]	@ (8003380 <I2C_ITError+0x1dc>)
 80032b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fa99 	bl	80017f8 <HAL_DMA_Abort_IT>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d04d      	beq.n	8003368 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032d6:	4610      	mov	r0, r2
 80032d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032da:	e045      	b.n	8003368 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f851 	bl	8003384 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032e2:	e041      	b.n	8003368 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d039      	beq.n	8003360 <I2C_ITError+0x1bc>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b12      	cmp	r3, #18
 80032f0:	d002      	beq.n	80032f8 <I2C_ITError+0x154>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b22      	cmp	r3, #34	@ 0x22
 80032f6:	d133      	bne.n	8003360 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003306:	d107      	bne.n	8003318 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003316:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fc17 	bl	8001b50 <HAL_DMA_GetState>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d017      	beq.n	8003358 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	4a14      	ldr	r2, [pc, #80]	@ (8003380 <I2C_ITError+0x1dc>)
 800332e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fa5b 	bl	80017f8 <HAL_DMA_Abort_IT>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d011      	beq.n	800336c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003352:	4610      	mov	r0, r2
 8003354:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003356:	e009      	b.n	800336c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f813 	bl	8003384 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800335e:	e005      	b.n	800336c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f80f 	bl	8003384 <I2C_TreatErrorCallback>
  }
}
 8003366:	e002      	b.n	800336e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800336c:	bf00      	nop
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	ffff0000 	.word	0xffff0000
 800337c:	08002933 	.word	0x08002933
 8003380:	0800341b 	.word	0x0800341b

08003384 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b60      	cmp	r3, #96	@ 0x60
 8003396:	d10e      	bne.n	80033b6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fab5 	bl	800291e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033b4:	e009      	b.n	80033ca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff faa0 	bl	800290a <HAL_I2C_ErrorCallback>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d103      	bne.n	80033f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d007      	beq.n	800340e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	619a      	str	r2, [r3, #24]
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	2200      	movs	r2, #0
 8003436:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2200      	movs	r2, #0
 8003446:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff ff9b 	bl	8003384 <I2C_TreatErrorCallback>
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003466:	e03b      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f8d5 	bl	800361c <I2C_IsErrorOccurred>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e041      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d02d      	beq.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003484:	f7fd fe32 	bl	80010ec <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d122      	bne.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d113      	bne.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e00f      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d0b4      	beq.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003514:	e033      	b.n	800357e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f87e 	bl	800361c <I2C_IsErrorOccurred>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e031      	b.n	800358e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d025      	beq.n	800357e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fd fddb 	bl	80010ec <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11a      	bne.n	800357e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d013      	beq.n	800357e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e007      	b.n	800358e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d1c4      	bne.n	8003516 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a2:	e02f      	b.n	8003604 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f837 	bl	800361c <I2C_IsErrorOccurred>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e02d      	b.n	8003614 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fd fd98 	bl	80010ec <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11a      	bne.n	8003604 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d013      	beq.n	8003604 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e007      	b.n	8003614 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b20      	cmp	r3, #32
 8003610:	d1c8      	bne.n	80035a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d068      	beq.n	800371a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2210      	movs	r2, #16
 800364e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003650:	e049      	b.n	80036e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d045      	beq.n	80036e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fd fd47 	bl	80010ec <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_IsErrorOccurred+0x54>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d13a      	bne.n	80036e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800367a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003682:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800368e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003692:	d121      	bne.n	80036d8 <I2C_IsErrorOccurred+0xbc>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800369a:	d01d      	beq.n	80036d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d01a      	beq.n	80036d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036b2:	f7fd fd1b 	bl	80010ec <HAL_GetTick>
 80036b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b8:	e00e      	b.n	80036d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036ba:	f7fd fd17 	bl	80010ec <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b19      	cmp	r3, #25
 80036c6:	d907      	bls.n	80036d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f043 0320 	orr.w	r3, r3, #32
 80036ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80036d6:	e006      	b.n	80036e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d1e9      	bne.n	80036ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d003      	beq.n	80036fc <I2C_IsErrorOccurred+0xe0>
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0aa      	beq.n	8003652 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2220      	movs	r2, #32
 800370a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800373c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f043 0308 	orr.w	r3, r3, #8
 8003754:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800375e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01c      	beq.n	80037ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fe1e 	bl	80033d2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <I2C_IsErrorOccurred+0x1bc>)
 80037a2:	400b      	ands	r3, r1
 80037a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80037ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3728      	adds	r7, #40	@ 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	fe00e800 	.word	0xfe00e800

080037dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	817b      	strh	r3, [r7, #10]
 80037ea:	4613      	mov	r3, r2
 80037ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f4:	7a7b      	ldrb	r3, [r7, #9]
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	4313      	orrs	r3, r2
 8003806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800380a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	0d5b      	lsrs	r3, r3, #21
 8003816:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800381a:	4b08      	ldr	r3, [pc, #32]	@ (800383c <I2C_TransferConfig+0x60>)
 800381c:	430b      	orrs	r3, r1
 800381e:	43db      	mvns	r3, r3
 8003820:	ea02 0103 	and.w	r1, r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	03ff63ff 	.word	0x03ff63ff

08003840 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003850:	887b      	ldrh	r3, [r7, #2]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00f      	beq.n	800387a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003860:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800386e:	2b28      	cmp	r3, #40	@ 0x28
 8003870:	d003      	beq.n	800387a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003878:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00f      	beq.n	80038a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800388a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003898:	2b28      	cmp	r3, #40	@ 0x28
 800389a:	d003      	beq.n	80038a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80038a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	da03      	bge.n	80038b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d103      	bne.n	80038c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038c2:	887b      	ldrh	r3, [r7, #2]
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d103      	bne.n	80038d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f043 0320 	orr.w	r3, r3, #32
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d103      	bne.n	80038de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43da      	mvns	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	@ 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d139      	bne.n	8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e033      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	@ 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e29b      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8087 	beq.w	8003b5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a50:	4b96      	ldr	r3, [pc, #600]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d00c      	beq.n	8003a76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5c:	4b93      	ldr	r3, [pc, #588]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d112      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62>
 8003a68:	4b90      	ldr	r3, [pc, #576]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a74:	d10b      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a76:	4b8d      	ldr	r3, [pc, #564]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d06c      	beq.n	8003b5c <HAL_RCC_OscConfig+0x130>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d168      	bne.n	8003b5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e275      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x7a>
 8003a98:	4b84      	ldr	r3, [pc, #528]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a83      	ldr	r2, [pc, #524]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e02e      	b.n	8003b04 <HAL_RCC_OscConfig+0xd8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x9c>
 8003aae:	4b7f      	ldr	r3, [pc, #508]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b7c      	ldr	r3, [pc, #496]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7b      	ldr	r2, [pc, #492]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ac0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e01d      	b.n	8003b04 <HAL_RCC_OscConfig+0xd8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003ad2:	4b76      	ldr	r3, [pc, #472]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a75      	ldr	r2, [pc, #468]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b73      	ldr	r3, [pc, #460]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a72      	ldr	r2, [pc, #456]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0xd8>
 8003aec:	4b6f      	ldr	r3, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6e      	ldr	r2, [pc, #440]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b6c      	ldr	r3, [pc, #432]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6b      	ldr	r2, [pc, #428]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd faee 	bl	80010ec <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fd faea 	bl	80010ec <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e229      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b61      	ldr	r3, [pc, #388]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fada 	bl	80010ec <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fad6 	bl	80010ec <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e215      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x110>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d069      	beq.n	8003c3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b6a:	4b50      	ldr	r3, [pc, #320]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b4d      	ldr	r3, [pc, #308]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d11c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x190>
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	4b47      	ldr	r3, [pc, #284]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x17a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e1e9      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	493d      	ldr	r1, [pc, #244]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	e040      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc4:	4b39      	ldr	r3, [pc, #228]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a38      	ldr	r2, [pc, #224]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fa8c 	bl	80010ec <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd fa88 	bl	80010ec <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1c7      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	4b30      	ldr	r3, [pc, #192]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4929      	ldr	r1, [pc, #164]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
 8003c0a:	e018      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a26      	ldr	r2, [pc, #152]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd fa68 	bl	80010ec <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c20:	f7fd fa64 	bl	80010ec <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1a3      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	4b1e      	ldr	r3, [pc, #120]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d038      	beq.n	8003cbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d019      	beq.n	8003c86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c52:	4b16      	ldr	r3, [pc, #88]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c56:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fd fa45 	bl	80010ec <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fd fa41 	bl	80010ec <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e180      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x23a>
 8003c84:	e01a      	b.n	8003cbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c86:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8a:	4a08      	ldr	r2, [pc, #32]	@ (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fd fa2b 	bl	80010ec <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fd fa27 	bl	80010ec <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d903      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e166      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
 8003cac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	4b92      	ldr	r3, [pc, #584]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ee      	bne.n	8003c9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a4 	beq.w	8003e12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cca:	4b8c      	ldr	r3, [pc, #560]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd6:	4b89      	ldr	r3, [pc, #548]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	4a88      	ldr	r2, [pc, #544]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ce2:	4b86      	ldr	r3, [pc, #536]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf2:	4b83      	ldr	r3, [pc, #524]	@ (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d118      	bne.n	8003d30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cfe:	4b80      	ldr	r3, [pc, #512]	@ (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7f      	ldr	r2, [pc, #508]	@ (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd f9ef 	bl	80010ec <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d12:	f7fd f9eb 	bl	80010ec <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b64      	cmp	r3, #100	@ 0x64
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e12a      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d24:	4b76      	ldr	r3, [pc, #472]	@ (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x31a>
 8003d38:	4b70      	ldr	r3, [pc, #448]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	4a6f      	ldr	r2, [pc, #444]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d44:	e02d      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x33c>
 8003d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	4a6a      	ldr	r2, [pc, #424]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5a:	4b68      	ldr	r3, [pc, #416]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5e:	4a67      	ldr	r2, [pc, #412]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d66:	e01c      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCC_OscConfig+0x35e>
 8003d70:	4b62      	ldr	r3, [pc, #392]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d74:	4a61      	ldr	r2, [pc, #388]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	4a5e      	ldr	r2, [pc, #376]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d88:	e00b      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
 8003d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d96:	4b59      	ldr	r3, [pc, #356]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	4a58      	ldr	r2, [pc, #352]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d015      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fd f99f 	bl	80010ec <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd f99b 	bl	80010ec <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0d8      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ee      	beq.n	8003db2 <HAL_RCC_OscConfig+0x386>
 8003dd4:	e014      	b.n	8003e00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fd f989 	bl	80010ec <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd f985 	bl	80010ec <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0c2      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	4b41      	ldr	r3, [pc, #260]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ee      	bne.n	8003dde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e06:	4b3d      	ldr	r3, [pc, #244]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80ae 	beq.w	8003f78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e1c:	4b37      	ldr	r3, [pc, #220]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d06d      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d14b      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	4b32      	ldr	r3, [pc, #200]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd f956 	bl	80010ec <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd f952 	bl	80010ec <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e091      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	4b29      	ldr	r3, [pc, #164]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	491b      	ldr	r1, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd f924 	bl	80010ec <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd f920 	bl	80010ec <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e05f      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b10      	ldr	r3, [pc, #64]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
 8003ec6:	e057      	b.n	8003f78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd f90a 	bl	80010ec <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd f906 	bl	80010ec <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e045      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x4b0>
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x54c>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f04:	4b1f      	ldr	r3, [pc, #124]	@ (8003f84 <HAL_RCC_OscConfig+0x558>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d030      	beq.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d129      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d122      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d119      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d10f      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0d0      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d910      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b67      	ldr	r3, [pc, #412]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 020f 	bic.w	r2, r3, #15
 8003fb6:	4965      	ldr	r1, [pc, #404]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a58      	ldr	r2, [pc, #352]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8003fee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a52      	ldr	r2, [pc, #328]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800400a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d040      	beq.n	80040ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d115      	bne.n	800406a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b41      	ldr	r3, [pc, #260]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e073      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	4b3d      	ldr	r3, [pc, #244]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e06b      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4936      	ldr	r1, [pc, #216]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fd f836 	bl	80010ec <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fd f832 	bl	80010ec <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e053      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b27      	ldr	r3, [pc, #156]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d210      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b24      	ldr	r3, [pc, #144]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	4922      	ldr	r1, [pc, #136]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004106:	4b12      	ldr	r3, [pc, #72]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f821 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	490a      	ldr	r1, [pc, #40]	@ (8004154 <HAL_RCC_ClockConfig+0x1cc>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	@ (8004158 <HAL_RCC_ClockConfig+0x1d0>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	@ (800415c <HAL_RCC_ClockConfig+0x1d4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc ff92 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	08007bf4 	.word	0x08007bf4
 8004158:	20000000 	.word	0x20000000
 800415c:	20000004 	.word	0x20000004

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b090      	sub	sp, #64	@ 0x40
 8004166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	637b      	str	r3, [r7, #52]	@ 0x34
 800416c:	2300      	movs	r3, #0
 800416e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004170:	2300      	movs	r3, #0
 8004172:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004178:	4b59      	ldr	r3, [pc, #356]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d00d      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004184:	2b08      	cmp	r3, #8
 8004186:	f200 80a1 	bhi.w	80042cc <HAL_RCC_GetSysClockFreq+0x16c>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x34>
 800418e:	2b04      	cmp	r3, #4
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x3a>
 8004192:	e09b      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b53      	ldr	r3, [pc, #332]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004196:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004198:	e09b      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800419a:	4b53      	ldr	r3, [pc, #332]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800419c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800419e:	e098      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a0:	4b4f      	ldr	r3, [pc, #316]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041aa:	4b4d      	ldr	r3, [pc, #308]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d028      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b6:	4b4a      	ldr	r3, [pc, #296]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	2200      	movs	r2, #0
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041c8:	2100      	movs	r1, #0
 80041ca:	4b47      	ldr	r3, [pc, #284]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041cc:	fb03 f201 	mul.w	r2, r3, r1
 80041d0:	2300      	movs	r3, #0
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	4a43      	ldr	r2, [pc, #268]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041da:	fba0 1202 	umull	r1, r2, r0, r2
 80041de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041e0:	460a      	mov	r2, r1
 80041e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041e6:	4413      	add	r3, r2
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ec:	2200      	movs	r2, #0
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	61fa      	str	r2, [r7, #28]
 80041f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041fa:	f7fc f879 	bl	80002f0 <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4613      	mov	r3, r2
 8004204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004206:	e053      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004208:	4b35      	ldr	r3, [pc, #212]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	2200      	movs	r2, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	617a      	str	r2, [r7, #20]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800421a:	f04f 0b00 	mov.w	fp, #0
 800421e:	4652      	mov	r2, sl
 8004220:	465b      	mov	r3, fp
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	0159      	lsls	r1, r3, #5
 800422c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004230:	0150      	lsls	r0, r2, #5
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	ebb2 080a 	subs.w	r8, r2, sl
 800423a:	eb63 090b 	sbc.w	r9, r3, fp
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800424a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800424e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004252:	ebb2 0408 	subs.w	r4, r2, r8
 8004256:	eb63 0509 	sbc.w	r5, r3, r9
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	00eb      	lsls	r3, r5, #3
 8004264:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004268:	00e2      	lsls	r2, r4, #3
 800426a:	4614      	mov	r4, r2
 800426c:	461d      	mov	r5, r3
 800426e:	eb14 030a 	adds.w	r3, r4, sl
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	eb45 030b 	adc.w	r3, r5, fp
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004286:	4629      	mov	r1, r5
 8004288:	028b      	lsls	r3, r1, #10
 800428a:	4621      	mov	r1, r4
 800428c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004290:	4621      	mov	r1, r4
 8004292:	028a      	lsls	r2, r1, #10
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429a:	2200      	movs	r2, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	60fa      	str	r2, [r7, #12]
 80042a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042a4:	f7fc f824 	bl	80002f0 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042b0:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3740      	adds	r7, #64	@ 0x40
 80042d8:	46bd      	mov	sp, r7
 80042da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	017d7840 	.word	0x017d7840

080042ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b03      	ldr	r3, [pc, #12]	@ (8004300 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000000 	.word	0x20000000

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004308:	f7ff fff0 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	@ (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40023800 	.word	0x40023800
 8004328:	08007c04 	.word	0x08007c04

0800432c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004330:	f7ff ffdc 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	@ (800434c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0b5b      	lsrs	r3, r3, #13
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	@ (8004350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	08007c04 	.word	0x08007c04

08004354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d012      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800437c:	4b69      	ldr	r3, [pc, #420]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a68      	ldr	r2, [pc, #416]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004386:	6093      	str	r3, [r2, #8]
 8004388:	4b66      	ldr	r3, [pc, #408]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004390:	4964      	ldr	r1, [pc, #400]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d017      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043bc:	4959      	ldr	r1, [pc, #356]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043cc:	d101      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	494a      	ldr	r1, [pc, #296]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004426:	2301      	movs	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 808b 	beq.w	800454e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b3a      	ldr	r3, [pc, #232]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	4a39      	ldr	r2, [pc, #228]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004442:	6413      	str	r3, [r2, #64]	@ 0x40
 8004444:	4b37      	ldr	r3, [pc, #220]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004450:	4b35      	ldr	r3, [pc, #212]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a34      	ldr	r2, [pc, #208]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445c:	f7fc fe46 	bl	80010ec <HAL_GetTick>
 8004460:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004464:	f7fc fe42 	bl	80010ec <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	@ 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e38f      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004476:	4b2c      	ldr	r3, [pc, #176]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004482:	4b28      	ldr	r3, [pc, #160]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d035      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d02e      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a0:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044c2:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044c8:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d114      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fc fe0a 	bl	80010ec <HAL_GetTick>
 80044d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fc fe06 	bl	80010ec <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e351      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ee      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450a:	d111      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800450c:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800451a:	400b      	ands	r3, r1
 800451c:	4901      	ldr	r1, [pc, #4]	@ (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
 8004522:	e00b      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004524:	40023800 	.word	0x40023800
 8004528:	40007000 	.word	0x40007000
 800452c:	0ffffcff 	.word	0x0ffffcff
 8004530:	4bac      	ldr	r3, [pc, #688]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4aab      	ldr	r2, [pc, #684]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004536:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800453a:	6093      	str	r3, [r2, #8]
 800453c:	4ba9      	ldr	r3, [pc, #676]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004548:	49a6      	ldr	r1, [pc, #664]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454a:	4313      	orrs	r3, r2
 800454c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b00      	cmp	r3, #0
 8004558:	d010      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800455a:	4ba2      	ldr	r3, [pc, #648]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004560:	4aa0      	ldr	r2, [pc, #640]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004566:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800456a:	4b9e      	ldr	r3, [pc, #632]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	499b      	ldr	r1, [pc, #620]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004588:	4b96      	ldr	r3, [pc, #600]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004596:	4993      	ldr	r1, [pc, #588]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045aa:	4b8e      	ldr	r3, [pc, #568]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045b8:	498a      	ldr	r1, [pc, #552]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045cc:	4b85      	ldr	r3, [pc, #532]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045da:	4982      	ldr	r1, [pc, #520]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ee:	4b7d      	ldr	r3, [pc, #500]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fc:	4979      	ldr	r1, [pc, #484]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004610:	4b74      	ldr	r3, [pc, #464]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	4971      	ldr	r1, [pc, #452]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004632:	4b6c      	ldr	r3, [pc, #432]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004638:	f023 020c 	bic.w	r2, r3, #12
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	4968      	ldr	r1, [pc, #416]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004654:	4b63      	ldr	r3, [pc, #396]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	4960      	ldr	r1, [pc, #384]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004676:	4b5b      	ldr	r3, [pc, #364]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004684:	4957      	ldr	r1, [pc, #348]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004698:	4b52      	ldr	r3, [pc, #328]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	494f      	ldr	r1, [pc, #316]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046ba:	4b4a      	ldr	r3, [pc, #296]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	4946      	ldr	r1, [pc, #280]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046dc:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ea:	493e      	ldr	r1, [pc, #248]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046fe:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004704:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470c:	4935      	ldr	r1, [pc, #212]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004720:	4b30      	ldr	r3, [pc, #192]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004726:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800472e:	492d      	ldr	r1, [pc, #180]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d011      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004742:	4b28      	ldr	r3, [pc, #160]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004748:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004750:	4924      	ldr	r1, [pc, #144]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800475c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004760:	d101      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004782:	4b18      	ldr	r3, [pc, #96]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004788:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004790:	4914      	ldr	r1, [pc, #80]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047a4:	4b0f      	ldr	r3, [pc, #60]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047b4:	490b      	ldr	r1, [pc, #44]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00f      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047c8:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d8:	4902      	ldr	r1, [pc, #8]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047e0:	e002      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	4986      	ldr	r1, [pc, #536]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004818:	4b81      	ldr	r3, [pc, #516]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800481e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004828:	497d      	ldr	r1, [pc, #500]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d006      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80d6 	beq.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004844:	4b76      	ldr	r3, [pc, #472]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a75      	ldr	r2, [pc, #468]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800484e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004850:	f7fc fc4c 	bl	80010ec <HAL_GetTick>
 8004854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004858:	f7fc fc48 	bl	80010ec <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	@ 0x64
 8004864:	d901      	bls.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e195      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800486a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d021      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11d      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800488a:	4b65      	ldr	r3, [pc, #404]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004898:	4b61      	ldr	r3, [pc, #388]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489e:	0e1b      	lsrs	r3, r3, #24
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	019a      	lsls	r2, r3, #6
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	071b      	lsls	r3, r3, #28
 80048be:	4958      	ldr	r1, [pc, #352]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d02e      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f0:	d129      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004900:	4b47      	ldr	r3, [pc, #284]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004906:	0f1b      	lsrs	r3, r3, #28
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	019a      	lsls	r2, r3, #6
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	061b      	lsls	r3, r3, #24
 8004920:	431a      	orrs	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	071b      	lsls	r3, r3, #28
 8004926:	493e      	ldr	r1, [pc, #248]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800492e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004934:	f023 021f 	bic.w	r2, r3, #31
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	3b01      	subs	r3, #1
 800493e:	4938      	ldr	r1, [pc, #224]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01d      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004952:	4b33      	ldr	r3, [pc, #204]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004958:	0e1b      	lsrs	r3, r3, #24
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004960:	4b2f      	ldr	r3, [pc, #188]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004966:	0f1b      	lsrs	r3, r3, #28
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	019a      	lsls	r2, r3, #6
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	071b      	lsls	r3, r3, #28
 8004986:	4926      	ldr	r1, [pc, #152]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d011      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	019a      	lsls	r2, r3, #6
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	061b      	lsls	r3, r3, #24
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	071b      	lsls	r3, r3, #28
 80049b6:	491a      	ldr	r1, [pc, #104]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049be:	4b18      	ldr	r3, [pc, #96]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ca:	f7fc fb8f 	bl	80010ec <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049d2:	f7fc fb8b 	bl	80010ec <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b64      	cmp	r3, #100	@ 0x64
 80049de:	d901      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e0d8      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	f040 80ce 	bne.w	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049f8:	4b09      	ldr	r3, [pc, #36]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a04:	f7fc fb72 	bl	80010ec <HAL_GetTick>
 8004a08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a0c:	f7fc fb6e 	bl	80010ec <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	@ 0x64
 8004a18:	d904      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0bb      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a24:	4b5e      	ldr	r3, [pc, #376]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a30:	d0ec      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d12a      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a5a:	4b51      	ldr	r3, [pc, #324]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a68:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	0f1b      	lsrs	r3, r3, #28
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	019a      	lsls	r2, r3, #6
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	071b      	lsls	r3, r3, #28
 8004a8e:	4944      	ldr	r1, [pc, #272]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a96:	4b42      	ldr	r3, [pc, #264]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a9c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	493d      	ldr	r1, [pc, #244]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d022      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac4:	d11d      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ac6:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004acc:	0e1b      	lsrs	r3, r3, #24
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ad4:	4b32      	ldr	r3, [pc, #200]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ada:	0f1b      	lsrs	r3, r3, #28
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	019a      	lsls	r2, r3, #6
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	071b      	lsls	r3, r3, #28
 8004afa:	4929      	ldr	r1, [pc, #164]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d028      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	0e1b      	lsrs	r3, r3, #24
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b22:	0c1b      	lsrs	r3, r3, #16
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	019a      	lsls	r2, r3, #6
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	071b      	lsls	r3, r3, #28
 8004b42:	4917      	ldr	r1, [pc, #92]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	4911      	ldr	r1, [pc, #68]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fc fabe 	bl	80010ec <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b74:	f7fc faba 	bl	80010ec <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	@ 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e007      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b92:	d1ef      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e040      	b.n	8004c38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc f916 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	@ 0x24
 8004bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fe28 	bl	8005840 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fbc1 	bl	8005378 <UART_SetConfig>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e01b      	b.n	8004c38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fea7 	bl	8005984 <UART_CheckIdleState>
 8004c36:	4603      	mov	r3, r0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	@ 0x28
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d177      	bne.n	8004d48 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_UART_Transmit+0x24>
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e070      	b.n	8004d4a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2221      	movs	r2, #33	@ 0x21
 8004c74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c76:	f7fc fa39 	bl	80010ec <HAL_GetTick>
 8004c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c94:	d108      	bne.n	8004ca8 <HAL_UART_Transmit+0x68>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d104      	bne.n	8004ca8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e003      	b.n	8004cb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb0:	e02f      	b.n	8004d12 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2180      	movs	r1, #128	@ 0x80
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 ff09 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e03b      	b.n	8004d4a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	3302      	adds	r3, #2
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e007      	b.n	8004d00 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1c9      	bne.n	8004cb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2140      	movs	r1, #64	@ 0x40
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fed3 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e005      	b.n	8004d4a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b0ba      	sub	sp, #232	@ 0xe8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004d7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004d82:	4013      	ands	r3, r2
 8004d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d115      	bne.n	8004dbc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00f      	beq.n	8004dbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 82ac 	beq.w	800530a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
      }
      return;
 8004dba:	e2a6      	b.n	800530a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004dbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8117 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004dd6:	4b85      	ldr	r3, [pc, #532]	@ (8004fec <HAL_UART_IRQHandler+0x298>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 810a 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d011      	beq.n	8004e10 <HAL_UART_IRQHandler+0xbc>
 8004dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e06:	f043 0201 	orr.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d011      	beq.n	8004e40 <HAL_UART_IRQHandler+0xec>
 8004e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00b      	beq.n	8004e40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e36:	f043 0204 	orr.w	r2, r3, #4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d011      	beq.n	8004e70 <HAL_UART_IRQHandler+0x11c>
 8004e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e66:	f043 0202 	orr.w	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d017      	beq.n	8004eac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00b      	beq.n	8004eac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea2:	f043 0208 	orr.w	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d012      	beq.n	8004ede <HAL_UART_IRQHandler+0x18a>
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00c      	beq.n	8004ede <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8212 	beq.w	800530e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d04f      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fe39 	bl	8005bae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f46:	2b40      	cmp	r3, #64	@ 0x40
 8004f48:	d141      	bne.n	8004fce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d9      	bne.n	8004f4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d013      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa2:	4a13      	ldr	r2, [pc, #76]	@ (8004ff0 <HAL_UART_IRQHandler+0x29c>)
 8004fa4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fc fc24 	bl	80017f8 <HAL_DMA_Abort_IT>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d017      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	e00f      	b.n	8004fe6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f9b6 	bl	8005338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	e00b      	b.n	8004fe6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9b2 	bl	8005338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e007      	b.n	8004fe6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9ae 	bl	8005338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004fe4:	e193      	b.n	800530e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe6:	bf00      	nop
    return;
 8004fe8:	e191      	b.n	800530e <HAL_UART_IRQHandler+0x5ba>
 8004fea:	bf00      	nop
 8004fec:	04000120 	.word	0x04000120
 8004ff0:	08005c77 	.word	0x08005c77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 814c 	bne.w	8005296 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 8145 	beq.w	8005296 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 813e 	beq.w	8005296 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2210      	movs	r2, #16
 8005020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	f040 80b6 	bne.w	800519e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800503e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8165 	beq.w	8005312 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800504e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005052:	429a      	cmp	r2, r3
 8005054:	f080 815d 	bcs.w	8005312 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800505e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800506c:	f000 8086 	beq.w	800517c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005084:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800508c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800509a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800509e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1da      	bne.n	8005070 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e1      	bne.n	80050ba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3308      	adds	r3, #8
 80050fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800510c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3308      	adds	r3, #8
 8005116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800511a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800511c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005120:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e3      	bne.n	80050f6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800514a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800514c:	f023 0310 	bic.w	r3, r3, #16
 8005150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800515e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005160:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005164:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800516c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e4      	bne.n	800513c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005176:	4618      	mov	r0, r3
 8005178:	f7fc face 	bl	8001718 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800518e:	b29b      	uxth	r3, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8d8 	bl	800534c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800519c:	e0b9      	b.n	8005312 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80ab 	beq.w	8005316 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80051c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80a6 	beq.w	8005316 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e4      	bne.n	80051ca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	623b      	str	r3, [r7, #32]
   return(result);
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3308      	adds	r3, #8
 8005220:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005224:	633a      	str	r2, [r7, #48]	@ 0x30
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800522a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e3      	bne.n	8005200 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	60fb      	str	r3, [r7, #12]
   return(result);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f023 0310 	bic.w	r3, r3, #16
 8005260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	461a      	mov	r2, r3
 800526a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	69b9      	ldr	r1, [r7, #24]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	617b      	str	r3, [r7, #20]
   return(result);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e4      	bne.n	800524c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f85c 	bl	800534c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005294:	e03f      	b.n	8005316 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800529a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00e      	beq.n	80052c0 <HAL_UART_IRQHandler+0x56c>
 80052a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f853 	bl	8005364 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052be:	e02d      	b.n	800531c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00e      	beq.n	80052ea <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01c      	beq.n	800531a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
    }
    return;
 80052e8:	e017      	b.n	800531a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d012      	beq.n	800531c <HAL_UART_IRQHandler+0x5c8>
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fccd 	bl	8005ca2 <UART_EndTransmit_IT>
    return;
 8005308:	e008      	b.n	800531c <HAL_UART_IRQHandler+0x5c8>
      return;
 800530a:	bf00      	nop
 800530c:	e006      	b.n	800531c <HAL_UART_IRQHandler+0x5c8>
    return;
 800530e:	bf00      	nop
 8005310:	e004      	b.n	800531c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <HAL_UART_IRQHandler+0x5c8>
      return;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <HAL_UART_IRQHandler+0x5c8>
    return;
 800531a:	bf00      	nop
  }

}
 800531c:	37e8      	adds	r7, #232	@ 0xe8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop

08005324 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4ba6      	ldr	r3, [pc, #664]	@ (800563c <UART_SetConfig+0x2c4>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	6979      	ldr	r1, [r7, #20]
 80053ac:	430b      	orrs	r3, r1
 80053ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a94      	ldr	r2, [pc, #592]	@ (8005640 <UART_SetConfig+0x2c8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d120      	bne.n	8005436 <UART_SetConfig+0xbe>
 80053f4:	4b93      	ldr	r3, [pc, #588]	@ (8005644 <UART_SetConfig+0x2cc>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d816      	bhi.n	8005430 <UART_SetConfig+0xb8>
 8005402:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <UART_SetConfig+0x90>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	08005419 	.word	0x08005419
 800540c:	08005425 	.word	0x08005425
 8005410:	0800541f 	.word	0x0800541f
 8005414:	0800542b 	.word	0x0800542b
 8005418:	2301      	movs	r3, #1
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e150      	b.n	80056c0 <UART_SetConfig+0x348>
 800541e:	2302      	movs	r3, #2
 8005420:	77fb      	strb	r3, [r7, #31]
 8005422:	e14d      	b.n	80056c0 <UART_SetConfig+0x348>
 8005424:	2304      	movs	r3, #4
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e14a      	b.n	80056c0 <UART_SetConfig+0x348>
 800542a:	2308      	movs	r3, #8
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e147      	b.n	80056c0 <UART_SetConfig+0x348>
 8005430:	2310      	movs	r3, #16
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e144      	b.n	80056c0 <UART_SetConfig+0x348>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a83      	ldr	r2, [pc, #524]	@ (8005648 <UART_SetConfig+0x2d0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d132      	bne.n	80054a6 <UART_SetConfig+0x12e>
 8005440:	4b80      	ldr	r3, [pc, #512]	@ (8005644 <UART_SetConfig+0x2cc>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d828      	bhi.n	80054a0 <UART_SetConfig+0x128>
 800544e:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <UART_SetConfig+0xdc>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	08005489 	.word	0x08005489
 8005458:	080054a1 	.word	0x080054a1
 800545c:	080054a1 	.word	0x080054a1
 8005460:	080054a1 	.word	0x080054a1
 8005464:	08005495 	.word	0x08005495
 8005468:	080054a1 	.word	0x080054a1
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054a1 	.word	0x080054a1
 8005474:	0800548f 	.word	0x0800548f
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a1 	.word	0x080054a1
 8005484:	0800549b 	.word	0x0800549b
 8005488:	2300      	movs	r3, #0
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e118      	b.n	80056c0 <UART_SetConfig+0x348>
 800548e:	2302      	movs	r3, #2
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e115      	b.n	80056c0 <UART_SetConfig+0x348>
 8005494:	2304      	movs	r3, #4
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e112      	b.n	80056c0 <UART_SetConfig+0x348>
 800549a:	2308      	movs	r3, #8
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e10f      	b.n	80056c0 <UART_SetConfig+0x348>
 80054a0:	2310      	movs	r3, #16
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e10c      	b.n	80056c0 <UART_SetConfig+0x348>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a68      	ldr	r2, [pc, #416]	@ (800564c <UART_SetConfig+0x2d4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d120      	bne.n	80054f2 <UART_SetConfig+0x17a>
 80054b0:	4b64      	ldr	r3, [pc, #400]	@ (8005644 <UART_SetConfig+0x2cc>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054ba:	2b30      	cmp	r3, #48	@ 0x30
 80054bc:	d013      	beq.n	80054e6 <UART_SetConfig+0x16e>
 80054be:	2b30      	cmp	r3, #48	@ 0x30
 80054c0:	d814      	bhi.n	80054ec <UART_SetConfig+0x174>
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d009      	beq.n	80054da <UART_SetConfig+0x162>
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d810      	bhi.n	80054ec <UART_SetConfig+0x174>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <UART_SetConfig+0x15c>
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d006      	beq.n	80054e0 <UART_SetConfig+0x168>
 80054d2:	e00b      	b.n	80054ec <UART_SetConfig+0x174>
 80054d4:	2300      	movs	r3, #0
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e0f2      	b.n	80056c0 <UART_SetConfig+0x348>
 80054da:	2302      	movs	r3, #2
 80054dc:	77fb      	strb	r3, [r7, #31]
 80054de:	e0ef      	b.n	80056c0 <UART_SetConfig+0x348>
 80054e0:	2304      	movs	r3, #4
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e0ec      	b.n	80056c0 <UART_SetConfig+0x348>
 80054e6:	2308      	movs	r3, #8
 80054e8:	77fb      	strb	r3, [r7, #31]
 80054ea:	e0e9      	b.n	80056c0 <UART_SetConfig+0x348>
 80054ec:	2310      	movs	r3, #16
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e0e6      	b.n	80056c0 <UART_SetConfig+0x348>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a56      	ldr	r2, [pc, #344]	@ (8005650 <UART_SetConfig+0x2d8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d120      	bne.n	800553e <UART_SetConfig+0x1c6>
 80054fc:	4b51      	ldr	r3, [pc, #324]	@ (8005644 <UART_SetConfig+0x2cc>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005502:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005506:	2bc0      	cmp	r3, #192	@ 0xc0
 8005508:	d013      	beq.n	8005532 <UART_SetConfig+0x1ba>
 800550a:	2bc0      	cmp	r3, #192	@ 0xc0
 800550c:	d814      	bhi.n	8005538 <UART_SetConfig+0x1c0>
 800550e:	2b80      	cmp	r3, #128	@ 0x80
 8005510:	d009      	beq.n	8005526 <UART_SetConfig+0x1ae>
 8005512:	2b80      	cmp	r3, #128	@ 0x80
 8005514:	d810      	bhi.n	8005538 <UART_SetConfig+0x1c0>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <UART_SetConfig+0x1a8>
 800551a:	2b40      	cmp	r3, #64	@ 0x40
 800551c:	d006      	beq.n	800552c <UART_SetConfig+0x1b4>
 800551e:	e00b      	b.n	8005538 <UART_SetConfig+0x1c0>
 8005520:	2300      	movs	r3, #0
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e0cc      	b.n	80056c0 <UART_SetConfig+0x348>
 8005526:	2302      	movs	r3, #2
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e0c9      	b.n	80056c0 <UART_SetConfig+0x348>
 800552c:	2304      	movs	r3, #4
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e0c6      	b.n	80056c0 <UART_SetConfig+0x348>
 8005532:	2308      	movs	r3, #8
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e0c3      	b.n	80056c0 <UART_SetConfig+0x348>
 8005538:	2310      	movs	r3, #16
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e0c0      	b.n	80056c0 <UART_SetConfig+0x348>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a44      	ldr	r2, [pc, #272]	@ (8005654 <UART_SetConfig+0x2dc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d125      	bne.n	8005594 <UART_SetConfig+0x21c>
 8005548:	4b3e      	ldr	r3, [pc, #248]	@ (8005644 <UART_SetConfig+0x2cc>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005556:	d017      	beq.n	8005588 <UART_SetConfig+0x210>
 8005558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800555c:	d817      	bhi.n	800558e <UART_SetConfig+0x216>
 800555e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005562:	d00b      	beq.n	800557c <UART_SetConfig+0x204>
 8005564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005568:	d811      	bhi.n	800558e <UART_SetConfig+0x216>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <UART_SetConfig+0x1fe>
 800556e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005572:	d006      	beq.n	8005582 <UART_SetConfig+0x20a>
 8005574:	e00b      	b.n	800558e <UART_SetConfig+0x216>
 8005576:	2300      	movs	r3, #0
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e0a1      	b.n	80056c0 <UART_SetConfig+0x348>
 800557c:	2302      	movs	r3, #2
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e09e      	b.n	80056c0 <UART_SetConfig+0x348>
 8005582:	2304      	movs	r3, #4
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e09b      	b.n	80056c0 <UART_SetConfig+0x348>
 8005588:	2308      	movs	r3, #8
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e098      	b.n	80056c0 <UART_SetConfig+0x348>
 800558e:	2310      	movs	r3, #16
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e095      	b.n	80056c0 <UART_SetConfig+0x348>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2f      	ldr	r2, [pc, #188]	@ (8005658 <UART_SetConfig+0x2e0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d125      	bne.n	80055ea <UART_SetConfig+0x272>
 800559e:	4b29      	ldr	r3, [pc, #164]	@ (8005644 <UART_SetConfig+0x2cc>)
 80055a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055ac:	d017      	beq.n	80055de <UART_SetConfig+0x266>
 80055ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b2:	d817      	bhi.n	80055e4 <UART_SetConfig+0x26c>
 80055b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b8:	d00b      	beq.n	80055d2 <UART_SetConfig+0x25a>
 80055ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055be:	d811      	bhi.n	80055e4 <UART_SetConfig+0x26c>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <UART_SetConfig+0x254>
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c8:	d006      	beq.n	80055d8 <UART_SetConfig+0x260>
 80055ca:	e00b      	b.n	80055e4 <UART_SetConfig+0x26c>
 80055cc:	2301      	movs	r3, #1
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e076      	b.n	80056c0 <UART_SetConfig+0x348>
 80055d2:	2302      	movs	r3, #2
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e073      	b.n	80056c0 <UART_SetConfig+0x348>
 80055d8:	2304      	movs	r3, #4
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e070      	b.n	80056c0 <UART_SetConfig+0x348>
 80055de:	2308      	movs	r3, #8
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e06d      	b.n	80056c0 <UART_SetConfig+0x348>
 80055e4:	2310      	movs	r3, #16
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e06a      	b.n	80056c0 <UART_SetConfig+0x348>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <UART_SetConfig+0x2e4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d138      	bne.n	8005666 <UART_SetConfig+0x2ee>
 80055f4:	4b13      	ldr	r3, [pc, #76]	@ (8005644 <UART_SetConfig+0x2cc>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80055fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005602:	d017      	beq.n	8005634 <UART_SetConfig+0x2bc>
 8005604:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005608:	d82a      	bhi.n	8005660 <UART_SetConfig+0x2e8>
 800560a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800560e:	d00b      	beq.n	8005628 <UART_SetConfig+0x2b0>
 8005610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005614:	d824      	bhi.n	8005660 <UART_SetConfig+0x2e8>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <UART_SetConfig+0x2aa>
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800561e:	d006      	beq.n	800562e <UART_SetConfig+0x2b6>
 8005620:	e01e      	b.n	8005660 <UART_SetConfig+0x2e8>
 8005622:	2300      	movs	r3, #0
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e04b      	b.n	80056c0 <UART_SetConfig+0x348>
 8005628:	2302      	movs	r3, #2
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e048      	b.n	80056c0 <UART_SetConfig+0x348>
 800562e:	2304      	movs	r3, #4
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e045      	b.n	80056c0 <UART_SetConfig+0x348>
 8005634:	2308      	movs	r3, #8
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e042      	b.n	80056c0 <UART_SetConfig+0x348>
 800563a:	bf00      	nop
 800563c:	efff69f3 	.word	0xefff69f3
 8005640:	40011000 	.word	0x40011000
 8005644:	40023800 	.word	0x40023800
 8005648:	40004400 	.word	0x40004400
 800564c:	40004800 	.word	0x40004800
 8005650:	40004c00 	.word	0x40004c00
 8005654:	40005000 	.word	0x40005000
 8005658:	40011400 	.word	0x40011400
 800565c:	40007800 	.word	0x40007800
 8005660:	2310      	movs	r3, #16
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e02c      	b.n	80056c0 <UART_SetConfig+0x348>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a72      	ldr	r2, [pc, #456]	@ (8005834 <UART_SetConfig+0x4bc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d125      	bne.n	80056bc <UART_SetConfig+0x344>
 8005670:	4b71      	ldr	r3, [pc, #452]	@ (8005838 <UART_SetConfig+0x4c0>)
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005676:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800567a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800567e:	d017      	beq.n	80056b0 <UART_SetConfig+0x338>
 8005680:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005684:	d817      	bhi.n	80056b6 <UART_SetConfig+0x33e>
 8005686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568a:	d00b      	beq.n	80056a4 <UART_SetConfig+0x32c>
 800568c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005690:	d811      	bhi.n	80056b6 <UART_SetConfig+0x33e>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <UART_SetConfig+0x326>
 8005696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800569a:	d006      	beq.n	80056aa <UART_SetConfig+0x332>
 800569c:	e00b      	b.n	80056b6 <UART_SetConfig+0x33e>
 800569e:	2300      	movs	r3, #0
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e00d      	b.n	80056c0 <UART_SetConfig+0x348>
 80056a4:	2302      	movs	r3, #2
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e00a      	b.n	80056c0 <UART_SetConfig+0x348>
 80056aa:	2304      	movs	r3, #4
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e007      	b.n	80056c0 <UART_SetConfig+0x348>
 80056b0:	2308      	movs	r3, #8
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e004      	b.n	80056c0 <UART_SetConfig+0x348>
 80056b6:	2310      	movs	r3, #16
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e001      	b.n	80056c0 <UART_SetConfig+0x348>
 80056bc:	2310      	movs	r3, #16
 80056be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056c8:	d15b      	bne.n	8005782 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d828      	bhi.n	8005722 <UART_SetConfig+0x3aa>
 80056d0:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <UART_SetConfig+0x360>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005705 	.word	0x08005705
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	08005723 	.word	0x08005723
 80056e8:	08005713 	.word	0x08005713
 80056ec:	08005723 	.word	0x08005723
 80056f0:	08005723 	.word	0x08005723
 80056f4:	08005723 	.word	0x08005723
 80056f8:	0800571b 	.word	0x0800571b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fc:	f7fe fe02 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8005700:	61b8      	str	r0, [r7, #24]
        break;
 8005702:	e013      	b.n	800572c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005704:	f7fe fe12 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 8005708:	61b8      	str	r0, [r7, #24]
        break;
 800570a:	e00f      	b.n	800572c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570c:	4b4b      	ldr	r3, [pc, #300]	@ (800583c <UART_SetConfig+0x4c4>)
 800570e:	61bb      	str	r3, [r7, #24]
        break;
 8005710:	e00c      	b.n	800572c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005712:	f7fe fd25 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8005716:	61b8      	str	r0, [r7, #24]
        break;
 8005718:	e008      	b.n	800572c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571e:	61bb      	str	r3, [r7, #24]
        break;
 8005720:	e004      	b.n	800572c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	77bb      	strb	r3, [r7, #30]
        break;
 800572a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d074      	beq.n	800581c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	005a      	lsls	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	d916      	bls.n	800577c <UART_SetConfig+0x404>
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005754:	d212      	bcs.n	800577c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f023 030f 	bic.w	r3, r3, #15
 800575e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	b29b      	uxth	r3, r3
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	b29a      	uxth	r2, r3
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	4313      	orrs	r3, r2
 8005770:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	89fa      	ldrh	r2, [r7, #14]
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	e04f      	b.n	800581c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	77bb      	strb	r3, [r7, #30]
 8005780:	e04c      	b.n	800581c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d828      	bhi.n	80057da <UART_SetConfig+0x462>
 8005788:	a201      	add	r2, pc, #4	@ (adr r2, 8005790 <UART_SetConfig+0x418>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057c5 	.word	0x080057c5
 800579c:	080057db 	.word	0x080057db
 80057a0:	080057cb 	.word	0x080057cb
 80057a4:	080057db 	.word	0x080057db
 80057a8:	080057db 	.word	0x080057db
 80057ac:	080057db 	.word	0x080057db
 80057b0:	080057d3 	.word	0x080057d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b4:	f7fe fda6 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 80057b8:	61b8      	str	r0, [r7, #24]
        break;
 80057ba:	e013      	b.n	80057e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057bc:	f7fe fdb6 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 80057c0:	61b8      	str	r0, [r7, #24]
        break;
 80057c2:	e00f      	b.n	80057e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c4:	4b1d      	ldr	r3, [pc, #116]	@ (800583c <UART_SetConfig+0x4c4>)
 80057c6:	61bb      	str	r3, [r7, #24]
        break;
 80057c8:	e00c      	b.n	80057e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ca:	f7fe fcc9 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 80057ce:	61b8      	str	r0, [r7, #24]
        break;
 80057d0:	e008      	b.n	80057e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d6:	61bb      	str	r3, [r7, #24]
        break;
 80057d8:	e004      	b.n	80057e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	77bb      	strb	r3, [r7, #30]
        break;
 80057e2:	bf00      	nop
    }

    if (pclk != 0U)
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	085a      	lsrs	r2, r3, #1
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	441a      	add	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b0f      	cmp	r3, #15
 8005802:	d909      	bls.n	8005818 <UART_SetConfig+0x4a0>
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800580a:	d205      	bcs.n	8005818 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	e001      	b.n	800581c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005828:	7fbb      	ldrb	r3, [r7, #30]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40007c00 	.word	0x40007c00
 8005838:	40023800 	.word	0x40023800
 800583c:	00f42400 	.word	0x00f42400

08005840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01a      	beq.n	8005956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800593e:	d10a      	bne.n	8005956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b098      	sub	sp, #96	@ 0x60
 8005988:	af02      	add	r7, sp, #8
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005994:	f7fb fbaa 	bl	80010ec <HAL_GetTick>
 8005998:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d12e      	bne.n	8005a06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b0:	2200      	movs	r2, #0
 80059b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f88c 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d021      	beq.n	8005a06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e062      	b.n	8005acc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d149      	bne.n	8005aa8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f856 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d03c      	beq.n	8005aa8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a80:	61fa      	str	r2, [r7, #28]
 8005a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e011      	b.n	8005acc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3758      	adds	r7, #88	@ 0x58
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae4:	e04f      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d04b      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aee:	f7fb fafd 	bl	80010ec <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d302      	bcc.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e04e      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d037      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b80      	cmp	r3, #128	@ 0x80
 8005b1a:	d034      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b40      	cmp	r3, #64	@ 0x40
 8005b20:	d031      	beq.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d110      	bne.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2208      	movs	r2, #8
 8005b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f838 	bl	8005bae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2208      	movs	r2, #8
 8005b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e029      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b60:	d111      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f81e 	bl	8005bae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e00f      	b.n	8005ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d0a0      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b095      	sub	sp, #84	@ 0x54
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e6      	bne.n	8005bb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3308      	adds	r3, #8
 8005bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d118      	bne.n	8005c56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f023 0310 	bic.w	r3, r3, #16
 8005c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6979      	ldr	r1, [r7, #20]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e6      	bne.n	8005c24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c6a:	bf00      	nop
 8005c6c:	3754      	adds	r7, #84	@ 0x54
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fb4f 	bl	8005338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b088      	sub	sp, #32
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6979      	ldr	r1, [r7, #20]
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e6      	bne.n	8005caa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff fb1b 	bl	8005324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cee:	bf00      	nop
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d08:	2b84      	cmp	r3, #132	@ 0x84
 8005d0a:	d005      	beq.n	8005d18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	3303      	adds	r3, #3
 8005d16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d18:	68fb      	ldr	r3, [r7, #12]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d2a:	f000 fadb 	bl	80062e4 <vTaskStartScheduler>
  
  return osOK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d36:	b089      	sub	sp, #36	@ 0x24
 8005d38:	af04      	add	r7, sp, #16
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d020      	beq.n	8005d88 <osThreadCreate+0x54>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01c      	beq.n	8005d88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685c      	ldr	r4, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691e      	ldr	r6, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff ffc8 	bl	8005cf6 <makeFreeRtosPriority>
 8005d66:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d70:	9202      	str	r2, [sp, #8]
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	9100      	str	r1, [sp, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	4632      	mov	r2, r6
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 f8d9 	bl	8005f34 <xTaskCreateStatic>
 8005d82:	4603      	mov	r3, r0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e01c      	b.n	8005dc2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685c      	ldr	r4, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d94:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff ffaa 	bl	8005cf6 <makeFreeRtosPriority>
 8005da2:	4602      	mov	r2, r0
 8005da4:	f107 030c 	add.w	r3, r7, #12
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	9200      	str	r2, [sp, #0]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	4632      	mov	r2, r6
 8005db0:	4629      	mov	r1, r5
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 f924 	bl	8006000 <xTaskCreate>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d001      	beq.n	8005dc2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e000      	b.n	8005dc4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f103 0208 	add.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f103 0208 	add.w	r2, r3, #8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f103 0208 	add.w	r2, r3, #8
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d103      	bne.n	8005e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e00c      	b.n	8005ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3308      	adds	r3, #8
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e002      	b.n	8005e9c <vListInsert+0x2e>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d2f6      	bcs.n	8005e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6892      	ldr	r2, [r2, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6852      	ldr	r2, [r2, #4]
 8005f00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d103      	bne.n	8005f14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1e5a      	subs	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08e      	sub	sp, #56	@ 0x38
 8005f38:	af04      	add	r7, sp, #16
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10d      	bne.n	8005f64 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	b672      	cpsid	i
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	b662      	cpsie	i
 8005f5c:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	e7fd      	b.n	8005f60 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10d      	bne.n	8005f86 <xTaskCreateStatic+0x52>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	b672      	cpsid	i
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	b662      	cpsie	i
 8005f7e:	61fb      	str	r3, [r7, #28]
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	e7fd      	b.n	8005f82 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f86:	2354      	movs	r3, #84	@ 0x54
 8005f88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b54      	cmp	r3, #84	@ 0x54
 8005f8e:	d00d      	beq.n	8005fac <xTaskCreateStatic+0x78>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	b672      	cpsid	i
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	b662      	cpsie	i
 8005fa4:	61bb      	str	r3, [r7, #24]
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	e7fd      	b.n	8005fa8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01e      	beq.n	8005ff2 <xTaskCreateStatic+0xbe>
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01b      	beq.n	8005ff2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	9302      	str	r3, [sp, #8]
 8005fd4:	f107 0314 	add.w	r3, r7, #20
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f850 	bl	800608a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fec:	f000 f8d8 	bl	80061a0 <prvAddNewTaskToReadyList>
 8005ff0:	e001      	b.n	8005ff6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ff6:	697b      	ldr	r3, [r7, #20]
	}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3728      	adds	r7, #40	@ 0x28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08c      	sub	sp, #48	@ 0x30
 8006004:	af04      	add	r7, sp, #16
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fee9 	bl	8006dec <pvPortMalloc>
 800601a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006022:	2054      	movs	r0, #84	@ 0x54
 8006024:	f000 fee2 	bl	8006dec <pvPortMalloc>
 8006028:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	631a      	str	r2, [r3, #48]	@ 0x30
 8006036:	e005      	b.n	8006044 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006038:	6978      	ldr	r0, [r7, #20]
 800603a:	f000 ffa5 	bl	8006f88 <vPortFree>
 800603e:	e001      	b.n	8006044 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d017      	beq.n	800607a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	2300      	movs	r3, #0
 8006056:	9303      	str	r3, [sp, #12]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	9302      	str	r3, [sp, #8]
 800605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f80e 	bl	800608a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800606e:	69f8      	ldr	r0, [r7, #28]
 8006070:	f000 f896 	bl	80061a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006074:	2301      	movs	r3, #1
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e002      	b.n	8006080 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800607a:	f04f 33ff 	mov.w	r3, #4294967295
 800607e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006080:	69bb      	ldr	r3, [r7, #24]
	}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b088      	sub	sp, #32
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80060a2:	440b      	add	r3, r1
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00d      	beq.n	80060d8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c0:	b672      	cpsid	i
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	b662      	cpsie	i
 80060d0:	617b      	str	r3, [r7, #20]
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01f      	beq.n	800611e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e012      	b.n	800610a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	7819      	ldrb	r1, [r3, #0]
 80060ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	3334      	adds	r3, #52	@ 0x34
 80060f4:	460a      	mov	r2, r1
 80060f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	3301      	adds	r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b0f      	cmp	r3, #15
 800610e:	d9e9      	bls.n	80060e4 <prvInitialiseNewTask+0x5a>
 8006110:	e000      	b.n	8006114 <prvInitialiseNewTask+0x8a>
			{
				break;
 8006112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800611c:	e003      	b.n	8006126 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	2b06      	cmp	r3, #6
 800612a:	d901      	bls.n	8006130 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800612c:	2306      	movs	r3, #6
 800612e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006134:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800613a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	2200      	movs	r2, #0
 8006140:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fe60 	bl	8005e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	3318      	adds	r3, #24
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fe5b 	bl	8005e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800615a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615e:	f1c3 0207 	rsb	r2, r3, #7
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800616c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616e:	2200      	movs	r2, #0
 8006170:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	69b8      	ldr	r0, [r7, #24]
 8006180:	f000 fc3a 	bl	80069f8 <pxPortInitialiseStack>
 8006184:	4602      	mov	r2, r0
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800618a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006196:	bf00      	nop
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061a8:	f000 fd38 	bl	8006c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006258 <prvAddNewTaskToReadyList+0xb8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	4a29      	ldr	r2, [pc, #164]	@ (8006258 <prvAddNewTaskToReadyList+0xb8>)
 80061b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061b6:	4b29      	ldr	r3, [pc, #164]	@ (800625c <prvAddNewTaskToReadyList+0xbc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061be:	4a27      	ldr	r2, [pc, #156]	@ (800625c <prvAddNewTaskToReadyList+0xbc>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061c4:	4b24      	ldr	r3, [pc, #144]	@ (8006258 <prvAddNewTaskToReadyList+0xb8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d110      	bne.n	80061ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061cc:	f000 fad0 	bl	8006770 <prvInitialiseTaskLists>
 80061d0:	e00d      	b.n	80061ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061d2:	4b23      	ldr	r3, [pc, #140]	@ (8006260 <prvAddNewTaskToReadyList+0xc0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061da:	4b20      	ldr	r3, [pc, #128]	@ (800625c <prvAddNewTaskToReadyList+0xbc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d802      	bhi.n	80061ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061e8:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <prvAddNewTaskToReadyList+0xbc>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006264 <prvAddNewTaskToReadyList+0xc4>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <prvAddNewTaskToReadyList+0xc4>)
 80061f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fc:	2201      	movs	r2, #1
 80061fe:	409a      	lsls	r2, r3
 8006200:	4b19      	ldr	r3, [pc, #100]	@ (8006268 <prvAddNewTaskToReadyList+0xc8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4313      	orrs	r3, r2
 8006206:	4a18      	ldr	r2, [pc, #96]	@ (8006268 <prvAddNewTaskToReadyList+0xc8>)
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4a15      	ldr	r2, [pc, #84]	@ (800626c <prvAddNewTaskToReadyList+0xcc>)
 8006218:	441a      	add	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7ff fe00 	bl	8005e26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006226:	f000 fd2f 	bl	8006c88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800622a:	4b0d      	ldr	r3, [pc, #52]	@ (8006260 <prvAddNewTaskToReadyList+0xc0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006232:	4b0a      	ldr	r3, [pc, #40]	@ (800625c <prvAddNewTaskToReadyList+0xbc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623c:	429a      	cmp	r2, r3
 800623e:	d207      	bcs.n	8006250 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006240:	4b0b      	ldr	r3, [pc, #44]	@ (8006270 <prvAddNewTaskToReadyList+0xd0>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000534 	.word	0x20000534
 800625c:	20000434 	.word	0x20000434
 8006260:	20000540 	.word	0x20000540
 8006264:	20000550 	.word	0x20000550
 8006268:	2000053c 	.word	0x2000053c
 800626c:	20000438 	.word	0x20000438
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01a      	beq.n	80062bc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006286:	4b15      	ldr	r3, [pc, #84]	@ (80062dc <vTaskDelay+0x68>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <vTaskDelay+0x36>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	b672      	cpsid	i
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	b662      	cpsie	i
 80062a2:	60bb      	str	r3, [r7, #8]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80062aa:	f000 f881 	bl	80063b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062ae:	2100      	movs	r1, #0
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fb3b 	bl	800692c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062b6:	f000 f889 	bl	80063cc <xTaskResumeAll>
 80062ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d107      	bne.n	80062d2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80062c2:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <vTaskDelay+0x6c>)
 80062c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	2000055c 	.word	0x2000055c
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	@ 0x28
 80062e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062f2:	463a      	mov	r2, r7
 80062f4:	1d39      	adds	r1, r7, #4
 80062f6:	f107 0308 	add.w	r3, r7, #8
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa f970 	bl	80005e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	9202      	str	r2, [sp, #8]
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	2300      	movs	r3, #0
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	2300      	movs	r3, #0
 8006310:	460a      	mov	r2, r1
 8006312:	4921      	ldr	r1, [pc, #132]	@ (8006398 <vTaskStartScheduler+0xb4>)
 8006314:	4821      	ldr	r0, [pc, #132]	@ (800639c <vTaskStartScheduler+0xb8>)
 8006316:	f7ff fe0d 	bl	8005f34 <xTaskCreateStatic>
 800631a:	4603      	mov	r3, r0
 800631c:	4a20      	ldr	r2, [pc, #128]	@ (80063a0 <vTaskStartScheduler+0xbc>)
 800631e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006320:	4b1f      	ldr	r3, [pc, #124]	@ (80063a0 <vTaskStartScheduler+0xbc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	e001      	b.n	8006332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d118      	bne.n	800636a <vTaskStartScheduler+0x86>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	b672      	cpsid	i
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	b662      	cpsie	i
 800634c:	613b      	str	r3, [r7, #16]
}
 800634e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006350:	4b14      	ldr	r3, [pc, #80]	@ (80063a4 <vTaskStartScheduler+0xc0>)
 8006352:	f04f 32ff 	mov.w	r2, #4294967295
 8006356:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006358:	4b13      	ldr	r3, [pc, #76]	@ (80063a8 <vTaskStartScheduler+0xc4>)
 800635a:	2201      	movs	r2, #1
 800635c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800635e:	4b13      	ldr	r3, [pc, #76]	@ (80063ac <vTaskStartScheduler+0xc8>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006364:	f000 fbdc 	bl	8006b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006368:	e011      	b.n	800638e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d10d      	bne.n	800638e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	b672      	cpsid	i
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	b662      	cpsie	i
 8006386:	60fb      	str	r3, [r7, #12]
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	e7fd      	b.n	800638a <vTaskStartScheduler+0xa6>
}
 800638e:	bf00      	nop
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	08007bec 	.word	0x08007bec
 800639c:	08006741 	.word	0x08006741
 80063a0:	20000558 	.word	0x20000558
 80063a4:	20000554 	.word	0x20000554
 80063a8:	20000540 	.word	0x20000540
 80063ac:	20000538 	.word	0x20000538

080063b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063b4:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <vTaskSuspendAll+0x18>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	4a03      	ldr	r2, [pc, #12]	@ (80063c8 <vTaskSuspendAll+0x18>)
 80063bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80063be:	bf00      	nop
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	2000055c 	.word	0x2000055c

080063cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063da:	4b43      	ldr	r3, [pc, #268]	@ (80064e8 <xTaskResumeAll+0x11c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10d      	bne.n	80063fe <xTaskResumeAll+0x32>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	b672      	cpsid	i
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	b662      	cpsie	i
 80063f6:	603b      	str	r3, [r7, #0]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063fe:	f000 fc0d 	bl	8006c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006402:	4b39      	ldr	r3, [pc, #228]	@ (80064e8 <xTaskResumeAll+0x11c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3b01      	subs	r3, #1
 8006408:	4a37      	ldr	r2, [pc, #220]	@ (80064e8 <xTaskResumeAll+0x11c>)
 800640a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640c:	4b36      	ldr	r3, [pc, #216]	@ (80064e8 <xTaskResumeAll+0x11c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d161      	bne.n	80064d8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006414:	4b35      	ldr	r3, [pc, #212]	@ (80064ec <xTaskResumeAll+0x120>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d05d      	beq.n	80064d8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800641c:	e02e      	b.n	800647c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641e:	4b34      	ldr	r3, [pc, #208]	@ (80064f0 <xTaskResumeAll+0x124>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3318      	adds	r3, #24
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fd58 	bl	8005ee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fd53 	bl	8005ee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	2201      	movs	r2, #1
 8006440:	409a      	lsls	r2, r3
 8006442:	4b2c      	ldr	r3, [pc, #176]	@ (80064f4 <xTaskResumeAll+0x128>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	4a2a      	ldr	r2, [pc, #168]	@ (80064f4 <xTaskResumeAll+0x128>)
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4a27      	ldr	r2, [pc, #156]	@ (80064f8 <xTaskResumeAll+0x12c>)
 800645a:	441a      	add	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f7ff fcdf 	bl	8005e26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646c:	4b23      	ldr	r3, [pc, #140]	@ (80064fc <xTaskResumeAll+0x130>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	429a      	cmp	r2, r3
 8006474:	d302      	bcc.n	800647c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006476:	4b22      	ldr	r3, [pc, #136]	@ (8006500 <xTaskResumeAll+0x134>)
 8006478:	2201      	movs	r2, #1
 800647a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800647c:	4b1c      	ldr	r3, [pc, #112]	@ (80064f0 <xTaskResumeAll+0x124>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1cc      	bne.n	800641e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800648a:	f000 fa11 	bl	80068b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800648e:	4b1d      	ldr	r3, [pc, #116]	@ (8006504 <xTaskResumeAll+0x138>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800649a:	f000 f837 	bl	800650c <xTaskIncrementTick>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80064a4:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <xTaskResumeAll+0x134>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f1      	bne.n	800649a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80064b6:	4b13      	ldr	r3, [pc, #76]	@ (8006504 <xTaskResumeAll+0x138>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064bc:	4b10      	ldr	r3, [pc, #64]	@ (8006500 <xTaskResumeAll+0x134>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <xTaskResumeAll+0x13c>)
 80064ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064d8:	f000 fbd6 	bl	8006c88 <vPortExitCritical>

	return xAlreadyYielded;
 80064dc:	68bb      	ldr	r3, [r7, #8]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	2000055c 	.word	0x2000055c
 80064ec:	20000534 	.word	0x20000534
 80064f0:	200004f4 	.word	0x200004f4
 80064f4:	2000053c 	.word	0x2000053c
 80064f8:	20000438 	.word	0x20000438
 80064fc:	20000434 	.word	0x20000434
 8006500:	20000548 	.word	0x20000548
 8006504:	20000544 	.word	0x20000544
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006516:	4b50      	ldr	r3, [pc, #320]	@ (8006658 <xTaskIncrementTick+0x14c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 808b 	bne.w	8006636 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006520:	4b4e      	ldr	r3, [pc, #312]	@ (800665c <xTaskIncrementTick+0x150>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006528:	4a4c      	ldr	r2, [pc, #304]	@ (800665c <xTaskIncrementTick+0x150>)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d123      	bne.n	800657c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006534:	4b4a      	ldr	r3, [pc, #296]	@ (8006660 <xTaskIncrementTick+0x154>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <xTaskIncrementTick+0x4e>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	b672      	cpsid	i
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	b662      	cpsie	i
 8006552:	603b      	str	r3, [r7, #0]
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	e7fd      	b.n	8006556 <xTaskIncrementTick+0x4a>
 800655a:	4b41      	ldr	r3, [pc, #260]	@ (8006660 <xTaskIncrementTick+0x154>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	4b40      	ldr	r3, [pc, #256]	@ (8006664 <xTaskIncrementTick+0x158>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a3e      	ldr	r2, [pc, #248]	@ (8006660 <xTaskIncrementTick+0x154>)
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4a3e      	ldr	r2, [pc, #248]	@ (8006664 <xTaskIncrementTick+0x158>)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	4b3e      	ldr	r3, [pc, #248]	@ (8006668 <xTaskIncrementTick+0x15c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a3c      	ldr	r2, [pc, #240]	@ (8006668 <xTaskIncrementTick+0x15c>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	f000 f99a 	bl	80068b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800657c:	4b3b      	ldr	r3, [pc, #236]	@ (800666c <xTaskIncrementTick+0x160>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	429a      	cmp	r2, r3
 8006584:	d348      	bcc.n	8006618 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006586:	4b36      	ldr	r3, [pc, #216]	@ (8006660 <xTaskIncrementTick+0x154>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006590:	4b36      	ldr	r3, [pc, #216]	@ (800666c <xTaskIncrementTick+0x160>)
 8006592:	f04f 32ff 	mov.w	r2, #4294967295
 8006596:	601a      	str	r2, [r3, #0]
					break;
 8006598:	e03e      	b.n	8006618 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800659a:	4b31      	ldr	r3, [pc, #196]	@ (8006660 <xTaskIncrementTick+0x154>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d203      	bcs.n	80065ba <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065b2:	4a2e      	ldr	r2, [pc, #184]	@ (800666c <xTaskIncrementTick+0x160>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065b8:	e02e      	b.n	8006618 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	3304      	adds	r3, #4
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fc8e 	bl	8005ee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	3318      	adds	r3, #24
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fc85 	bl	8005ee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	2201      	movs	r2, #1
 80065dc:	409a      	lsls	r2, r3
 80065de:	4b24      	ldr	r3, [pc, #144]	@ (8006670 <xTaskIncrementTick+0x164>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	4a22      	ldr	r2, [pc, #136]	@ (8006670 <xTaskIncrementTick+0x164>)
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <xTaskIncrementTick+0x168>)
 80065f6:	441a      	add	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f7ff fc11 	bl	8005e26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006608:	4b1b      	ldr	r3, [pc, #108]	@ (8006678 <xTaskIncrementTick+0x16c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	429a      	cmp	r2, r3
 8006610:	d3b9      	bcc.n	8006586 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006616:	e7b6      	b.n	8006586 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006618:	4b17      	ldr	r3, [pc, #92]	@ (8006678 <xTaskIncrementTick+0x16c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661e:	4915      	ldr	r1, [pc, #84]	@ (8006674 <xTaskIncrementTick+0x168>)
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d907      	bls.n	8006640 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e004      	b.n	8006640 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006636:	4b11      	ldr	r3, [pc, #68]	@ (800667c <xTaskIncrementTick+0x170>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	4a0f      	ldr	r2, [pc, #60]	@ (800667c <xTaskIncrementTick+0x170>)
 800663e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006640:	4b0f      	ldr	r3, [pc, #60]	@ (8006680 <xTaskIncrementTick+0x174>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800664c:	697b      	ldr	r3, [r7, #20]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	2000055c 	.word	0x2000055c
 800665c:	20000538 	.word	0x20000538
 8006660:	200004ec 	.word	0x200004ec
 8006664:	200004f0 	.word	0x200004f0
 8006668:	2000054c 	.word	0x2000054c
 800666c:	20000554 	.word	0x20000554
 8006670:	2000053c 	.word	0x2000053c
 8006674:	20000438 	.word	0x20000438
 8006678:	20000434 	.word	0x20000434
 800667c:	20000544 	.word	0x20000544
 8006680:	20000548 	.word	0x20000548

08006684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800668a:	4b28      	ldr	r3, [pc, #160]	@ (800672c <vTaskSwitchContext+0xa8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006692:	4b27      	ldr	r3, [pc, #156]	@ (8006730 <vTaskSwitchContext+0xac>)
 8006694:	2201      	movs	r2, #1
 8006696:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006698:	e042      	b.n	8006720 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800669a:	4b25      	ldr	r3, [pc, #148]	@ (8006730 <vTaskSwitchContext+0xac>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a0:	4b24      	ldr	r3, [pc, #144]	@ (8006734 <vTaskSwitchContext+0xb0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	fab3 f383 	clz	r3, r3
 80066ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80066ae:	7afb      	ldrb	r3, [r7, #11]
 80066b0:	f1c3 031f 	rsb	r3, r3, #31
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	4920      	ldr	r1, [pc, #128]	@ (8006738 <vTaskSwitchContext+0xb4>)
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10d      	bne.n	80066e6 <vTaskSwitchContext+0x62>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	b672      	cpsid	i
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	b662      	cpsie	i
 80066de:	607b      	str	r3, [r7, #4]
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	e7fd      	b.n	80066e2 <vTaskSwitchContext+0x5e>
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4a11      	ldr	r2, [pc, #68]	@ (8006738 <vTaskSwitchContext+0xb4>)
 80066f2:	4413      	add	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3308      	adds	r3, #8
 8006708:	429a      	cmp	r2, r3
 800670a:	d104      	bne.n	8006716 <vTaskSwitchContext+0x92>
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a07      	ldr	r2, [pc, #28]	@ (800673c <vTaskSwitchContext+0xb8>)
 800671e:	6013      	str	r3, [r2, #0]
}
 8006720:	bf00      	nop
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	2000055c 	.word	0x2000055c
 8006730:	20000548 	.word	0x20000548
 8006734:	2000053c 	.word	0x2000053c
 8006738:	20000438 	.word	0x20000438
 800673c:	20000434 	.word	0x20000434

08006740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006748:	f000 f852 	bl	80067f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <prvIdleTask+0x28>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d9f9      	bls.n	8006748 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006754:	4b05      	ldr	r3, [pc, #20]	@ (800676c <prvIdleTask+0x2c>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006764:	e7f0      	b.n	8006748 <prvIdleTask+0x8>
 8006766:	bf00      	nop
 8006768:	20000438 	.word	0x20000438
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	e00c      	b.n	8006796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a12      	ldr	r2, [pc, #72]	@ (80067d0 <prvInitialiseTaskLists+0x60>)
 8006788:	4413      	add	r3, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fb1e 	bl	8005dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3301      	adds	r3, #1
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b06      	cmp	r3, #6
 800679a:	d9ef      	bls.n	800677c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800679c:	480d      	ldr	r0, [pc, #52]	@ (80067d4 <prvInitialiseTaskLists+0x64>)
 800679e:	f7ff fb15 	bl	8005dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067a2:	480d      	ldr	r0, [pc, #52]	@ (80067d8 <prvInitialiseTaskLists+0x68>)
 80067a4:	f7ff fb12 	bl	8005dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067a8:	480c      	ldr	r0, [pc, #48]	@ (80067dc <prvInitialiseTaskLists+0x6c>)
 80067aa:	f7ff fb0f 	bl	8005dcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ae:	480c      	ldr	r0, [pc, #48]	@ (80067e0 <prvInitialiseTaskLists+0x70>)
 80067b0:	f7ff fb0c 	bl	8005dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067b4:	480b      	ldr	r0, [pc, #44]	@ (80067e4 <prvInitialiseTaskLists+0x74>)
 80067b6:	f7ff fb09 	bl	8005dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <prvInitialiseTaskLists+0x78>)
 80067bc:	4a05      	ldr	r2, [pc, #20]	@ (80067d4 <prvInitialiseTaskLists+0x64>)
 80067be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067c0:	4b0a      	ldr	r3, [pc, #40]	@ (80067ec <prvInitialiseTaskLists+0x7c>)
 80067c2:	4a05      	ldr	r2, [pc, #20]	@ (80067d8 <prvInitialiseTaskLists+0x68>)
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000438 	.word	0x20000438
 80067d4:	200004c4 	.word	0x200004c4
 80067d8:	200004d8 	.word	0x200004d8
 80067dc:	200004f4 	.word	0x200004f4
 80067e0:	20000508 	.word	0x20000508
 80067e4:	20000520 	.word	0x20000520
 80067e8:	200004ec 	.word	0x200004ec
 80067ec:	200004f0 	.word	0x200004f0

080067f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f6:	e019      	b.n	800682c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067f8:	f000 fa10 	bl	8006c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fc:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <prvCheckTasksWaitingTermination+0x50>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fb69 	bl	8005ee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3b01      	subs	r3, #1
 8006814:	4a0b      	ldr	r2, [pc, #44]	@ (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006818:	4b0b      	ldr	r3, [pc, #44]	@ (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	4a0a      	ldr	r2, [pc, #40]	@ (8006848 <prvCheckTasksWaitingTermination+0x58>)
 8006820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006822:	f000 fa31 	bl	8006c88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f810 	bl	800684c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800682c:	4b06      	ldr	r3, [pc, #24]	@ (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e1      	bne.n	80067f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000508 	.word	0x20000508
 8006844:	20000534 	.word	0x20000534
 8006848:	2000051c 	.word	0x2000051c

0800684c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fb90 	bl	8006f88 <vPortFree>
				vPortFree( pxTCB );
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fb8d 	bl	8006f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800686e:	e01b      	b.n	80068a8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006876:	2b01      	cmp	r3, #1
 8006878:	d103      	bne.n	8006882 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fb84 	bl	8006f88 <vPortFree>
	}
 8006880:	e012      	b.n	80068a8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006888:	2b02      	cmp	r3, #2
 800688a:	d00d      	beq.n	80068a8 <prvDeleteTCB+0x5c>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006890:	b672      	cpsid	i
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	b662      	cpsie	i
 80068a0:	60fb      	str	r3, [r7, #12]
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	e7fd      	b.n	80068a4 <prvDeleteTCB+0x58>
	}
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068b6:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <prvResetNextTaskUnblockTime+0x38>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068c0:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <prvResetNextTaskUnblockTime+0x3c>)
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068c8:	e008      	b.n	80068dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ca:	4b07      	ldr	r3, [pc, #28]	@ (80068e8 <prvResetNextTaskUnblockTime+0x38>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	4a04      	ldr	r2, [pc, #16]	@ (80068ec <prvResetNextTaskUnblockTime+0x3c>)
 80068da:	6013      	str	r3, [r2, #0]
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	200004ec 	.word	0x200004ec
 80068ec:	20000554 	.word	0x20000554

080068f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <xTaskGetSchedulerState+0x34>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068fe:	2301      	movs	r3, #1
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	e008      	b.n	8006916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006904:	4b08      	ldr	r3, [pc, #32]	@ (8006928 <xTaskGetSchedulerState+0x38>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800690c:	2302      	movs	r3, #2
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	e001      	b.n	8006916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006916:	687b      	ldr	r3, [r7, #4]
	}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	20000540 	.word	0x20000540
 8006928:	2000055c 	.word	0x2000055c

0800692c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006936:	4b29      	ldr	r3, [pc, #164]	@ (80069dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800693c:	4b28      	ldr	r3, [pc, #160]	@ (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3304      	adds	r3, #4
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff facc 	bl	8005ee0 <uxListRemove>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800694e:	4b24      	ldr	r3, [pc, #144]	@ (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006954:	2201      	movs	r2, #1
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43da      	mvns	r2, r3
 800695c:	4b21      	ldr	r3, [pc, #132]	@ (80069e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4013      	ands	r3, r2
 8006962:	4a20      	ldr	r2, [pc, #128]	@ (80069e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006964:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d10a      	bne.n	8006984 <prvAddCurrentTaskToDelayedList+0x58>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006974:	4b1a      	ldr	r3, [pc, #104]	@ (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	481a      	ldr	r0, [pc, #104]	@ (80069e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800697e:	f7ff fa52 	bl	8005e26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006982:	e026      	b.n	80069d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800698c:	4b14      	ldr	r3, [pc, #80]	@ (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	429a      	cmp	r2, r3
 800699a:	d209      	bcs.n	80069b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699c:	4b13      	ldr	r3, [pc, #76]	@ (80069ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	4b0f      	ldr	r3, [pc, #60]	@ (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f7ff fa60 	bl	8005e6e <vListInsert>
}
 80069ae:	e010      	b.n	80069d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b0:	4b0f      	ldr	r3, [pc, #60]	@ (80069f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f7ff fa56 	bl	8005e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069c2:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d202      	bcs.n	80069d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069cc:	4a09      	ldr	r2, [pc, #36]	@ (80069f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6013      	str	r3, [r2, #0]
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20000538 	.word	0x20000538
 80069e0:	20000434 	.word	0x20000434
 80069e4:	2000053c 	.word	0x2000053c
 80069e8:	20000520 	.word	0x20000520
 80069ec:	200004f0 	.word	0x200004f0
 80069f0:	200004ec 	.word	0x200004ec
 80069f4:	20000554 	.word	0x20000554

080069f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3b04      	subs	r3, #4
 8006a08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3b04      	subs	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f023 0201 	bic.w	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3b04      	subs	r3, #4
 8006a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a28:	4a0c      	ldr	r2, [pc, #48]	@ (8006a5c <pxPortInitialiseStack+0x64>)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3b14      	subs	r3, #20
 8006a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3b04      	subs	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f06f 0202 	mvn.w	r2, #2
 8006a46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3b20      	subs	r3, #32
 8006a4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	08006a61 	.word	0x08006a61

08006a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a6a:	4b15      	ldr	r3, [pc, #84]	@ (8006ac0 <prvTaskExitError+0x60>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d00d      	beq.n	8006a90 <prvTaskExitError+0x30>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	b672      	cpsid	i
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	b662      	cpsie	i
 8006a88:	60fb      	str	r3, [r7, #12]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <prvTaskExitError+0x2c>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a94:	b672      	cpsid	i
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	b662      	cpsie	i
 8006aa4:	60bb      	str	r3, [r7, #8]
}
 8006aa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006aa8:	bf00      	nop
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0fc      	beq.n	8006aaa <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	2000000c 	.word	0x2000000c
	...

08006ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ad0:	4b07      	ldr	r3, [pc, #28]	@ (8006af0 <pxCurrentTCBConst2>)
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	6808      	ldr	r0, [r1, #0]
 8006ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	f380 8809 	msr	PSP, r0
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8811 	msr	BASEPRI, r0
 8006aea:	4770      	bx	lr
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst2>:
 8006af0:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006af8:	4808      	ldr	r0, [pc, #32]	@ (8006b1c <prvPortStartFirstTask+0x24>)
 8006afa:	6800      	ldr	r0, [r0, #0]
 8006afc:	6800      	ldr	r0, [r0, #0]
 8006afe:	f380 8808 	msr	MSP, r0
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f380 8814 	msr	CONTROL, r0
 8006b0a:	b662      	cpsie	i
 8006b0c:	b661      	cpsie	f
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	df00      	svc	0
 8006b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b1a:	bf00      	nop
 8006b1c:	e000ed08 	.word	0xe000ed08

08006b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b26:	4b37      	ldr	r3, [pc, #220]	@ (8006c04 <xPortStartScheduler+0xe4>)
 8006b28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	22ff      	movs	r2, #255	@ 0xff
 8006b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c08 <xPortStartScheduler+0xe8>)
 8006b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006b50:	2207      	movs	r2, #7
 8006b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b54:	e009      	b.n	8006b6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b56:	4b2d      	ldr	r3, [pc, #180]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b72:	2b80      	cmp	r3, #128	@ 0x80
 8006b74:	d0ef      	beq.n	8006b56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b76:	4b25      	ldr	r3, [pc, #148]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f1c3 0307 	rsb	r3, r3, #7
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d00d      	beq.n	8006b9e <xPortStartScheduler+0x7e>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	b672      	cpsid	i
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	b662      	cpsie	i
 8006b96:	60bb      	str	r3, [r7, #8]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	021b      	lsls	r3, r3, #8
 8006ba4:	4a19      	ldr	r2, [pc, #100]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ba8:	4b18      	ldr	r3, [pc, #96]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bb0:	4a16      	ldr	r2, [pc, #88]	@ (8006c0c <xPortStartScheduler+0xec>)
 8006bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bbc:	4b14      	ldr	r3, [pc, #80]	@ (8006c10 <xPortStartScheduler+0xf0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a13      	ldr	r2, [pc, #76]	@ (8006c10 <xPortStartScheduler+0xf0>)
 8006bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bc8:	4b11      	ldr	r3, [pc, #68]	@ (8006c10 <xPortStartScheduler+0xf0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a10      	ldr	r2, [pc, #64]	@ (8006c10 <xPortStartScheduler+0xf0>)
 8006bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bd4:	f000 f8dc 	bl	8006d90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c14 <xPortStartScheduler+0xf4>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bde:	f000 f8fb 	bl	8006dd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006be2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <xPortStartScheduler+0xf8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <xPortStartScheduler+0xf8>)
 8006be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bee:	f7ff ff83 	bl	8006af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bf2:	f7ff fd47 	bl	8006684 <vTaskSwitchContext>
	prvTaskExitError();
 8006bf6:	f7ff ff33 	bl	8006a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000e400 	.word	0xe000e400
 8006c08:	20000560 	.word	0x20000560
 8006c0c:	20000564 	.word	0x20000564
 8006c10:	e000ed20 	.word	0xe000ed20
 8006c14:	2000000c 	.word	0x2000000c
 8006c18:	e000ef34 	.word	0xe000ef34

08006c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	b672      	cpsid	i
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	b662      	cpsie	i
 8006c36:	607b      	str	r3, [r7, #4]
}
 8006c38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c3a:	4b11      	ldr	r3, [pc, #68]	@ (8006c80 <vPortEnterCritical+0x64>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	4a0f      	ldr	r2, [pc, #60]	@ (8006c80 <vPortEnterCritical+0x64>)
 8006c42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c44:	4b0e      	ldr	r3, [pc, #56]	@ (8006c80 <vPortEnterCritical+0x64>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d112      	bne.n	8006c72 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <vPortEnterCritical+0x68>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <vPortEnterCritical+0x56>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	b672      	cpsid	i
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	b662      	cpsie	i
 8006c6a:	603b      	str	r3, [r7, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	e7fd      	b.n	8006c6e <vPortEnterCritical+0x52>
	}
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	2000000c 	.word	0x2000000c
 8006c84:	e000ed04 	.word	0xe000ed04

08006c88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c8e:	4b13      	ldr	r3, [pc, #76]	@ (8006cdc <vPortExitCritical+0x54>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10d      	bne.n	8006cb2 <vPortExitCritical+0x2a>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	b672      	cpsid	i
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	b662      	cpsie	i
 8006caa:	607b      	str	r3, [r7, #4]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <vPortExitCritical+0x54>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	4a08      	ldr	r2, [pc, #32]	@ (8006cdc <vPortExitCritical+0x54>)
 8006cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cbc:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <vPortExitCritical+0x54>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <vPortExitCritical+0x48>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	2000000c 	.word	0x2000000c

08006ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ce0:	f3ef 8009 	mrs	r0, PSP
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	4b15      	ldr	r3, [pc, #84]	@ (8006d40 <pxCurrentTCBConst>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f01e 0f10 	tst.w	lr, #16
 8006cf0:	bf08      	it	eq
 8006cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	6010      	str	r0, [r2, #0]
 8006cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d04:	b672      	cpsid	i
 8006d06:	f380 8811 	msr	BASEPRI, r0
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	b662      	cpsie	i
 8006d14:	f7ff fcb6 	bl	8006684 <vTaskSwitchContext>
 8006d18:	f04f 0000 	mov.w	r0, #0
 8006d1c:	f380 8811 	msr	BASEPRI, r0
 8006d20:	bc09      	pop	{r0, r3}
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f01e 0f10 	tst.w	lr, #16
 8006d2e:	bf08      	it	eq
 8006d30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d34:	f380 8809 	msr	PSP, r0
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop

08006d40 <pxCurrentTCBConst>:
 8006d40:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	b672      	cpsid	i
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	b662      	cpsie	i
 8006d62:	607b      	str	r3, [r7, #4]
}
 8006d64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d66:	f7ff fbd1 	bl	800650c <xTaskIncrementTick>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d70:	4b06      	ldr	r3, [pc, #24]	@ (8006d8c <xPortSysTickHandler+0x44>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	f383 8811 	msr	BASEPRI, r3
}
 8006d82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d94:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <vPortSetupTimerInterrupt+0x34>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc8 <vPortSetupTimerInterrupt+0x38>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006da0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <vPortSetupTimerInterrupt+0x3c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd0 <vPortSetupTimerInterrupt+0x40>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	099b      	lsrs	r3, r3, #6
 8006dac:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <vPortSetupTimerInterrupt+0x44>)
 8006dae:	3b01      	subs	r3, #1
 8006db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006db2:	4b04      	ldr	r3, [pc, #16]	@ (8006dc4 <vPortSetupTimerInterrupt+0x34>)
 8006db4:	2207      	movs	r2, #7
 8006db6:	601a      	str	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	e000e010 	.word	0xe000e010
 8006dc8:	e000e018 	.word	0xe000e018
 8006dcc:	20000000 	.word	0x20000000
 8006dd0:	10624dd3 	.word	0x10624dd3
 8006dd4:	e000e014 	.word	0xe000e014

08006dd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dd8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006de8 <vPortEnableVFP+0x10>
 8006ddc:	6801      	ldr	r1, [r0, #0]
 8006dde:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006de2:	6001      	str	r1, [r0, #0]
 8006de4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006de6:	bf00      	nop
 8006de8:	e000ed88 	.word	0xe000ed88

08006dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	@ 0x28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006df8:	f7ff fada 	bl	80063b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8006f74 <pvPortMalloc+0x188>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e04:	f000 f920 	bl	8007048 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e08:	4b5b      	ldr	r3, [pc, #364]	@ (8006f78 <pvPortMalloc+0x18c>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 8094 	bne.w	8006f3e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d020      	beq.n	8006e5e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d017      	beq.n	8006e5e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	3308      	adds	r3, #8
 8006e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00d      	beq.n	8006e5e <pvPortMalloc+0x72>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e46:	b672      	cpsid	i
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	b662      	cpsie	i
 8006e56:	617b      	str	r3, [r7, #20]
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	e7fd      	b.n	8006e5a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d06c      	beq.n	8006f3e <pvPortMalloc+0x152>
 8006e64:	4b45      	ldr	r3, [pc, #276]	@ (8006f7c <pvPortMalloc+0x190>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d867      	bhi.n	8006f3e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e6e:	4b44      	ldr	r3, [pc, #272]	@ (8006f80 <pvPortMalloc+0x194>)
 8006e70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e72:	4b43      	ldr	r3, [pc, #268]	@ (8006f80 <pvPortMalloc+0x194>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e78:	e004      	b.n	8006e84 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d903      	bls.n	8006e96 <pvPortMalloc+0xaa>
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f1      	bne.n	8006e7a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e96:	4b37      	ldr	r3, [pc, #220]	@ (8006f74 <pvPortMalloc+0x188>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d04e      	beq.n	8006f3e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	4413      	add	r3, r2
 8006ea8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	1ad2      	subs	r2, r2, r3
 8006eba:	2308      	movs	r3, #8
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d922      	bls.n	8006f08 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00d      	beq.n	8006ef0 <pvPortMalloc+0x104>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	b672      	cpsid	i
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	b662      	cpsie	i
 8006ee8:	613b      	str	r3, [r7, #16]
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	e7fd      	b.n	8006eec <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f000 f902 	bl	800710c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f08:	4b1c      	ldr	r3, [pc, #112]	@ (8006f7c <pvPortMalloc+0x190>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1a      	ldr	r2, [pc, #104]	@ (8006f7c <pvPortMalloc+0x190>)
 8006f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f16:	4b19      	ldr	r3, [pc, #100]	@ (8006f7c <pvPortMalloc+0x190>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <pvPortMalloc+0x198>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d203      	bcs.n	8006f2a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f22:	4b16      	ldr	r3, [pc, #88]	@ (8006f7c <pvPortMalloc+0x190>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a17      	ldr	r2, [pc, #92]	@ (8006f84 <pvPortMalloc+0x198>)
 8006f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4b12      	ldr	r3, [pc, #72]	@ (8006f78 <pvPortMalloc+0x18c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f3e:	f7ff fa45 	bl	80063cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00d      	beq.n	8006f68 <pvPortMalloc+0x17c>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	b672      	cpsid	i
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	b662      	cpsie	i
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <pvPortMalloc+0x178>
	return pvReturn;
 8006f68:	69fb      	ldr	r3, [r7, #28]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3728      	adds	r7, #40	@ 0x28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20004170 	.word	0x20004170
 8006f78:	2000417c 	.word	0x2000417c
 8006f7c:	20004174 	.word	0x20004174
 8006f80:	20004168 	.word	0x20004168
 8006f84:	20004178 	.word	0x20004178

08006f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d04e      	beq.n	8007038 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	425b      	negs	r3, r3
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b24      	ldr	r3, [pc, #144]	@ (8007040 <vPortFree+0xb8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10d      	bne.n	8006fd2 <vPortFree+0x4a>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	b672      	cpsid	i
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	b662      	cpsie	i
 8006fca:	60fb      	str	r3, [r7, #12]
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	e7fd      	b.n	8006fce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00d      	beq.n	8006ff6 <vPortFree+0x6e>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	b672      	cpsid	i
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	b662      	cpsie	i
 8006fee:	60bb      	str	r3, [r7, #8]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <vPortFree+0xb8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4013      	ands	r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d019      	beq.n	8007038 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d115      	bne.n	8007038 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <vPortFree+0xb8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	43db      	mvns	r3, r3
 8007016:	401a      	ands	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800701c:	f7ff f9c8 	bl	80063b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <vPortFree+0xbc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4413      	add	r3, r2
 800702a:	4a06      	ldr	r2, [pc, #24]	@ (8007044 <vPortFree+0xbc>)
 800702c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800702e:	6938      	ldr	r0, [r7, #16]
 8007030:	f000 f86c 	bl	800710c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007034:	f7ff f9ca 	bl	80063cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007038:	bf00      	nop
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	2000417c 	.word	0x2000417c
 8007044:	20004174 	.word	0x20004174

08007048 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800704e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007052:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007054:	4b27      	ldr	r3, [pc, #156]	@ (80070f4 <prvHeapInit+0xac>)
 8007056:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00c      	beq.n	800707c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3307      	adds	r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0307 	bic.w	r3, r3, #7
 800706e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	4a1f      	ldr	r2, [pc, #124]	@ (80070f4 <prvHeapInit+0xac>)
 8007078:	4413      	add	r3, r2
 800707a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007080:	4a1d      	ldr	r2, [pc, #116]	@ (80070f8 <prvHeapInit+0xb0>)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007086:	4b1c      	ldr	r3, [pc, #112]	@ (80070f8 <prvHeapInit+0xb0>)
 8007088:	2200      	movs	r2, #0
 800708a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	4413      	add	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007094:	2208      	movs	r2, #8
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0307 	bic.w	r3, r3, #7
 80070a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4a15      	ldr	r2, [pc, #84]	@ (80070fc <prvHeapInit+0xb4>)
 80070a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070aa:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <prvHeapInit+0xb4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070b2:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <prvHeapInit+0xb4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <prvHeapInit+0xb4>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007100 <prvHeapInit+0xb8>)
 80070d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	4a09      	ldr	r2, [pc, #36]	@ (8007104 <prvHeapInit+0xbc>)
 80070de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070e0:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <prvHeapInit+0xc0>)
 80070e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070e6:	601a      	str	r2, [r3, #0]
}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	20000568 	.word	0x20000568
 80070f8:	20004168 	.word	0x20004168
 80070fc:	20004170 	.word	0x20004170
 8007100:	20004178 	.word	0x20004178
 8007104:	20004174 	.word	0x20004174
 8007108:	2000417c 	.word	0x2000417c

0800710c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007114:	4b28      	ldr	r3, [pc, #160]	@ (80071b8 <prvInsertBlockIntoFreeList+0xac>)
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e002      	b.n	8007120 <prvInsertBlockIntoFreeList+0x14>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d8f7      	bhi.n	800711a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	4413      	add	r3, r2
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	429a      	cmp	r2, r3
 800713a:	d108      	bne.n	800714e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	441a      	add	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	441a      	add	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d118      	bne.n	8007194 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4b15      	ldr	r3, [pc, #84]	@ (80071bc <prvInsertBlockIntoFreeList+0xb0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d00d      	beq.n	800718a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	441a      	add	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	e008      	b.n	800719c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800718a:	4b0c      	ldr	r3, [pc, #48]	@ (80071bc <prvInsertBlockIntoFreeList+0xb0>)
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e003      	b.n	800719c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d002      	beq.n	80071aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071aa:	bf00      	nop
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20004168 	.word	0x20004168
 80071bc:	20004170 	.word	0x20004170

080071c0 <siprintf>:
 80071c0:	b40e      	push	{r1, r2, r3}
 80071c2:	b500      	push	{lr}
 80071c4:	b09c      	sub	sp, #112	@ 0x70
 80071c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	9006      	str	r0, [sp, #24]
 80071cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071d0:	4809      	ldr	r0, [pc, #36]	@ (80071f8 <siprintf+0x38>)
 80071d2:	9107      	str	r1, [sp, #28]
 80071d4:	9104      	str	r1, [sp, #16]
 80071d6:	4909      	ldr	r1, [pc, #36]	@ (80071fc <siprintf+0x3c>)
 80071d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071dc:	9105      	str	r1, [sp, #20]
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	a902      	add	r1, sp, #8
 80071e4:	f000 f9a2 	bl	800752c <_svfiprintf_r>
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	b01c      	add	sp, #112	@ 0x70
 80071f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f4:	b003      	add	sp, #12
 80071f6:	4770      	bx	lr
 80071f8:	20000010 	.word	0x20000010
 80071fc:	ffff0208 	.word	0xffff0208

08007200 <memset>:
 8007200:	4402      	add	r2, r0
 8007202:	4603      	mov	r3, r0
 8007204:	4293      	cmp	r3, r2
 8007206:	d100      	bne.n	800720a <memset+0xa>
 8007208:	4770      	bx	lr
 800720a:	f803 1b01 	strb.w	r1, [r3], #1
 800720e:	e7f9      	b.n	8007204 <memset+0x4>

08007210 <__errno>:
 8007210:	4b01      	ldr	r3, [pc, #4]	@ (8007218 <__errno+0x8>)
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000010 	.word	0x20000010

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	@ (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	@ (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	@ (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	@ (8007260 <__libc_init_array+0x44>)
 8007230:	f000 fc66 	bl	8007b00 <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	08007c50 	.word	0x08007c50
 8007258:	08007c50 	.word	0x08007c50
 800725c:	08007c50 	.word	0x08007c50
 8007260:	08007c54 	.word	0x08007c54

08007264 <__retarget_lock_acquire_recursive>:
 8007264:	4770      	bx	lr

08007266 <__retarget_lock_release_recursive>:
 8007266:	4770      	bx	lr

08007268 <memcpy>:
 8007268:	440a      	add	r2, r1
 800726a:	4291      	cmp	r1, r2
 800726c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007270:	d100      	bne.n	8007274 <memcpy+0xc>
 8007272:	4770      	bx	lr
 8007274:	b510      	push	{r4, lr}
 8007276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727e:	4291      	cmp	r1, r2
 8007280:	d1f9      	bne.n	8007276 <memcpy+0xe>
 8007282:	bd10      	pop	{r4, pc}

08007284 <_free_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4605      	mov	r5, r0
 8007288:	2900      	cmp	r1, #0
 800728a:	d041      	beq.n	8007310 <_free_r+0x8c>
 800728c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007290:	1f0c      	subs	r4, r1, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	bfb8      	it	lt
 8007296:	18e4      	addlt	r4, r4, r3
 8007298:	f000 f8e0 	bl	800745c <__malloc_lock>
 800729c:	4a1d      	ldr	r2, [pc, #116]	@ (8007314 <_free_r+0x90>)
 800729e:	6813      	ldr	r3, [r2, #0]
 80072a0:	b933      	cbnz	r3, 80072b0 <_free_r+0x2c>
 80072a2:	6063      	str	r3, [r4, #4]
 80072a4:	6014      	str	r4, [r2, #0]
 80072a6:	4628      	mov	r0, r5
 80072a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ac:	f000 b8dc 	b.w	8007468 <__malloc_unlock>
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d908      	bls.n	80072c6 <_free_r+0x42>
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	1821      	adds	r1, r4, r0
 80072b8:	428b      	cmp	r3, r1
 80072ba:	bf01      	itttt	eq
 80072bc:	6819      	ldreq	r1, [r3, #0]
 80072be:	685b      	ldreq	r3, [r3, #4]
 80072c0:	1809      	addeq	r1, r1, r0
 80072c2:	6021      	streq	r1, [r4, #0]
 80072c4:	e7ed      	b.n	80072a2 <_free_r+0x1e>
 80072c6:	461a      	mov	r2, r3
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	b10b      	cbz	r3, 80072d0 <_free_r+0x4c>
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d9fa      	bls.n	80072c6 <_free_r+0x42>
 80072d0:	6811      	ldr	r1, [r2, #0]
 80072d2:	1850      	adds	r0, r2, r1
 80072d4:	42a0      	cmp	r0, r4
 80072d6:	d10b      	bne.n	80072f0 <_free_r+0x6c>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	4401      	add	r1, r0
 80072dc:	1850      	adds	r0, r2, r1
 80072de:	4283      	cmp	r3, r0
 80072e0:	6011      	str	r1, [r2, #0]
 80072e2:	d1e0      	bne.n	80072a6 <_free_r+0x22>
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	6053      	str	r3, [r2, #4]
 80072ea:	4408      	add	r0, r1
 80072ec:	6010      	str	r0, [r2, #0]
 80072ee:	e7da      	b.n	80072a6 <_free_r+0x22>
 80072f0:	d902      	bls.n	80072f8 <_free_r+0x74>
 80072f2:	230c      	movs	r3, #12
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	e7d6      	b.n	80072a6 <_free_r+0x22>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	1821      	adds	r1, r4, r0
 80072fc:	428b      	cmp	r3, r1
 80072fe:	bf04      	itt	eq
 8007300:	6819      	ldreq	r1, [r3, #0]
 8007302:	685b      	ldreq	r3, [r3, #4]
 8007304:	6063      	str	r3, [r4, #4]
 8007306:	bf04      	itt	eq
 8007308:	1809      	addeq	r1, r1, r0
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	6054      	str	r4, [r2, #4]
 800730e:	e7ca      	b.n	80072a6 <_free_r+0x22>
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	bf00      	nop
 8007314:	200042c4 	.word	0x200042c4

08007318 <sbrk_aligned>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4e0f      	ldr	r6, [pc, #60]	@ (8007358 <sbrk_aligned+0x40>)
 800731c:	460c      	mov	r4, r1
 800731e:	6831      	ldr	r1, [r6, #0]
 8007320:	4605      	mov	r5, r0
 8007322:	b911      	cbnz	r1, 800732a <sbrk_aligned+0x12>
 8007324:	f000 fba6 	bl	8007a74 <_sbrk_r>
 8007328:	6030      	str	r0, [r6, #0]
 800732a:	4621      	mov	r1, r4
 800732c:	4628      	mov	r0, r5
 800732e:	f000 fba1 	bl	8007a74 <_sbrk_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d103      	bne.n	800733e <sbrk_aligned+0x26>
 8007336:	f04f 34ff 	mov.w	r4, #4294967295
 800733a:	4620      	mov	r0, r4
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	1cc4      	adds	r4, r0, #3
 8007340:	f024 0403 	bic.w	r4, r4, #3
 8007344:	42a0      	cmp	r0, r4
 8007346:	d0f8      	beq.n	800733a <sbrk_aligned+0x22>
 8007348:	1a21      	subs	r1, r4, r0
 800734a:	4628      	mov	r0, r5
 800734c:	f000 fb92 	bl	8007a74 <_sbrk_r>
 8007350:	3001      	adds	r0, #1
 8007352:	d1f2      	bne.n	800733a <sbrk_aligned+0x22>
 8007354:	e7ef      	b.n	8007336 <sbrk_aligned+0x1e>
 8007356:	bf00      	nop
 8007358:	200042c0 	.word	0x200042c0

0800735c <_malloc_r>:
 800735c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007360:	1ccd      	adds	r5, r1, #3
 8007362:	f025 0503 	bic.w	r5, r5, #3
 8007366:	3508      	adds	r5, #8
 8007368:	2d0c      	cmp	r5, #12
 800736a:	bf38      	it	cc
 800736c:	250c      	movcc	r5, #12
 800736e:	2d00      	cmp	r5, #0
 8007370:	4606      	mov	r6, r0
 8007372:	db01      	blt.n	8007378 <_malloc_r+0x1c>
 8007374:	42a9      	cmp	r1, r5
 8007376:	d904      	bls.n	8007382 <_malloc_r+0x26>
 8007378:	230c      	movs	r3, #12
 800737a:	6033      	str	r3, [r6, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007458 <_malloc_r+0xfc>
 8007386:	f000 f869 	bl	800745c <__malloc_lock>
 800738a:	f8d8 3000 	ldr.w	r3, [r8]
 800738e:	461c      	mov	r4, r3
 8007390:	bb44      	cbnz	r4, 80073e4 <_malloc_r+0x88>
 8007392:	4629      	mov	r1, r5
 8007394:	4630      	mov	r0, r6
 8007396:	f7ff ffbf 	bl	8007318 <sbrk_aligned>
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	4604      	mov	r4, r0
 800739e:	d158      	bne.n	8007452 <_malloc_r+0xf6>
 80073a0:	f8d8 4000 	ldr.w	r4, [r8]
 80073a4:	4627      	mov	r7, r4
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	d143      	bne.n	8007432 <_malloc_r+0xd6>
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	d04b      	beq.n	8007446 <_malloc_r+0xea>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	4639      	mov	r1, r7
 80073b2:	4630      	mov	r0, r6
 80073b4:	eb04 0903 	add.w	r9, r4, r3
 80073b8:	f000 fb5c 	bl	8007a74 <_sbrk_r>
 80073bc:	4581      	cmp	r9, r0
 80073be:	d142      	bne.n	8007446 <_malloc_r+0xea>
 80073c0:	6821      	ldr	r1, [r4, #0]
 80073c2:	1a6d      	subs	r5, r5, r1
 80073c4:	4629      	mov	r1, r5
 80073c6:	4630      	mov	r0, r6
 80073c8:	f7ff ffa6 	bl	8007318 <sbrk_aligned>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d03a      	beq.n	8007446 <_malloc_r+0xea>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	442b      	add	r3, r5
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	f8d8 3000 	ldr.w	r3, [r8]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	bb62      	cbnz	r2, 8007438 <_malloc_r+0xdc>
 80073de:	f8c8 7000 	str.w	r7, [r8]
 80073e2:	e00f      	b.n	8007404 <_malloc_r+0xa8>
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	1b52      	subs	r2, r2, r5
 80073e8:	d420      	bmi.n	800742c <_malloc_r+0xd0>
 80073ea:	2a0b      	cmp	r2, #11
 80073ec:	d917      	bls.n	800741e <_malloc_r+0xc2>
 80073ee:	1961      	adds	r1, r4, r5
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	6025      	str	r5, [r4, #0]
 80073f4:	bf18      	it	ne
 80073f6:	6059      	strne	r1, [r3, #4]
 80073f8:	6863      	ldr	r3, [r4, #4]
 80073fa:	bf08      	it	eq
 80073fc:	f8c8 1000 	streq.w	r1, [r8]
 8007400:	5162      	str	r2, [r4, r5]
 8007402:	604b      	str	r3, [r1, #4]
 8007404:	4630      	mov	r0, r6
 8007406:	f000 f82f 	bl	8007468 <__malloc_unlock>
 800740a:	f104 000b 	add.w	r0, r4, #11
 800740e:	1d23      	adds	r3, r4, #4
 8007410:	f020 0007 	bic.w	r0, r0, #7
 8007414:	1ac2      	subs	r2, r0, r3
 8007416:	bf1c      	itt	ne
 8007418:	1a1b      	subne	r3, r3, r0
 800741a:	50a3      	strne	r3, [r4, r2]
 800741c:	e7af      	b.n	800737e <_malloc_r+0x22>
 800741e:	6862      	ldr	r2, [r4, #4]
 8007420:	42a3      	cmp	r3, r4
 8007422:	bf0c      	ite	eq
 8007424:	f8c8 2000 	streq.w	r2, [r8]
 8007428:	605a      	strne	r2, [r3, #4]
 800742a:	e7eb      	b.n	8007404 <_malloc_r+0xa8>
 800742c:	4623      	mov	r3, r4
 800742e:	6864      	ldr	r4, [r4, #4]
 8007430:	e7ae      	b.n	8007390 <_malloc_r+0x34>
 8007432:	463c      	mov	r4, r7
 8007434:	687f      	ldr	r7, [r7, #4]
 8007436:	e7b6      	b.n	80073a6 <_malloc_r+0x4a>
 8007438:	461a      	mov	r2, r3
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	42a3      	cmp	r3, r4
 800743e:	d1fb      	bne.n	8007438 <_malloc_r+0xdc>
 8007440:	2300      	movs	r3, #0
 8007442:	6053      	str	r3, [r2, #4]
 8007444:	e7de      	b.n	8007404 <_malloc_r+0xa8>
 8007446:	230c      	movs	r3, #12
 8007448:	6033      	str	r3, [r6, #0]
 800744a:	4630      	mov	r0, r6
 800744c:	f000 f80c 	bl	8007468 <__malloc_unlock>
 8007450:	e794      	b.n	800737c <_malloc_r+0x20>
 8007452:	6005      	str	r5, [r0, #0]
 8007454:	e7d6      	b.n	8007404 <_malloc_r+0xa8>
 8007456:	bf00      	nop
 8007458:	200042c4 	.word	0x200042c4

0800745c <__malloc_lock>:
 800745c:	4801      	ldr	r0, [pc, #4]	@ (8007464 <__malloc_lock+0x8>)
 800745e:	f7ff bf01 	b.w	8007264 <__retarget_lock_acquire_recursive>
 8007462:	bf00      	nop
 8007464:	200042bc 	.word	0x200042bc

08007468 <__malloc_unlock>:
 8007468:	4801      	ldr	r0, [pc, #4]	@ (8007470 <__malloc_unlock+0x8>)
 800746a:	f7ff befc 	b.w	8007266 <__retarget_lock_release_recursive>
 800746e:	bf00      	nop
 8007470:	200042bc 	.word	0x200042bc

08007474 <__ssputs_r>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	688e      	ldr	r6, [r1, #8]
 800747a:	461f      	mov	r7, r3
 800747c:	42be      	cmp	r6, r7
 800747e:	680b      	ldr	r3, [r1, #0]
 8007480:	4682      	mov	sl, r0
 8007482:	460c      	mov	r4, r1
 8007484:	4690      	mov	r8, r2
 8007486:	d82d      	bhi.n	80074e4 <__ssputs_r+0x70>
 8007488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800748c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007490:	d026      	beq.n	80074e0 <__ssputs_r+0x6c>
 8007492:	6965      	ldr	r5, [r4, #20]
 8007494:	6909      	ldr	r1, [r1, #16]
 8007496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800749a:	eba3 0901 	sub.w	r9, r3, r1
 800749e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074a2:	1c7b      	adds	r3, r7, #1
 80074a4:	444b      	add	r3, r9
 80074a6:	106d      	asrs	r5, r5, #1
 80074a8:	429d      	cmp	r5, r3
 80074aa:	bf38      	it	cc
 80074ac:	461d      	movcc	r5, r3
 80074ae:	0553      	lsls	r3, r2, #21
 80074b0:	d527      	bpl.n	8007502 <__ssputs_r+0x8e>
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7ff ff52 	bl	800735c <_malloc_r>
 80074b8:	4606      	mov	r6, r0
 80074ba:	b360      	cbz	r0, 8007516 <__ssputs_r+0xa2>
 80074bc:	6921      	ldr	r1, [r4, #16]
 80074be:	464a      	mov	r2, r9
 80074c0:	f7ff fed2 	bl	8007268 <memcpy>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	6126      	str	r6, [r4, #16]
 80074d2:	6165      	str	r5, [r4, #20]
 80074d4:	444e      	add	r6, r9
 80074d6:	eba5 0509 	sub.w	r5, r5, r9
 80074da:	6026      	str	r6, [r4, #0]
 80074dc:	60a5      	str	r5, [r4, #8]
 80074de:	463e      	mov	r6, r7
 80074e0:	42be      	cmp	r6, r7
 80074e2:	d900      	bls.n	80074e6 <__ssputs_r+0x72>
 80074e4:	463e      	mov	r6, r7
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	4632      	mov	r2, r6
 80074ea:	4641      	mov	r1, r8
 80074ec:	f000 faa8 	bl	8007a40 <memmove>
 80074f0:	68a3      	ldr	r3, [r4, #8]
 80074f2:	1b9b      	subs	r3, r3, r6
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	4433      	add	r3, r6
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	462a      	mov	r2, r5
 8007504:	f000 fac6 	bl	8007a94 <_realloc_r>
 8007508:	4606      	mov	r6, r0
 800750a:	2800      	cmp	r0, #0
 800750c:	d1e0      	bne.n	80074d0 <__ssputs_r+0x5c>
 800750e:	6921      	ldr	r1, [r4, #16]
 8007510:	4650      	mov	r0, sl
 8007512:	f7ff feb7 	bl	8007284 <_free_r>
 8007516:	230c      	movs	r3, #12
 8007518:	f8ca 3000 	str.w	r3, [sl]
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	e7e9      	b.n	80074fe <__ssputs_r+0x8a>
	...

0800752c <_svfiprintf_r>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	4698      	mov	r8, r3
 8007532:	898b      	ldrh	r3, [r1, #12]
 8007534:	061b      	lsls	r3, r3, #24
 8007536:	b09d      	sub	sp, #116	@ 0x74
 8007538:	4607      	mov	r7, r0
 800753a:	460d      	mov	r5, r1
 800753c:	4614      	mov	r4, r2
 800753e:	d510      	bpl.n	8007562 <_svfiprintf_r+0x36>
 8007540:	690b      	ldr	r3, [r1, #16]
 8007542:	b973      	cbnz	r3, 8007562 <_svfiprintf_r+0x36>
 8007544:	2140      	movs	r1, #64	@ 0x40
 8007546:	f7ff ff09 	bl	800735c <_malloc_r>
 800754a:	6028      	str	r0, [r5, #0]
 800754c:	6128      	str	r0, [r5, #16]
 800754e:	b930      	cbnz	r0, 800755e <_svfiprintf_r+0x32>
 8007550:	230c      	movs	r3, #12
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	b01d      	add	sp, #116	@ 0x74
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	2340      	movs	r3, #64	@ 0x40
 8007560:	616b      	str	r3, [r5, #20]
 8007562:	2300      	movs	r3, #0
 8007564:	9309      	str	r3, [sp, #36]	@ 0x24
 8007566:	2320      	movs	r3, #32
 8007568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800756c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007570:	2330      	movs	r3, #48	@ 0x30
 8007572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007710 <_svfiprintf_r+0x1e4>
 8007576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800757a:	f04f 0901 	mov.w	r9, #1
 800757e:	4623      	mov	r3, r4
 8007580:	469a      	mov	sl, r3
 8007582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007586:	b10a      	cbz	r2, 800758c <_svfiprintf_r+0x60>
 8007588:	2a25      	cmp	r2, #37	@ 0x25
 800758a:	d1f9      	bne.n	8007580 <_svfiprintf_r+0x54>
 800758c:	ebba 0b04 	subs.w	fp, sl, r4
 8007590:	d00b      	beq.n	80075aa <_svfiprintf_r+0x7e>
 8007592:	465b      	mov	r3, fp
 8007594:	4622      	mov	r2, r4
 8007596:	4629      	mov	r1, r5
 8007598:	4638      	mov	r0, r7
 800759a:	f7ff ff6b 	bl	8007474 <__ssputs_r>
 800759e:	3001      	adds	r0, #1
 80075a0:	f000 80a7 	beq.w	80076f2 <_svfiprintf_r+0x1c6>
 80075a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a6:	445a      	add	r2, fp
 80075a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80075aa:	f89a 3000 	ldrb.w	r3, [sl]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 809f 	beq.w	80076f2 <_svfiprintf_r+0x1c6>
 80075b4:	2300      	movs	r3, #0
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075be:	f10a 0a01 	add.w	sl, sl, #1
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	9307      	str	r3, [sp, #28]
 80075c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80075cc:	4654      	mov	r4, sl
 80075ce:	2205      	movs	r2, #5
 80075d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d4:	484e      	ldr	r0, [pc, #312]	@ (8007710 <_svfiprintf_r+0x1e4>)
 80075d6:	f7f8 fe3b 	bl	8000250 <memchr>
 80075da:	9a04      	ldr	r2, [sp, #16]
 80075dc:	b9d8      	cbnz	r0, 8007616 <_svfiprintf_r+0xea>
 80075de:	06d0      	lsls	r0, r2, #27
 80075e0:	bf44      	itt	mi
 80075e2:	2320      	movmi	r3, #32
 80075e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e8:	0711      	lsls	r1, r2, #28
 80075ea:	bf44      	itt	mi
 80075ec:	232b      	movmi	r3, #43	@ 0x2b
 80075ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075f2:	f89a 3000 	ldrb.w	r3, [sl]
 80075f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f8:	d015      	beq.n	8007626 <_svfiprintf_r+0xfa>
 80075fa:	9a07      	ldr	r2, [sp, #28]
 80075fc:	4654      	mov	r4, sl
 80075fe:	2000      	movs	r0, #0
 8007600:	f04f 0c0a 	mov.w	ip, #10
 8007604:	4621      	mov	r1, r4
 8007606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800760a:	3b30      	subs	r3, #48	@ 0x30
 800760c:	2b09      	cmp	r3, #9
 800760e:	d94b      	bls.n	80076a8 <_svfiprintf_r+0x17c>
 8007610:	b1b0      	cbz	r0, 8007640 <_svfiprintf_r+0x114>
 8007612:	9207      	str	r2, [sp, #28]
 8007614:	e014      	b.n	8007640 <_svfiprintf_r+0x114>
 8007616:	eba0 0308 	sub.w	r3, r0, r8
 800761a:	fa09 f303 	lsl.w	r3, r9, r3
 800761e:	4313      	orrs	r3, r2
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	46a2      	mov	sl, r4
 8007624:	e7d2      	b.n	80075cc <_svfiprintf_r+0xa0>
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	1d19      	adds	r1, r3, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	9103      	str	r1, [sp, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	bfbb      	ittet	lt
 8007632:	425b      	neglt	r3, r3
 8007634:	f042 0202 	orrlt.w	r2, r2, #2
 8007638:	9307      	strge	r3, [sp, #28]
 800763a:	9307      	strlt	r3, [sp, #28]
 800763c:	bfb8      	it	lt
 800763e:	9204      	strlt	r2, [sp, #16]
 8007640:	7823      	ldrb	r3, [r4, #0]
 8007642:	2b2e      	cmp	r3, #46	@ 0x2e
 8007644:	d10a      	bne.n	800765c <_svfiprintf_r+0x130>
 8007646:	7863      	ldrb	r3, [r4, #1]
 8007648:	2b2a      	cmp	r3, #42	@ 0x2a
 800764a:	d132      	bne.n	80076b2 <_svfiprintf_r+0x186>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	9203      	str	r2, [sp, #12]
 8007654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007658:	3402      	adds	r4, #2
 800765a:	9305      	str	r3, [sp, #20]
 800765c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007720 <_svfiprintf_r+0x1f4>
 8007660:	7821      	ldrb	r1, [r4, #0]
 8007662:	2203      	movs	r2, #3
 8007664:	4650      	mov	r0, sl
 8007666:	f7f8 fdf3 	bl	8000250 <memchr>
 800766a:	b138      	cbz	r0, 800767c <_svfiprintf_r+0x150>
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	eba0 000a 	sub.w	r0, r0, sl
 8007672:	2240      	movs	r2, #64	@ 0x40
 8007674:	4082      	lsls	r2, r0
 8007676:	4313      	orrs	r3, r2
 8007678:	3401      	adds	r4, #1
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007680:	4824      	ldr	r0, [pc, #144]	@ (8007714 <_svfiprintf_r+0x1e8>)
 8007682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007686:	2206      	movs	r2, #6
 8007688:	f7f8 fde2 	bl	8000250 <memchr>
 800768c:	2800      	cmp	r0, #0
 800768e:	d036      	beq.n	80076fe <_svfiprintf_r+0x1d2>
 8007690:	4b21      	ldr	r3, [pc, #132]	@ (8007718 <_svfiprintf_r+0x1ec>)
 8007692:	bb1b      	cbnz	r3, 80076dc <_svfiprintf_r+0x1b0>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	3307      	adds	r3, #7
 8007698:	f023 0307 	bic.w	r3, r3, #7
 800769c:	3308      	adds	r3, #8
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a2:	4433      	add	r3, r6
 80076a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a6:	e76a      	b.n	800757e <_svfiprintf_r+0x52>
 80076a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ac:	460c      	mov	r4, r1
 80076ae:	2001      	movs	r0, #1
 80076b0:	e7a8      	b.n	8007604 <_svfiprintf_r+0xd8>
 80076b2:	2300      	movs	r3, #0
 80076b4:	3401      	adds	r4, #1
 80076b6:	9305      	str	r3, [sp, #20]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f04f 0c0a 	mov.w	ip, #10
 80076be:	4620      	mov	r0, r4
 80076c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c4:	3a30      	subs	r2, #48	@ 0x30
 80076c6:	2a09      	cmp	r2, #9
 80076c8:	d903      	bls.n	80076d2 <_svfiprintf_r+0x1a6>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0c6      	beq.n	800765c <_svfiprintf_r+0x130>
 80076ce:	9105      	str	r1, [sp, #20]
 80076d0:	e7c4      	b.n	800765c <_svfiprintf_r+0x130>
 80076d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d6:	4604      	mov	r4, r0
 80076d8:	2301      	movs	r3, #1
 80076da:	e7f0      	b.n	80076be <_svfiprintf_r+0x192>
 80076dc:	ab03      	add	r3, sp, #12
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	462a      	mov	r2, r5
 80076e2:	4b0e      	ldr	r3, [pc, #56]	@ (800771c <_svfiprintf_r+0x1f0>)
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	4638      	mov	r0, r7
 80076e8:	f3af 8000 	nop.w
 80076ec:	1c42      	adds	r2, r0, #1
 80076ee:	4606      	mov	r6, r0
 80076f0:	d1d6      	bne.n	80076a0 <_svfiprintf_r+0x174>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	065b      	lsls	r3, r3, #25
 80076f6:	f53f af2d 	bmi.w	8007554 <_svfiprintf_r+0x28>
 80076fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076fc:	e72c      	b.n	8007558 <_svfiprintf_r+0x2c>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b05      	ldr	r3, [pc, #20]	@ (800771c <_svfiprintf_r+0x1f0>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4638      	mov	r0, r7
 800770a:	f000 f879 	bl	8007800 <_printf_i>
 800770e:	e7ed      	b.n	80076ec <_svfiprintf_r+0x1c0>
 8007710:	08007c14 	.word	0x08007c14
 8007714:	08007c1e 	.word	0x08007c1e
 8007718:	00000000 	.word	0x00000000
 800771c:	08007475 	.word	0x08007475
 8007720:	08007c1a 	.word	0x08007c1a

08007724 <_printf_common>:
 8007724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007728:	4616      	mov	r6, r2
 800772a:	4698      	mov	r8, r3
 800772c:	688a      	ldr	r2, [r1, #8]
 800772e:	690b      	ldr	r3, [r1, #16]
 8007730:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007734:	4293      	cmp	r3, r2
 8007736:	bfb8      	it	lt
 8007738:	4613      	movlt	r3, r2
 800773a:	6033      	str	r3, [r6, #0]
 800773c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007740:	4607      	mov	r7, r0
 8007742:	460c      	mov	r4, r1
 8007744:	b10a      	cbz	r2, 800774a <_printf_common+0x26>
 8007746:	3301      	adds	r3, #1
 8007748:	6033      	str	r3, [r6, #0]
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	0699      	lsls	r1, r3, #26
 800774e:	bf42      	ittt	mi
 8007750:	6833      	ldrmi	r3, [r6, #0]
 8007752:	3302      	addmi	r3, #2
 8007754:	6033      	strmi	r3, [r6, #0]
 8007756:	6825      	ldr	r5, [r4, #0]
 8007758:	f015 0506 	ands.w	r5, r5, #6
 800775c:	d106      	bne.n	800776c <_printf_common+0x48>
 800775e:	f104 0a19 	add.w	sl, r4, #25
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	6832      	ldr	r2, [r6, #0]
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	42ab      	cmp	r3, r5
 800776a:	dc26      	bgt.n	80077ba <_printf_common+0x96>
 800776c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	3b00      	subs	r3, #0
 8007774:	bf18      	it	ne
 8007776:	2301      	movne	r3, #1
 8007778:	0692      	lsls	r2, r2, #26
 800777a:	d42b      	bmi.n	80077d4 <_printf_common+0xb0>
 800777c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007780:	4641      	mov	r1, r8
 8007782:	4638      	mov	r0, r7
 8007784:	47c8      	blx	r9
 8007786:	3001      	adds	r0, #1
 8007788:	d01e      	beq.n	80077c8 <_printf_common+0xa4>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	6922      	ldr	r2, [r4, #16]
 800778e:	f003 0306 	and.w	r3, r3, #6
 8007792:	2b04      	cmp	r3, #4
 8007794:	bf02      	ittt	eq
 8007796:	68e5      	ldreq	r5, [r4, #12]
 8007798:	6833      	ldreq	r3, [r6, #0]
 800779a:	1aed      	subeq	r5, r5, r3
 800779c:	68a3      	ldr	r3, [r4, #8]
 800779e:	bf0c      	ite	eq
 80077a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077a4:	2500      	movne	r5, #0
 80077a6:	4293      	cmp	r3, r2
 80077a8:	bfc4      	itt	gt
 80077aa:	1a9b      	subgt	r3, r3, r2
 80077ac:	18ed      	addgt	r5, r5, r3
 80077ae:	2600      	movs	r6, #0
 80077b0:	341a      	adds	r4, #26
 80077b2:	42b5      	cmp	r5, r6
 80077b4:	d11a      	bne.n	80077ec <_printf_common+0xc8>
 80077b6:	2000      	movs	r0, #0
 80077b8:	e008      	b.n	80077cc <_printf_common+0xa8>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4652      	mov	r2, sl
 80077be:	4641      	mov	r1, r8
 80077c0:	4638      	mov	r0, r7
 80077c2:	47c8      	blx	r9
 80077c4:	3001      	adds	r0, #1
 80077c6:	d103      	bne.n	80077d0 <_printf_common+0xac>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d0:	3501      	adds	r5, #1
 80077d2:	e7c6      	b.n	8007762 <_printf_common+0x3e>
 80077d4:	18e1      	adds	r1, r4, r3
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	2030      	movs	r0, #48	@ 0x30
 80077da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077de:	4422      	add	r2, r4
 80077e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077e8:	3302      	adds	r3, #2
 80077ea:	e7c7      	b.n	800777c <_printf_common+0x58>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4622      	mov	r2, r4
 80077f0:	4641      	mov	r1, r8
 80077f2:	4638      	mov	r0, r7
 80077f4:	47c8      	blx	r9
 80077f6:	3001      	adds	r0, #1
 80077f8:	d0e6      	beq.n	80077c8 <_printf_common+0xa4>
 80077fa:	3601      	adds	r6, #1
 80077fc:	e7d9      	b.n	80077b2 <_printf_common+0x8e>
	...

08007800 <_printf_i>:
 8007800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	7e0f      	ldrb	r7, [r1, #24]
 8007806:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007808:	2f78      	cmp	r7, #120	@ 0x78
 800780a:	4691      	mov	r9, r2
 800780c:	4680      	mov	r8, r0
 800780e:	460c      	mov	r4, r1
 8007810:	469a      	mov	sl, r3
 8007812:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007816:	d807      	bhi.n	8007828 <_printf_i+0x28>
 8007818:	2f62      	cmp	r7, #98	@ 0x62
 800781a:	d80a      	bhi.n	8007832 <_printf_i+0x32>
 800781c:	2f00      	cmp	r7, #0
 800781e:	f000 80d2 	beq.w	80079c6 <_printf_i+0x1c6>
 8007822:	2f58      	cmp	r7, #88	@ 0x58
 8007824:	f000 80b9 	beq.w	800799a <_printf_i+0x19a>
 8007828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800782c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007830:	e03a      	b.n	80078a8 <_printf_i+0xa8>
 8007832:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007836:	2b15      	cmp	r3, #21
 8007838:	d8f6      	bhi.n	8007828 <_printf_i+0x28>
 800783a:	a101      	add	r1, pc, #4	@ (adr r1, 8007840 <_printf_i+0x40>)
 800783c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007840:	08007899 	.word	0x08007899
 8007844:	080078ad 	.word	0x080078ad
 8007848:	08007829 	.word	0x08007829
 800784c:	08007829 	.word	0x08007829
 8007850:	08007829 	.word	0x08007829
 8007854:	08007829 	.word	0x08007829
 8007858:	080078ad 	.word	0x080078ad
 800785c:	08007829 	.word	0x08007829
 8007860:	08007829 	.word	0x08007829
 8007864:	08007829 	.word	0x08007829
 8007868:	08007829 	.word	0x08007829
 800786c:	080079ad 	.word	0x080079ad
 8007870:	080078d7 	.word	0x080078d7
 8007874:	08007967 	.word	0x08007967
 8007878:	08007829 	.word	0x08007829
 800787c:	08007829 	.word	0x08007829
 8007880:	080079cf 	.word	0x080079cf
 8007884:	08007829 	.word	0x08007829
 8007888:	080078d7 	.word	0x080078d7
 800788c:	08007829 	.word	0x08007829
 8007890:	08007829 	.word	0x08007829
 8007894:	0800796f 	.word	0x0800796f
 8007898:	6833      	ldr	r3, [r6, #0]
 800789a:	1d1a      	adds	r2, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6032      	str	r2, [r6, #0]
 80078a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078a8:	2301      	movs	r3, #1
 80078aa:	e09d      	b.n	80079e8 <_printf_i+0x1e8>
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	1d19      	adds	r1, r3, #4
 80078b2:	6031      	str	r1, [r6, #0]
 80078b4:	0606      	lsls	r6, r0, #24
 80078b6:	d501      	bpl.n	80078bc <_printf_i+0xbc>
 80078b8:	681d      	ldr	r5, [r3, #0]
 80078ba:	e003      	b.n	80078c4 <_printf_i+0xc4>
 80078bc:	0645      	lsls	r5, r0, #25
 80078be:	d5fb      	bpl.n	80078b8 <_printf_i+0xb8>
 80078c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	da03      	bge.n	80078d0 <_printf_i+0xd0>
 80078c8:	232d      	movs	r3, #45	@ 0x2d
 80078ca:	426d      	negs	r5, r5
 80078cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078d0:	4859      	ldr	r0, [pc, #356]	@ (8007a38 <_printf_i+0x238>)
 80078d2:	230a      	movs	r3, #10
 80078d4:	e011      	b.n	80078fa <_printf_i+0xfa>
 80078d6:	6821      	ldr	r1, [r4, #0]
 80078d8:	6833      	ldr	r3, [r6, #0]
 80078da:	0608      	lsls	r0, r1, #24
 80078dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80078e0:	d402      	bmi.n	80078e8 <_printf_i+0xe8>
 80078e2:	0649      	lsls	r1, r1, #25
 80078e4:	bf48      	it	mi
 80078e6:	b2ad      	uxthmi	r5, r5
 80078e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80078ea:	4853      	ldr	r0, [pc, #332]	@ (8007a38 <_printf_i+0x238>)
 80078ec:	6033      	str	r3, [r6, #0]
 80078ee:	bf14      	ite	ne
 80078f0:	230a      	movne	r3, #10
 80078f2:	2308      	moveq	r3, #8
 80078f4:	2100      	movs	r1, #0
 80078f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078fa:	6866      	ldr	r6, [r4, #4]
 80078fc:	60a6      	str	r6, [r4, #8]
 80078fe:	2e00      	cmp	r6, #0
 8007900:	bfa2      	ittt	ge
 8007902:	6821      	ldrge	r1, [r4, #0]
 8007904:	f021 0104 	bicge.w	r1, r1, #4
 8007908:	6021      	strge	r1, [r4, #0]
 800790a:	b90d      	cbnz	r5, 8007910 <_printf_i+0x110>
 800790c:	2e00      	cmp	r6, #0
 800790e:	d04b      	beq.n	80079a8 <_printf_i+0x1a8>
 8007910:	4616      	mov	r6, r2
 8007912:	fbb5 f1f3 	udiv	r1, r5, r3
 8007916:	fb03 5711 	mls	r7, r3, r1, r5
 800791a:	5dc7      	ldrb	r7, [r0, r7]
 800791c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007920:	462f      	mov	r7, r5
 8007922:	42bb      	cmp	r3, r7
 8007924:	460d      	mov	r5, r1
 8007926:	d9f4      	bls.n	8007912 <_printf_i+0x112>
 8007928:	2b08      	cmp	r3, #8
 800792a:	d10b      	bne.n	8007944 <_printf_i+0x144>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	07df      	lsls	r7, r3, #31
 8007930:	d508      	bpl.n	8007944 <_printf_i+0x144>
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	6861      	ldr	r1, [r4, #4]
 8007936:	4299      	cmp	r1, r3
 8007938:	bfde      	ittt	le
 800793a:	2330      	movle	r3, #48	@ 0x30
 800793c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007940:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007944:	1b92      	subs	r2, r2, r6
 8007946:	6122      	str	r2, [r4, #16]
 8007948:	f8cd a000 	str.w	sl, [sp]
 800794c:	464b      	mov	r3, r9
 800794e:	aa03      	add	r2, sp, #12
 8007950:	4621      	mov	r1, r4
 8007952:	4640      	mov	r0, r8
 8007954:	f7ff fee6 	bl	8007724 <_printf_common>
 8007958:	3001      	adds	r0, #1
 800795a:	d14a      	bne.n	80079f2 <_printf_i+0x1f2>
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	b004      	add	sp, #16
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	f043 0320 	orr.w	r3, r3, #32
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	4833      	ldr	r0, [pc, #204]	@ (8007a3c <_printf_i+0x23c>)
 8007970:	2778      	movs	r7, #120	@ 0x78
 8007972:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	6831      	ldr	r1, [r6, #0]
 800797a:	061f      	lsls	r7, r3, #24
 800797c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007980:	d402      	bmi.n	8007988 <_printf_i+0x188>
 8007982:	065f      	lsls	r7, r3, #25
 8007984:	bf48      	it	mi
 8007986:	b2ad      	uxthmi	r5, r5
 8007988:	6031      	str	r1, [r6, #0]
 800798a:	07d9      	lsls	r1, r3, #31
 800798c:	bf44      	itt	mi
 800798e:	f043 0320 	orrmi.w	r3, r3, #32
 8007992:	6023      	strmi	r3, [r4, #0]
 8007994:	b11d      	cbz	r5, 800799e <_printf_i+0x19e>
 8007996:	2310      	movs	r3, #16
 8007998:	e7ac      	b.n	80078f4 <_printf_i+0xf4>
 800799a:	4827      	ldr	r0, [pc, #156]	@ (8007a38 <_printf_i+0x238>)
 800799c:	e7e9      	b.n	8007972 <_printf_i+0x172>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	f023 0320 	bic.w	r3, r3, #32
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	e7f6      	b.n	8007996 <_printf_i+0x196>
 80079a8:	4616      	mov	r6, r2
 80079aa:	e7bd      	b.n	8007928 <_printf_i+0x128>
 80079ac:	6833      	ldr	r3, [r6, #0]
 80079ae:	6825      	ldr	r5, [r4, #0]
 80079b0:	6961      	ldr	r1, [r4, #20]
 80079b2:	1d18      	adds	r0, r3, #4
 80079b4:	6030      	str	r0, [r6, #0]
 80079b6:	062e      	lsls	r6, r5, #24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	d501      	bpl.n	80079c0 <_printf_i+0x1c0>
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	e002      	b.n	80079c6 <_printf_i+0x1c6>
 80079c0:	0668      	lsls	r0, r5, #25
 80079c2:	d5fb      	bpl.n	80079bc <_printf_i+0x1bc>
 80079c4:	8019      	strh	r1, [r3, #0]
 80079c6:	2300      	movs	r3, #0
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	4616      	mov	r6, r2
 80079cc:	e7bc      	b.n	8007948 <_printf_i+0x148>
 80079ce:	6833      	ldr	r3, [r6, #0]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	6032      	str	r2, [r6, #0]
 80079d4:	681e      	ldr	r6, [r3, #0]
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	2100      	movs	r1, #0
 80079da:	4630      	mov	r0, r6
 80079dc:	f7f8 fc38 	bl	8000250 <memchr>
 80079e0:	b108      	cbz	r0, 80079e6 <_printf_i+0x1e6>
 80079e2:	1b80      	subs	r0, r0, r6
 80079e4:	6060      	str	r0, [r4, #4]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	2300      	movs	r3, #0
 80079ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f0:	e7aa      	b.n	8007948 <_printf_i+0x148>
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	4632      	mov	r2, r6
 80079f6:	4649      	mov	r1, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	47d0      	blx	sl
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0ad      	beq.n	800795c <_printf_i+0x15c>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	079b      	lsls	r3, r3, #30
 8007a04:	d413      	bmi.n	8007a2e <_printf_i+0x22e>
 8007a06:	68e0      	ldr	r0, [r4, #12]
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	bfb8      	it	lt
 8007a0e:	4618      	movlt	r0, r3
 8007a10:	e7a6      	b.n	8007960 <_printf_i+0x160>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4632      	mov	r2, r6
 8007a16:	4649      	mov	r1, r9
 8007a18:	4640      	mov	r0, r8
 8007a1a:	47d0      	blx	sl
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d09d      	beq.n	800795c <_printf_i+0x15c>
 8007a20:	3501      	adds	r5, #1
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	9903      	ldr	r1, [sp, #12]
 8007a26:	1a5b      	subs	r3, r3, r1
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dcf2      	bgt.n	8007a12 <_printf_i+0x212>
 8007a2c:	e7eb      	b.n	8007a06 <_printf_i+0x206>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	f104 0619 	add.w	r6, r4, #25
 8007a34:	e7f5      	b.n	8007a22 <_printf_i+0x222>
 8007a36:	bf00      	nop
 8007a38:	08007c25 	.word	0x08007c25
 8007a3c:	08007c36 	.word	0x08007c36

08007a40 <memmove>:
 8007a40:	4288      	cmp	r0, r1
 8007a42:	b510      	push	{r4, lr}
 8007a44:	eb01 0402 	add.w	r4, r1, r2
 8007a48:	d902      	bls.n	8007a50 <memmove+0x10>
 8007a4a:	4284      	cmp	r4, r0
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	d807      	bhi.n	8007a60 <memmove+0x20>
 8007a50:	1e43      	subs	r3, r0, #1
 8007a52:	42a1      	cmp	r1, r4
 8007a54:	d008      	beq.n	8007a68 <memmove+0x28>
 8007a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a5e:	e7f8      	b.n	8007a52 <memmove+0x12>
 8007a60:	4402      	add	r2, r0
 8007a62:	4601      	mov	r1, r0
 8007a64:	428a      	cmp	r2, r1
 8007a66:	d100      	bne.n	8007a6a <memmove+0x2a>
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a72:	e7f7      	b.n	8007a64 <memmove+0x24>

08007a74 <_sbrk_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d06      	ldr	r5, [pc, #24]	@ (8007a90 <_sbrk_r+0x1c>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7f9 fa72 	bl	8000f68 <_sbrk>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_sbrk_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_sbrk_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	200042b8 	.word	0x200042b8

08007a94 <_realloc_r>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	4680      	mov	r8, r0
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	b921      	cbnz	r1, 8007aaa <_realloc_r+0x16>
 8007aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	f7ff bc59 	b.w	800735c <_malloc_r>
 8007aaa:	b92a      	cbnz	r2, 8007ab8 <_realloc_r+0x24>
 8007aac:	f7ff fbea 	bl	8007284 <_free_r>
 8007ab0:	2400      	movs	r4, #0
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	f000 f81a 	bl	8007af0 <_malloc_usable_size_r>
 8007abc:	4285      	cmp	r5, r0
 8007abe:	4606      	mov	r6, r0
 8007ac0:	d802      	bhi.n	8007ac8 <_realloc_r+0x34>
 8007ac2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ac6:	d8f4      	bhi.n	8007ab2 <_realloc_r+0x1e>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7ff fc46 	bl	800735c <_malloc_r>
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d0ec      	beq.n	8007ab0 <_realloc_r+0x1c>
 8007ad6:	42b5      	cmp	r5, r6
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4621      	mov	r1, r4
 8007adc:	bf28      	it	cs
 8007ade:	4632      	movcs	r2, r6
 8007ae0:	f7ff fbc2 	bl	8007268 <memcpy>
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	f7ff fbcc 	bl	8007284 <_free_r>
 8007aec:	463c      	mov	r4, r7
 8007aee:	e7e0      	b.n	8007ab2 <_realloc_r+0x1e>

08007af0 <_malloc_usable_size_r>:
 8007af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af4:	1f18      	subs	r0, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bfbc      	itt	lt
 8007afa:	580b      	ldrlt	r3, [r1, r0]
 8007afc:	18c0      	addlt	r0, r0, r3
 8007afe:	4770      	bx	lr

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
